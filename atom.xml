<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fengerous的博客</title>
  
  <subtitle>最怕一生碌碌无为，还说平凡难能可贵</subtitle>
  <link href="http://yanglf.online/atom.xml" rel="self"/>
  
  <link href="http://yanglf.online/"/>
  <updated>2023-03-02T08:37:01.591Z</updated>
  <id>http://yanglf.online/</id>
  
  <author>
    <name>yanglf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker高级</title>
    <link href="http://yanglf.online/p/20caa7eb.html"/>
    <id>http://yanglf.online/p/20caa7eb.html</id>
    <published>2023-02-27T08:05:33.000Z</published>
    <updated>2023-03-02T08:37:01.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>官方定义</p></blockquote><ul><li><p>定义运行多个容器</p></li><li><p>YAML配置文件</p></li></ul><p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. To learn more about all the features of Compose, see <a href="https://docs.docker.com/compose/#features">the list of features</a>.</p><span id="more"></span><ul><li>所有环节都可以使用compose</li></ul><p>Compose works in all environments: production, staging, development, testing, as well as CI workflows. You can learn more about each case in <a href="https://docs.docker.com/compose/#common-use-cases">Common Use Cases</a>.</p><p>Using Compose is basically a three-step process:</p><ol><li><p>Define your app’s environment with a <code>Dockerfile</code> so it can be reproduced anywhere.</p><ul><li>Dockerfile 保证项目在任何地方运行</li></ul></li><li><p>Define the services that make up your app in <code>docker-compose.yml</code> so they can be run together in an isolated environment.</p><ul><li>docker-compose.yml 文件</li></ul></li><li><p>Run <code>docker-compose up</code> and Compose starts and runs your entire app.</p><ul><li>docker-compose up 启动</li></ul></li></ol><p>作用: 批量容器编排</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.:/code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">logvolume01:/var/log</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">logvolume01:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>Compose重要概念:</p><ul><li>服务services,容器，应用.(web,redis,mysql)</li><li>项目project，一组关联的容器 博客:wp+mysql</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">国内下载地址</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><ol start="2"><li>授权</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line">[root@VM-0-16-centos bin]# docker-compose version</span><br><span class="line">docker-compose version 1.16.1, build 6d1ac21</span><br><span class="line">docker-py version: 2.5.1</span><br><span class="line">CPython version: 2.7.13</span><br><span class="line">OpenSSL version: OpenSSL 1.0.1t  3 May 2016</span><br></pre></td></tr></table></figure><ol start="3"><li>卸载</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><blockquote><p>python 计数</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos composetest]#  mkdir composetest</span><br><span class="line">[root@VM_0_17_centos composetest]#  cd composetest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">app.py 应用</span></span><br><span class="line">[root@VM_0_17_centos composetest]# cat app.py </span><br><span class="line">import time</span><br><span class="line">import redis</span><br><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=&#x27;redis&#x27;, port=6379)</span><br><span class="line"></span><br><span class="line">def get_hit_count():</span><br><span class="line">    retries = 5</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            return cache.incr(&#x27;hits&#x27;)</span><br><span class="line">        except redis.exceptions.ConnectionError as exc:</span><br><span class="line">            if retries == 0:</span><br><span class="line">                raise exc</span><br><span class="line">            retries -= 1</span><br><span class="line">            time.sleep(0.5)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def hello():</span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    return &#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;.format(count)</span><br><span class="line"></span><br><span class="line">if __name__ ==&#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;,debug=True)</span><br><span class="line">[root@VM_0_17_centos composetest]# cat requirements.txt </span><br><span class="line">flask</span><br><span class="line">redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Dockerfile 应用打包成镜像</span></span><br><span class="line">[root@VM_0_17_centos composetest]# cat Dockerfile </span><br><span class="line">FROM python:3.7-alpine</span><br><span class="line">ADD . /code</span><br><span class="line">WORKDIR /code</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-compose.ymp 服务配置文件</span></span><br><span class="line">[root@VM_0_17_centos composetest]# cat docker-compose.yml </span><br><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5000:5000&quot;</span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;redis:alpine&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">[root@VM_0_17_centos composetest]# docker-compose up</span><br><span class="line">[root@VM_0_17_centos ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">2cc141f57f6a        composetest_web     &quot;python app.py&quot;          5 hours ago         Up 5 hours          0.0.0.0:5000-&gt;5000/tcp   composetest_web_1</span><br><span class="line">246e0bbfb146        redis:alpine        &quot;docker-entrypoint.s…&quot;   5 hours ago         Up 5 hours          6379/tcp                 composetest_redis_1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">[root@VM_0_17_centos ~]# curl http://localhost:5000</span><br><span class="line">Hello World! I have been seen 5 times.</span><br></pre></td></tr></table></figure><p>流程:</p><ol><li>创建网络 composetest_default</li><li>执行 docker compose</li><li>启动服务</li></ol><p>Creating composetest_web_1<br>Creating  composetest_redis_1</p><p>默认规则:</p><ol><li>镜像规则</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">composetest_web     latest              b9572fc8e072        5 hours ago         84.3MB</span><br><span class="line">redis               alpine              c7b388ce3d39        3 days ago          32.1MB</span><br><span class="line">python              3.7-alpine          6ca3e0b1ab69        3 weeks ago         73.1MB</span><br></pre></td></tr></table></figure><p>默认服务名： 所在文件夹名称_服务名 _ 副本数</p><ol start="2"><li>网络规则</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# </span><br><span class="line">[root@VM_0_17_centos ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                      DRIVER              SCOPE</span><br><span class="line">ee93f5e1a56a        bridge                    bridge              local</span><br><span class="line">77c8ce44ec30        composetest_default       bridge              local</span><br><span class="line">[root@VM_0_17_centos ~]# docker network inspect composetest_default</span><br><span class="line">   &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;246e0bbfb14694df95d5758426189379b9899e2aff872083419e977c4e8b3a1e&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;composetest_redis_1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;9f1663219fc3c090ac14c46ee4a039b6ef4f0c7183979ccf17027831bc74fb69&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:15:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.21.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;2cc141f57f6a9699c1590a3a0523f29798f8b319f5ea1fde169740df73c37c5c&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;composetest_web_1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;15ee1029b5bbf56d2822be20f54e26bd25216a191051307cb0ce68c6b4b1dd53&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:15:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.21.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>项目中的容器都在同一个网络下，可以直接使用服务名访问</p><p>停止: docker-compose down</p><p>后台运行: docker-compose up -d</p><p>重新构建: docker-compose up –build -d</p><h3 id="yaml-规则"><a href="#yaml-规则" class="headerlink" title="yaml 规则"></a>yaml 规则</h3><p>docker-compose.yml 核心配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span>  <span class="comment"># 版本</span></span><br><span class="line"><span class="attr">services:</span>  <span class="comment"># 服务</span></span><br><span class="line">  <span class="string">服务1:</span></span><br><span class="line">    <span class="attr">image:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">    <span class="attr">network:</span></span><br><span class="line">  <span class="string">服务2:</span></span><br><span class="line"><span class="comment"># 其他配置 网络/容器卷/config</span></span><br></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br></pre></td><td class="code"><pre><span class="line">Compose 文件格式有3个版本,分别为1, 2.x 和 3.x</span><br><span class="line"> 目前主流的为 3.x 其支持 docker 1.13.0 及其以上的版本</span><br><span class="line"> </span><br><span class="line">常用参数：</span><br><span class="line"> version:&quot;3&quot;         # 指定 compose 文件的版本</span><br><span class="line"> services              # 定义所有的 service 信息, services 下面的第一级别的 key 既是一个 service 的名称 </span><br><span class="line">  build               # 指定包含构建上下文的路径, 或作为一个对象，该对象具有 context 和指定的 dockerfile 文件以及 args 参数值</span><br><span class="line">   context: ./dir    # context: 指定 Dockerfile 文件所在的路径</span><br><span class="line">   dockerfile: Dockerfile-redis       # dockerfile: 指定 context 指定的目录下面的 Dockerfile 的名称(默认为 Dockerfile)</span><br><span class="line">   args            # args: Dockerfile 在 build 过程中需要的参数 (等同于 docker container build --build-arg 的作用)</span><br><span class="line">     buildno: 1</span><br><span class="line">   cache_from   # v3.2中新增的参数, 指定缓存的镜像列表 (等同于 docker container build --cache_from 的作用)</span><br><span class="line">   labels    # v3.3中新增的参数, 设置镜像的元数据 (等同于 docker container build --labels 的作用)</span><br><span class="line">   shm_size    # v3.5中新增的参数, 设置容器 /dev/shm 分区的大小 (等同于 docker container build --shm-size 的作用)</span><br><span class="line">  command: [build,exec,thin,-p,3000]         # 覆盖容器启动后默认执行的命令, 支持 shell 格式和 [] 格式</span><br><span class="line">  configs    # 不知道怎么用</span><br><span class="line">  cgroup_parent   # 不知道怎么用</span><br><span class="line">  container_name  # 指定容器的名称 (等同于 docker run --name 的作用)</span><br><span class="line">  credential_spec  # 不知道怎么用</span><br><span class="line">  deploy    # v3 版本以上, 指定与部署和运行服务相关的配置, deploy 部分是 docker stack 使用的, docker stack 依赖 docker swarm</span><br><span class="line">   endpoint_mode   # v3.3 版本中新增的功能, 指定服务暴露的方式</span><br><span class="line">    vip     # Docker 为该服务分配了一个虚拟 IP(VIP), 作为客户端的访问服务的地址</span><br><span class="line">    dnsrr     # DNS轮询, Docker 为该服务设置 DNS 条目, 使得服务名称的 DNS 查询返回一个 IP 地址列表, 客户端直接访问其中的一个地址</span><br><span class="line">   labels    # 指定服务的标签，这些标签仅在服务上设置</span><br><span class="line">   mode     # 指定 deploy 的模式</span><br><span class="line">    global    # 每个集群节点都只有一个容器</span><br><span class="line">    replicated   # 用户可以指定集群中容器的数量(默认)</span><br><span class="line">   placement    # 不知道怎么用</span><br><span class="line">   replicas    # deploy 的 mode 为 replicated 时, 指定容器副本的数量</span><br><span class="line">   resources    # 资源限制</span><br><span class="line">    limits    # 设置容器的资源限制</span><br><span class="line">     cpus: &quot;0.5&quot;   # 设置该容器最多只能使用 50% 的 CPU </span><br><span class="line">     memory: 50M   # 设置该容器最多只能使用 50M 的内存空间 </span><br><span class="line">    reservations   # 设置为容器预留的系统资源(随时可用)</span><br><span class="line">     cpus: &quot;0.2&quot;   # 为该容器保留 20% 的 CPU</span><br><span class="line">     memory: 20M   # 为该容器保留 20M 的内存空间</span><br><span class="line">   restart_policy  # 定义容器重启策略, 用于代替 restart 参数</span><br><span class="line">    condition    # 定义容器重启策略(接受三个参数)</span><br><span class="line">     none     # 不尝试重启</span><br><span class="line">     on-failure   # 只有当容器内部应用程序出现问题才会重启</span><br><span class="line">     any     # 无论如何都会尝试重启(默认)</span><br><span class="line">    delay     # 尝试重启的间隔时间(默认为 0s)</span><br><span class="line">    max_attempts   # 尝试重启次数(默认一直尝试重启)</span><br><span class="line">    window    # 检查重启是否成功之前的等待时间(即如果容器启动了, 隔多少秒之后去检测容器是否正常, 默认 0s)</span><br><span class="line">   update_config   # 用于配置滚动更新配置</span><br><span class="line">    parallelism   # 一次性更新的容器数量</span><br><span class="line">    delay     # 更新一组容器之间的间隔时间</span><br><span class="line">    failure_action  # 定义更新失败的策略</span><br><span class="line">     continue    # 继续更新</span><br><span class="line">     rollback    # 回滚更新</span><br><span class="line">     pause     # 暂停更新(默认)</span><br><span class="line">    monitor    # 每次更新后的持续时间以监视更新是否失败(单位: ns|us|ms|s|m|h) (默认为0)</span><br><span class="line">    max_failure_ratio  # 回滚期间容忍的失败率(默认值为0)</span><br><span class="line">    order     # v3.4 版本中新增的参数, 回滚期间的操作顺序</span><br><span class="line">     stop-first   #旧任务在启动新任务之前停止(默认)</span><br><span class="line">     start-first   #首先启动新任务, 并且正在运行的任务暂时重叠</span><br><span class="line">   rollback_config  # v3.7 版本中新增的参数, 用于定义在 update_config 更新失败的回滚策略</span><br><span class="line">    parallelism   # 一次回滚的容器数, 如果设置为0, 则所有容器同时回滚</span><br><span class="line">    delay     # 每个组回滚之间的时间间隔(默认为0)</span><br><span class="line">    failure_action  # 定义回滚失败的策略</span><br><span class="line">     continue    # 继续回滚</span><br><span class="line">     pause     # 暂停回滚</span><br><span class="line">    monitor    # 每次回滚任务后的持续时间以监视失败(单位: ns|us|ms|s|m|h) (默认为0)</span><br><span class="line">    max_failure_ratio  # 回滚期间容忍的失败率(默认值0)</span><br><span class="line">    order     # 回滚期间的操作顺序</span><br><span class="line">     stop-first   # 旧任务在启动新任务之前停止(默认)</span><br><span class="line">     start-first   # 首先启动新任务, 并且正在运行的任务暂时重叠</span><br><span class="line">   注意：</span><br><span class="line">    支持 docker-compose up 和 docker-compose run 但不支持 docker stack deploy 的子选项</span><br><span class="line">    security_opt container_name devices tmpfs stop_signal links cgroup_parent</span><br><span class="line">    network_mode external_links restart build userns_mode sysctls</span><br><span class="line">  devices    # 指定设备映射列表 (等同于 docker run --device 的作用)</span><br><span class="line">  depends_on   # 定义容器启动顺序 (此选项解决了容器之间的依赖关系， 此选项在 v3 版本中 使用 swarm 部署时将忽略该选项)</span><br><span class="line">   示例：</span><br><span class="line">    docker-compose up 以依赖顺序启动服务，下面例子中 redis 和 db 服务在 web 启动前启动</span><br><span class="line">    默认情况下使用 docker-compose up web 这样的方式启动 web 服务时，也会启动 redis 和 db 两个服务，因为在配置文件中定义了依赖关系</span><br><span class="line">    version: &#x27;3&#x27;</span><br><span class="line">    services:</span><br><span class="line">     web:</span><br><span class="line">      build: .</span><br><span class="line">      depends_on:</span><br><span class="line">       - db  </span><br><span class="line">       - redis </span><br><span class="line">     redis:</span><br><span class="line">      image: redis</span><br><span class="line">     db:</span><br><span class="line">      image: postgres       </span><br><span class="line">  dns     # 设置 DNS 地址(等同于 docker run --dns 的作用)</span><br><span class="line">  dns_search   # 设置 DNS 搜索域(等同于 docker run --dns-search 的作用)</span><br><span class="line">  tmpfs     # v2 版本以上, 挂载目录到容器中, 作为容器的临时文件系统(等同于 docker run --tmpfs 的作用, 在使用 swarm 部署时将忽略该选项)</span><br><span class="line">  entrypoint   # 覆盖容器的默认 entrypoint 指令 (等同于 docker run --entrypoint 的作用)</span><br><span class="line">  env_file: .env    # 从指定文件中读取变量设置为容器中的环境变量, 可以是单个值或者一个文件列表, 如果多个文件中的变量重名则后面的变量覆盖前面的变量, environment 的值覆盖 env_file 的值</span><br><span class="line">  env_file:</span><br><span class="line">    - ./common.env</span><br><span class="line">    - ./web.env</span><br><span class="line">   env文件格式：</span><br><span class="line">    # common.env</span><br><span class="line">    RACK_ENV=development</span><br><span class="line">  environment   # 设置环境变量， environment 的值可以覆盖 env_file 的值 (等同于 docker run --env 的作用)</span><br><span class="line">    - RACK_ENV=development</span><br><span class="line">  expose    # 暴露端口, 但是不能和宿主机建立映射关系, 类似于 Dockerfile 的 EXPOSE 指令</span><br><span class="line">  external_links  # 连接不在 docker-compose.yml 中定义的容器或者不在 compose 管理的容器(docker run 启动的容器, 在 v3 版本中使用 swarm 部署时将忽略该选项)</span><br><span class="line">    - redis1</span><br><span class="line">  extra_hosts   # 添加 host 记录到容器中的 /etc/hosts 中 (等同于 docker run --add-host 的作用)</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">########################################################################################</span></span></span><br><span class="line">  extra_hosts:</span><br><span class="line">   - &quot;somehost:162.242.195.82&quot;</span><br><span class="line">   - &quot;otherhost:50.31.209.229&quot;</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash"><span class="comment">###########################################################################################</span></span></span><br><span class="line">  healthcheck   # v2.1 以上版本, 定义容器健康状态检查, 类似于 Dockerfile 的 HEALTHCHECK 指令</span><br><span class="line">   test     # 检查容器检查状态的命令, 该选项必须是一个字符串或者列表, 第一项必须是 NONE, CMD 或 CMD-SHELL, 如果其是一个字符串则相当于 CMD-SHELL 加该字符串</span><br><span class="line">    NONE     # 禁用容器的健康状态检测</span><br><span class="line">    CMD     # test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost&quot;]</span><br><span class="line">    CMD-SHELL    # test: [&quot;CMD-SHELL&quot;, &quot;curl -f http://localhost || exit 1&quot;] 或者　test: curl -f https://localhost || exit 1</span><br><span class="line">   interval: 1m30s  # 每次检查之间的间隔时间</span><br><span class="line">   timeout: 10s   # 运行命令的超时时间</span><br><span class="line">   retries: 3   # 重试次数</span><br><span class="line">   start_period: 40s  # v3.4 以上新增的选项, 定义容器启动时间间隔</span><br><span class="line">   disable: true   # true 或 false, 表示是否禁用健康状态检测和　test: NONE 相同</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_">   #</span><span class="language-bash"><span class="comment">###########################################################################</span></span></span><br><span class="line">   healthcheck:</span><br><span class="line">     test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost&quot;] # 设置检测程序</span><br><span class="line">     interval: 1m30s # 设置检测间隔</span><br><span class="line">     timeout: 10s # 设置检测超时时间</span><br><span class="line">     retries: 3 # 设置重试次数</span><br><span class="line">     start_period: 40s # 启动后，多少秒开始启动检测程序</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">##############################################################################</span></span></span><br><span class="line"></span><br><span class="line">  image     # 指定 docker 镜像, 可以是远程仓库镜像、本地镜像</span><br><span class="line">  init     # v3.7 中新增的参数, true 或 false 表示是否在容器中运行一个 init, 它接收信号并传递给进程</span><br><span class="line">  isolation    # 隔离容器技术, 在 Linux 中仅支持 default 值</span><br><span class="line">  labels    # 使用 Docker 标签将元数据添加到容器, 与 Dockerfile 中的 LABELS 类似</span><br><span class="line">  links:   # 链接到其它服务中的容器, 该选项是 docker 历史遗留的选项, 目前已被用户自定义网络名称空间取代, 最终有可能被废弃 (在使用 swarm 部署时将忽略该选项)</span><br><span class="line">    - db</span><br><span class="line">    - redis</span><br><span class="line">  logging    # 设置容器日志服务</span><br><span class="line">   driver    # 指定日志记录驱动程序, 默认 json-file (等同于 docker run --log-driver 的作用)  </span><br><span class="line">   options    # 指定日志的相关参数 (等同于 docker run --log-opt 的作用)</span><br><span class="line">    max-size    # 设置单个日志文件的大小, 当到达这个值后会进行日志滚动操作</span><br><span class="line">    max-file    # 日志文件保留的数量</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#############################################################################</span></span></span><br><span class="line">  logging:</span><br><span class="line">  driver: json-file</span><br><span class="line">  options:</span><br><span class="line">    max-size: &quot;200k&quot; # 单个文件大小为200k</span><br><span class="line">    max-file: &quot;10&quot; # 最多10个文件  当达到文件限制上限，会自动删除旧得文件。</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">syslog 驱动程序下，可以使用 syslog-address 指定日志接收地址。</span> </span><br><span class="line">  logging:</span><br><span class="line">  driver: syslog</span><br><span class="line">  options:</span><br><span class="line">    syslog-address: &quot;tcp://192.168.0.42:123&quot;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#############################################################################</span></span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  network_mode   # 指定网络模式 (等同于 docker run --net 的作用, 在使用 swarm 部署时将忽略该选项)  </span><br><span class="line"> </span><br><span class="line">  networks    # 将容器加入指定网络 (等同于 docker network connect 的作用), networks 可以位于 compose 文件顶级键和 services 键的二级键</span><br><span class="line">   aliases    # 同一网络上的容器可以使用服务名称或别名连接到其中一个服务的容器</span><br><span class="line">   ipv4_address  # IP V4 格式</span><br><span class="line">   ipv6_address  # IP V6 格式</span><br><span class="line"> </span><br><span class="line">   示例:</span><br><span class="line">    version: &#x27;3.7&#x27;</span><br><span class="line">    services: </span><br><span class="line">     test: </span><br><span class="line">      image: nginx:1.14-alpine</span><br><span class="line">      container_name: mynginx</span><br><span class="line">      command: ifconfig</span><br><span class="line">      networks: </span><br><span class="line">       app_net:        # 调用下面 networks 定义的 app_net 网络</span><br><span class="line">       ipv4_address: 172.16.238.10</span><br><span class="line">    networks:</span><br><span class="line">     app_net:</span><br><span class="line">      driver: bridge</span><br><span class="line">      ipam:</span><br><span class="line">       driver: default</span><br><span class="line">       config:</span><br><span class="line">        - subnet: 172.16.238.0/24</span><br><span class="line"> </span><br><span class="line">  pid: &#x27;host&#x27;   # 共享宿主机的 进程空间(PID)</span><br><span class="line"> </span><br><span class="line">  ports     # 建立宿主机和容器之间的端口映射关系, ports 支持两种语法格式</span><br><span class="line">   SHORT 语法格式示例:</span><br><span class="line">    - &quot;3000&quot;       # 暴露容器的 3000 端口, 宿主机的端口由 docker 随机映射一个没有被占用的端口</span><br><span class="line">    - &quot;3000-3005&quot;      # 暴露容器的 3000 到 3005 端口, 宿主机的端口由 docker 随机映射没有被占用的端口</span><br><span class="line">    - &quot;8000:8000&quot;      # 容器的 8000 端口和宿主机的 8000 端口建立映射关系</span><br><span class="line">    - &quot;9090-9091:8080-8081&quot;</span><br><span class="line">    - &quot;127.0.0.1:8001:8001&quot;    # 指定映射宿主机的指定地址的</span><br><span class="line">    - &quot;127.0.0.1:5000-5010:5000-5010&quot; </span><br><span class="line">    - &quot;6060:6060/udp&quot;     # 指定协议</span><br><span class="line"> </span><br><span class="line">   LONG 语法格式示例:(v3.2 新增的语法格式)</span><br><span class="line">    ports:</span><br><span class="line">     - target: 80     # 容器端口</span><br><span class="line">      published: 8080    # 宿主机端口</span><br><span class="line">      protocol: tcp     # 协议类型</span><br><span class="line">      mode: host     # host 在每个节点上发布主机端口, ingress 对于群模式端口进行负载均衡</span><br><span class="line"> </span><br><span class="line">  secrets    # 不知道怎么用</span><br><span class="line"> </span><br><span class="line">  security_opt   # 为每个容器覆盖默认的标签 (在使用 swarm 部署时将忽略该选项)</span><br><span class="line"> </span><br><span class="line">  stop_grace_period  # 指定在发送了 SIGTERM 信号之后, 容器等待多少秒之后退出(默认 10s)</span><br><span class="line"> </span><br><span class="line">  stop_signal   # 指定停止容器发送的信号 (默认为 SIGTERM 相当于 kill PID; SIGKILL 相当于 kill -9 PID; 在使用 swarm 部署时将忽略该选项)</span><br><span class="line"> </span><br><span class="line">  sysctls    # 设置容器中的内核参数 (在使用 swarm 部署时将忽略该选项)</span><br><span class="line"> </span><br><span class="line">  ulimits    # 设置容器的 limit</span><br><span class="line"> </span><br><span class="line">  userns_mode   # 如果Docker守护程序配置了用户名称空间, 则禁用此服务的用户名称空间 (在使用 swarm 部署时将忽略该选项)</span><br><span class="line"> </span><br><span class="line">  volumes    # 定义容器和宿主机的卷映射关系, 其和 networks 一样可以位于 services 键的二级键和 compose 顶级键, 如果需要跨服务间使用则在顶级键定义, 在 services 中引用</span><br><span class="line">   SHORT 语法格式示例:</span><br><span class="line">    volumes:</span><br><span class="line">     - /var/lib/mysql    # 映射容器内的 /var/lib/mysql 到宿主机的一个随机目录中</span><br><span class="line">     - /opt/data:/var/lib/mysql  # 映射容器内的 /var/lib/mysql 到宿主机的 /opt/data</span><br><span class="line">     - ./cache:/tmp/cache   # 映射容器内的 /var/lib/mysql 到宿主机 compose 文件所在的位置</span><br><span class="line">     - ~/configs:/etc/configs/:ro # 映射容器宿主机的目录到容器中去, 权限只读</span><br><span class="line">     - datavolume:/var/lib/mysql  # datavolume 为 volumes 顶级键定义的目录, 在此处直接调用</span><br><span class="line"> </span><br><span class="line">   LONG 语法格式示例:(v3.2 新增的语法格式)</span><br><span class="line">    version: &quot;3.2&quot;</span><br><span class="line">    services:</span><br><span class="line">     web:</span><br><span class="line">      image: nginx:alpine</span><br><span class="line">      ports:</span><br><span class="line">       - &quot;80:80&quot;</span><br><span class="line">      volumes:</span><br><span class="line">       - type: volume     # mount 的类型, 必须是 bind、volume 或 tmpfs</span><br><span class="line">        source: mydata    # 宿主机目录</span><br><span class="line">        target: /data    # 容器目录</span><br><span class="line">        volume:      # 配置额外的选项, 其 key 必须和 type 的值相同</span><br><span class="line">         nocopy: true    # volume 额外的选项, 在创建卷时禁用从容器复制数据</span><br><span class="line">       - type: bind     # volume 模式只指定容器路径即可, 宿主机路径随机生成; bind 需要指定容器和数据机的映射路径</span><br><span class="line">        source: ./static</span><br><span class="line">        target: /opt/app/static</span><br><span class="line">        read_only: true    # 设置文件系统为只读文件系统</span><br><span class="line">    volumes:</span><br><span class="line">     mydata:         # 定义在 volume, 可在所有服务中调用</span><br><span class="line"> </span><br><span class="line">  restart    # 定义容器重启策略(在使用 swarm 部署时将忽略该选项, 在 swarm 使用 restart_policy 代替 restart)</span><br><span class="line">   no     # 禁止自动重启容器(默认)</span><br><span class="line">   always    # 无论如何容器都会重启</span><br><span class="line">   on-failure   # 当出现 on-failure 报错时, 容器重新启动</span><br><span class="line"> </span><br><span class="line">  其他选项：</span><br><span class="line">   domainname, hostname, ipc, mac_address, privileged, read_only, shm_size, stdin_open, tty, user, working_dir</span><br><span class="line">   上面这些选项都只接受单个值和 docker run 的对应参数类似</span><br><span class="line"> </span><br><span class="line">  对于值为时间的可接受的值：</span><br><span class="line">   2.5s</span><br><span class="line">   10s</span><br><span class="line">   1m30s</span><br><span class="line">   2h32m</span><br><span class="line">   5h34m56s</span><br><span class="line">   时间单位: us, ms, s, m， h</span><br><span class="line">  对于值为大小的可接受的值：</span><br><span class="line">   2b</span><br><span class="line">   1024kb</span><br><span class="line">   2048k</span><br><span class="line">   300m</span><br><span class="line">   1gb</span><br><span class="line">   单位: b, k, m, g 或者 kb, mb, gb</span><br><span class="line"> networks   # 定义 networks 信息</span><br><span class="line">  driver    # 指定网络模式, 大多数情况下, 它 bridge 于单个主机和 overlay Swarm 上</span><br><span class="line">   bridge    # Docker 默认使用 bridge 连接单个主机上的网络</span><br><span class="line">   overlay    # overlay 驱动程序创建一个跨多个节点命名的网络</span><br><span class="line">   host     # 共享主机网络名称空间(等同于 docker run --net=host)</span><br><span class="line">   none     # 等同于 docker run --net=none</span><br><span class="line">  driver_opts   # v3.2以上版本, 传递给驱动程序的参数, 这些参数取决于驱动程序</span><br><span class="line">  attachable   # driver 为 overlay 时使用, 如果设置为 true 则除了服务之外，独立容器也可以附加到该网络; 如果独立容器连接到该网络，则它可以与其他 Docker 守护进程连接到的该网络的服务和独立容器进行通信</span><br><span class="line">  ipam     # 自定义 IPAM 配置. 这是一个具有多个属性的对象, 每个属性都是可选的</span><br><span class="line">   driver    # IPAM 驱动程序, bridge 或者 default</span><br><span class="line">   config    # 配置项</span><br><span class="line">    subnet    # CIDR格式的子网，表示该网络的网段</span><br><span class="line">  external    # 外部网络, 如果设置为 true 则 docker-compose up 不会尝试创建它, 如果它不存在则引发错误</span><br><span class="line">  name     # v3.5 以上版本, 为此网络设置名称</span><br><span class="line">文件格式示例：</span><br><span class="line"> version: &quot;3&quot;</span><br><span class="line"> services:</span><br><span class="line">  redis:</span><br><span class="line">  image: redis:alpine</span><br><span class="line">  ports:</span><br><span class="line">   - &quot;6379&quot;</span><br><span class="line">  networks:</span><br><span class="line">   - frontend</span><br><span class="line">  deploy:</span><br><span class="line">   replicas: 2</span><br><span class="line">   update_config:</span><br><span class="line">   parallelism: 2</span><br><span class="line">   delay: 10s</span><br><span class="line">   restart_policy:</span><br><span class="line">   condition: on-failure</span><br><span class="line">  db:</span><br><span class="line">  image: postgres:9.4</span><br><span class="line">  volumes:</span><br><span class="line">   - db-data:/var/lib/postgresql/data</span><br><span class="line">  networks:</span><br><span class="line">   - backend</span><br><span class="line">  deploy:</span><br><span class="line">   placement:</span><br><span class="line">   constraints: [node.role == manager]</span><br></pre></td></tr></table></figure><p> depends_on参数可以确保eureka容器启动后再启动service容器，但我们真正想要的，是eureka容器启动后，并且eureka服务初始化完毕进入可用状态后，再启动service容器，显然depends_on参数达不到我们的要求；</p><p><strong>临时解决方法</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2.4&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="attr">db:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">      <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_started</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">&quot;exit 0&quot;</span></span><br></pre></td></tr></table></figure><p>在docker-compose的第三版语法中，取消了condition参数！</p><p><strong>针对上述问题，docker给出的解决办法是使用wait-for-it.sh脚本来解决问题</strong></p><ul><li>wait-for-it.sh脚本用来访问指定的地址和端口，如果收不到响应就等待一段时间再去重试，直到收到响应后，再去做前面指定好的命令，如上图红框所示./wait-for-it.sh db:5432 – python app.py的意思是：等到db:5432这个远程访问能够响应的时候，就去执行python app.py命令</li><li>wait-for-it.sh文件的链接：<br><a href="https://raw.githubusercontent.com/zq2599/blog_demos/master/wait-for-it-demo/docker/wait-for-it.sh">https://raw.githubusercontent.com/zq2599/blog_demos/master/wait-for-it-demo/docker/wait-for-it.sh</a></li></ul><p><code>eureka pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bolingcavalry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>eureka<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bolingcavalry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wait-for-it-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用jib插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.cloud.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jib-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--from节点用来设置镜像的基础镜像，相当于Docerkfile中的FROM关键字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用openjdk官方镜像，tag是8-jdk-stretch，表示镜像的操作系统是debian9,装好了jdk8--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span>openjdk:8-jdk-stretch<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--镜像名称和tag，使用了mvn内置变量$&#123;project.version&#125;，表示当前工程的version--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span>bolingcavalry/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--容器相关的属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">container</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jvm内存参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jvmFlags</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jvmFlag</span>&gt;</span>-Xms1g<span class="tag">&lt;/<span class="name">jvmFlag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jvmFlag</span>&gt;</span>-Xmx1g<span class="tag">&lt;/<span class="name">jvmFlag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jvmFlags</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--要暴露的端口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ports</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ports</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">useCurrentTimestamp</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useCurrentTimestamp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>dockerBuild<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述pom.xml中多了个jib插件，这样在执行mvn compile的时候，插件就会用构建结果制作好docker镜像并放入本地仓库；</p><p><code>service application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka:8080/eureka/</span></span><br></pre></td></tr></table></figure><p><code>Dockerfile</code></p><p>需要提前下载 wait-for-it.sh  <code>wget https://raw.githubusercontent.com/zq2599/blog_demos/master/wait-for-it-demo/docker/wait-for-it.sh</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-stretch</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> wait-for-it.sh /wait-for-it.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sh -c <span class="string">&#x27;chmod 777 /wait-for-it.sh&#x27;</span></span></span><br></pre></td></tr></table></figure><p>构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t bolingcavalry/jkd8-wait-for-it:0.0.2 .</span><br></pre></td></tr></table></figure><p>修改service pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.cloud.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jib-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--from节点用来设置镜像的基础镜像，相当于Docerkfile中的FROM关键字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用自制的基础镜像，里面有wait-for-it.sh脚本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span>bolingcavalry/jkd8-wait-for-it:0.0.2<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--镜像名称和tag，使用了mvn内置变量$&#123;project.version&#125;，表示当前工程的version--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span>bolingcavalry/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--容器相关的属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">container</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--entrypoint的值等于INHERIT表示jib插件不构建启动命令了，此时要使用者自己控制，可以在启动时输入，或者写在基础镜像中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entrypoint</span>&gt;</span>INHERIT<span class="tag">&lt;/<span class="name">entrypoint</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--要暴露的端口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ports</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ports</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">useCurrentTimestamp</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useCurrentTimestamp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>dockerBuild<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a. 基础镜像改为刚刚构建好的bolingcavalry/jkd8-wait-for-it:0.0.2<br>b. 增加entrypoint节点，内容是INHERIT，按照官方的说法，entrypoint的值等于INHERIT表示jib插件不构建启动命令了，此时要使用者自己控制，可以在启动时输入，或者写在基础镜像中，这样我们在docker-compose.yml中用command参数来设置service容器的启动命令，就可以把wait-for-it.sh脚本用上了<br>c. 去掉jvmFlags节点，按照官方文档的说法，entrypoint节点的值等于INHERIT时，jvmFlags和mainClass参数会被忽略，如下图，地址是：<a href="https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin">https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> <span class="attr">eureka:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">bolingcavalry/eureka:0.0.1-SNAPSHOT</span></span><br><span class="line">   <span class="attr">container_name:</span> <span class="string">eureka</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"> <span class="attr">service:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">bolingcavalry/service:0.0.1-SNAPSHOT</span></span><br><span class="line">   <span class="attr">container_name:</span> <span class="string">service</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">   <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">&#x27;./wait-for-it.sh eureka:8080 -t 0  -- java -Xms1g -Xmx1g -cp /app/resources:/app/classes:/app/libs/* com.bolingcavalry.waitforitdemo.ServiceApplication&#x27;</span></span><br><span class="line">   <span class="attr">depends_on:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">eureka</span></span><br></pre></td></tr></table></figure><p>注意command参数的内容，如下，service容器创建后，会一直等待eureka:8080的响应，直到该地址有响应后，才会执行命令java -Xms1g -Xmx1g -cp /app/resources:/app/classes:/app/libs/* com.bolingcavalry.waitforitdemo.ServiceApplication</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &#x27;./wait-for-it.sh eureka:8080 -t 0  -- java -Xms1g -Xmx1g -cp /app/resources:/app/classes:/app/libs/* com.bolingcavalry.waitforitdemo.ServiceApplication&#x27;</span><br></pre></td></tr></table></figure><p>对于命令java -Xms1g -Xmx1g -cp /app/resources:/app/classes:/app/libs/* com.bolingcavalry.waitforitdemo.ServiceApplication，您可能觉得太长了不好写，这里有个小窍门，就是在不使用entrypoint节点的时候，用jib插件制作的镜像本身是带有启动命令的，容器运行的时候，您可以通过docker ps –no-trunc命令看到该容器的完整启动命令，复制过来直接用就行了；</p><p>使用docker官方推荐的wait-for-it.sh来控制容器启动顺序，虽然已满足了我们的需求，但依旧留不是完美方案,目前看来，控制容器启动顺序最好的解决方案并非wait-for-it.sh，而是业务自己实现容错，例如service注册eureka失败后会自动重试</p><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos docker]# mkdir my_wordpress</span><br><span class="line">[root@VM_0_17_centos docker]# cd my_wordpress/</span><br><span class="line">[root@VM_0_17_centos my_wordpress]# cat docker-compose.yml </span><br><span class="line">version: &#x27;3.3&#x27;</span><br><span class="line">services:</span><br><span class="line">   db:</span><br><span class="line">     image: mysql:5.7</span><br><span class="line">     volumes:</span><br><span class="line">       - db_data:/var/lib/mysql</span><br><span class="line">     restart: always</span><br><span class="line">     environment:</span><br><span class="line">       MYSQL_ROOT_PASSWORD: somewordpress</span><br><span class="line">       MYSQL_DATABASE: wordpress</span><br><span class="line">       MYSQL_USER: wordpress</span><br><span class="line">       MYSQL_PASSWORD: wordpress</span><br><span class="line">   wordpress:</span><br><span class="line">     depends_on:</span><br><span class="line">       - db</span><br><span class="line">     image: wordpress:latest</span><br><span class="line">     ports:</span><br><span class="line">       - &quot;8000:80&quot;</span><br><span class="line">     restart: always</span><br><span class="line">     environment:</span><br><span class="line">       WORDPRESS_DB_HOST: db:3306</span><br><span class="line">       WORDPRESS_DB_USER: wordpress</span><br><span class="line">       WORDPRESS_DB_PASSWORD: wordpress</span><br><span class="line">       WORDPRESS_DB_NAME: wordpress</span><br><span class="line">volumes:</span><br><span class="line">    db_data: &#123;&#125;</span><br><span class="line">[root@VM_0_17_centos my_wordpress]# docker-compose up -d</span><br></pre></td></tr></table></figure><p>访问: <a href="http://ip:8000/">http://ip:8000/</a></p><h3 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.4&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">koel:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nairvish/docker-koel</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;koel_base&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">database</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3006</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">DB_CONNECTION:</span> <span class="string">mysql</span></span><br><span class="line">      <span class="attr">DB_HOST:</span> <span class="string">database</span></span><br><span class="line">      <span class="attr">DB_USERNAME:</span> <span class="string">koel</span></span><br><span class="line">      <span class="attr">DB_PASSWORD:</span> <span class="string">koel</span></span><br><span class="line">      <span class="attr">DB_DATABASE:</span> <span class="string">koel</span></span><br><span class="line">      <span class="attr">IGNORE_DOT_FILES:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">APP_ENV:</span> <span class="string">production</span></span><br><span class="line">      <span class="attr">APP_DEBUG:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">APP_URL:</span> <span class="string">https://koel.domain.tld</span></span><br><span class="line">      <span class="attr">APP_MAX_SCAN_TIME:</span> <span class="number">600</span></span><br><span class="line">      <span class="attr">MEMORY_LIMIT:</span> <span class="number">2048</span></span><br><span class="line">      <span class="attr">STREAMING_METHOD:</span> <span class="string">php</span></span><br><span class="line">      <span class="attr">FFMPEG_PATH:</span> <span class="string">/usr/local/bin/ffmpeg</span></span><br><span class="line">      <span class="attr">OUTPUT_BIT_RATE:</span> <span class="number">256</span></span><br><span class="line">      <span class="attr">ALLOW_DOWNLOAD:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">CACHE_MEDIA:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">APP_LOG_LEVEL:</span> <span class="string">debug</span></span><br><span class="line">      <span class="attr">BROADCAST_DRIVER:</span> <span class="string">log</span></span><br><span class="line">      <span class="attr">CACHE_DRIVER:</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">SESSION_DRIVER:</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">QUEUE_DRIVER:</span> <span class="string">sync</span></span><br><span class="line">      <span class="attr">MAIL_DRIVER:</span> <span class="string">smtp</span></span><br><span class="line">      <span class="attr">MAIL_HOST:</span> <span class="string">smtp.mailserver.tld</span></span><br><span class="line">      <span class="attr">MAIL_PORT:</span> <span class="number">465</span></span><br><span class="line">      <span class="attr">MAIL_USERNAME:</span> <span class="string">koel@mailserver.tld</span></span><br><span class="line">      <span class="attr">MAIL_PASSWORD:</span> <span class="string">password</span></span><br><span class="line">      <span class="attr">MAIL_ENCRYPTION:</span> <span class="string">tls</span></span><br><span class="line">      <span class="comment">## LAST.FM config ##</span></span><br><span class="line">      <span class="comment"># LASTFM_API_KEY=</span></span><br><span class="line">      <span class="comment"># LASTFM_API_SECRET=</span></span><br><span class="line">      <span class="comment">## YOUTUBE config ##</span></span><br><span class="line">      <span class="comment"># YOUTUBE_API_KEY=</span></span><br><span class="line">      <span class="comment">## PUSHER config ##</span></span><br><span class="line">      <span class="comment"># PUSHER_APP_ID=</span></span><br><span class="line">      <span class="comment"># PUSHER_APP_KEY=</span></span><br><span class="line">      <span class="comment"># PUSHER_APP_SECRET=</span></span><br><span class="line">      <span class="comment"># PUSHER_APP_CLUSTER=</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/music:/music</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/music/covers:/var/www/html/public/img/covers</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">database:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql/mysql-server:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;koel_mysql&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">password</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">koel</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">koel</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">koel</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">music:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">covers:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure><p>nginx 反向代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> location / &#123;</span><br><span class="line">   proxy_pass https://127.0.0.1:3006;</span><br><span class="line"> # 如果是本机直接复制就行，如果是别的机器，记得换成你的ip地址</span><br><span class="line">   proxy_set_header X-Forwarded-Host $server_name;</span><br><span class="line">   proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">   proxy_set_header   Host $host;</span><br><span class="line">   proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">   proxy_set_header X-Forwarded-Proto https;</span><br><span class="line"></span><br><span class="line">   # Not sure if these next two lines are needed. I did not remove them as</span><br><span class="line">   # I did not want risk breaking my working configuration. Just remember</span><br><span class="line">   # to replace &quot;koel.domain.tld&quot; with your instance&#x27;s domain.</span><br><span class="line">   sub_filter &quot;http://koel.domain.tld&quot; &quot;https://koel.domain.tld&quot;;</span><br><span class="line">   sub_filter_once off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>去后台安全组或者防火墙打开相应端口，我们这边是<code>3006</code></p><p>初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it koel_base php artisan koel:init</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器访问：https://你的域名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">传音乐到/opt/music文件夹下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登陆之后，填上/music，点击扫描，</span></span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">命令说明</span><br><span class="line">build构建项目中的服务容器</span><br><span class="line">docker-compose build 镜像名称</span><br><span class="line">help获得一个命令的帮助</span><br><span class="line">kill通过发送SIGKILL信号来强制停止服务容器</span><br><span class="line">config验证和查看compose文件配置</span><br><span class="line">create为服务创建容器。只是单纯的create，还需要使用start启动compose</span><br><span class="line">down停止并删除容器，网络，镜像和数据卷</span><br><span class="line">exec在运行的容器中执行一个命令</span><br><span class="line">logs查看服务容器的输出</span><br><span class="line">pause暂停一个服务容器</span><br><span class="line">port打印某个容器端口所映射的公共端口</span><br><span class="line">ps列出项目中目前的所有容器</span><br><span class="line">pull拉取服务依赖的镜像</span><br><span class="line">push推送服务镜像</span><br><span class="line">restart重启项目中的服务</span><br><span class="line">rm删除所有（停止状态的）服务容器</span><br><span class="line">run在指定服务上执行一个命令</span><br><span class="line">scale设置指定服务运行的容器个数</span><br><span class="line">start启动已经存在的服务容器</span><br><span class="line">stop停止已经处于运行状态的容器，但不删除它</span><br><span class="line">top显示运行的进程</span><br><span class="line">unpause恢复处于暂停状态中的服务</span><br><span class="line">up自动完成包括构建镜像、创建服务、启动服务并关闭关联服务相关容器的一些列操作</span><br></pre></td></tr></table></figure><h2 id="常用软件部署"><a href="#常用软件部署" class="headerlink" title="常用软件部署"></a>常用软件部署</h2><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><ul><li>compose-mysql.yml</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker network create mysql_bridge</span></span><br><span class="line">networks:</span><br><span class="line">  mysql_bridge:</span><br><span class="line">    driver: bridge</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">   mysql-server:</span><br><span class="line">     image: docker.io/mysql:5.7</span><br><span class="line">     container_name: mysql-server</span><br><span class="line">     restart: always</span><br><span class="line">     environment:</span><br><span class="line">       # 指定root密码。不指定则会启动失败</span><br><span class="line">       - MYSQL_ROOT_PASSWORD:123456</span><br><span class="line">     volumes:</span><br><span class="line">       # 同步本地时间</span><br><span class="line">       - /etc/localtime:/etc/localtime:ro</span><br><span class="line">       # 初始化执行的sql</span><br><span class="line">       # - ./init:/docker-entrypoint-initdb.d/</span><br><span class="line">       # db配置</span><br><span class="line">       - ./conf/my.cnf:/etc/my.cnf</span><br><span class="line">       # db文件存放地址</span><br><span class="line">       - ./db_data:/var/lib/mysql</span><br><span class="line">     ports:</span><br><span class="line">       - 3306:3306</span><br><span class="line">     networks:</span><br><span class="line">       - mysql_bridge</span><br></pre></td></tr></table></figure><ul><li>start-mysql.sh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /usr/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义一个名称变量</span></span><br><span class="line">network_name=&quot;mysql_bridge&quot;</span><br><span class="line"></span><br><span class="line">filterName=`docker network ls | grep $network_name | awk &#x27;&#123; print $2 &#125;&#x27;`</span><br><span class="line"></span><br><span class="line">if [ &quot;$filterName&quot; == &quot;&quot; ]; then</span><br><span class="line">    # 不存在就创建</span><br><span class="line">    docker network create $network_name</span><br><span class="line">    echo &quot;Created network $network_name success!!&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">docker-compose -f ./compose-mysql.yaml up -d</span><br><span class="line">docker ps -a</span><br><span class="line">docker logs -f mysql-server</span><br></pre></td></tr></table></figure><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><ul><li>compose-redis.yml</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker network create redis_bridge</span></span><br><span class="line">networks:</span><br><span class="line">  redis_bridge:</span><br><span class="line">    driver: bridge</span><br><span class="line">    </span><br><span class="line">services:</span><br><span class="line">   redis-server:</span><br><span class="line">     image: docker.io/redis:latest</span><br><span class="line">     container_name: redis-server</span><br><span class="line">     restart: always</span><br><span class="line">     command: redis-server --requirepass &quot;123456&quot;</span><br><span class="line">     volumes:</span><br><span class="line">        - /etc/localtime:/etc/localtime:ro</span><br><span class="line">        - ./redis_data:/var/lib/redis</span><br><span class="line">     ports:</span><br><span class="line">       - 6379:6379</span><br><span class="line">     networks:</span><br><span class="line">       - redis_bridge</span><br></pre></td></tr></table></figure><ul><li>start-redis.sh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /usr/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义一个名称变量</span></span><br><span class="line">network_name=&quot;redis_bridge&quot;</span><br><span class="line"></span><br><span class="line">filterName=`docker network ls | grep $network_name | awk &#x27;&#123; print $2 &#125;&#x27;`</span><br><span class="line"></span><br><span class="line">if [ &quot;$filterName&quot; == &quot;&quot; ]; then</span><br><span class="line">    # 不存在就创建</span><br><span class="line">    docker network create $network_name</span><br><span class="line">    echo &quot;Created network $network_name success!!&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">docker-compose -f ./compose-redis.yaml up -d</span><br><span class="line">docker ps -a</span><br><span class="line">docker logs -f redis-server</span><br></pre></td></tr></table></figure><h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><ul><li>compose-rabbitmq.yml</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker network create rabbitmq_bridge</span></span><br><span class="line">networks:</span><br><span class="line">  rabbitmq_bridge:</span><br><span class="line">    driver: bridge</span><br><span class="line">    </span><br><span class="line">services:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    image: rabbitmq:management-alpine</span><br><span class="line">    container_name: rabbitmq-server</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime:ro</span><br><span class="line">      - ./data:/var/lib/rabbitmq</span><br><span class="line">    environment:</span><br><span class="line">      - RABBITMQ_DEFAULT_USER=ming</span><br><span class="line">      - RABBITMQ_DEFAULT_PASS=ming123456</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;15672:15672&quot;</span><br><span class="line">      - &quot;5672:5672&quot;</span><br><span class="line">    logging:</span><br><span class="line">      driver: &quot;json-file&quot;</span><br><span class="line">      options:</span><br><span class="line">        max-size: &quot;200k&quot;</span><br><span class="line">        max-file: &quot;10&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - rabbitmq_bridge</span><br></pre></td></tr></table></figure><ul><li>start-rabbitmq.sh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /usr/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义一个名称变量</span></span><br><span class="line">network_name=&quot;rabbitmq_bridge&quot;</span><br><span class="line"></span><br><span class="line">filterName=`docker network ls | grep $network_name | awk &#x27;&#123; print $2 &#125;&#x27;`</span><br><span class="line"></span><br><span class="line">if [ &quot;$filterName&quot; == &quot;&quot; ]; then</span><br><span class="line">    # 不存在就创建</span><br><span class="line">    docker network create $network_name</span><br><span class="line">    echo &quot;Created network $network_name success!!&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">docker-compose -f ./compose-rabbitmq.yaml up -d</span><br><span class="line">docker ps -a</span><br><span class="line">docker logs -f rabbitmq-server</span><br></pre></td></tr></table></figure><h3 id="influxdb"><a href="#influxdb" class="headerlink" title="influxdb"></a>influxdb</h3><ul><li>docker-compose.yml</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  influxdb:</span><br><span class="line">    image: influxdb:1.5-alpine</span><br><span class="line">    container_name: influxdb</span><br><span class="line">    ports:</span><br><span class="line">      - 8086:8086</span><br><span class="line">      - 8083:8083</span><br><span class="line">    restart: always</span><br><span class="line">    logging: </span><br><span class="line">      driver: &quot;json-file&quot;</span><br><span class="line">      options:</span><br><span class="line">        max-size: &quot;10m&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/var/lib/influxdb</span><br><span class="line">      - ./conf:/etc/influxdb</span><br><span class="line">    environment:</span><br><span class="line">      - INFLUXDB_ADMIN_ENABLED=true</span><br><span class="line">      - INFLUXDB_GRAPHITE_ENABLED=true #启动graphite功能  </span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it my_influxdb bash</span><br><span class="line">cd /usr/bin</span><br><span class="line">./influx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有用户</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">show <span class="built_in">users</span></span></span><br><span class="line">user admin</span><br><span class="line">---- -----</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">show databases</span> </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">create database XX</span>   </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">use XX</span>   </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">INSERT cpu,host=serverA,region=us_west value=0.64</span> </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">SELECT <span class="string">&quot;host&quot;</span>, <span class="string">&quot;region&quot;</span>, <span class="string">&quot;value&quot;</span> FROM <span class="string">&quot;cpu&quot;</span>*</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个root用户，设置密码为newpwd，主要不要使用双引号<span class="string">&quot; 括起来，不然会报错</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string">create user &quot;</span>root<span class="string">&quot; with password &#x27;newpwd&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 再次查看用户信息，发现admin为false，说明还要设置一下权限。</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string">show users</span></span></span><br><span class="line">user admin</span><br><span class="line">---- -----</span><br><span class="line">root false</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 删除root用户</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string">drop user root</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">&gt; show users</span></span></span><br><span class="line">user admin</span><br><span class="line">---- -----</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 重新设置root用户，并设置带上所有权限</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string">create user &quot;</span>root<span class="string">&quot; with password &#x27;newpwd&#x27; with all privileges</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 发现admin权限为true了，那么admin的用户就创建好了。</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string">show users</span></span></span><br><span class="line">user admin</span><br><span class="line">---- -----</span><br><span class="line">root true</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 默认情况下，influxdb的配置文件是禁用认证策略的，所以需要修改设置一下</span></span></span><br><span class="line">vim /etc/influxdb/influxdb.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">把 [http] 下的 auth-enabled 选项设置为 true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">配置完毕之后，重启influxdb服务即可，使用admin认证用户登陆访问一下</span></span></span><br><span class="line">influx -username &#x27;用户名&#x27; -password &#x27;密码&#x27;</span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><blockquote><p>自动web端</p></blockquote><p>官方自从 1.3 版本开始把 web 界面取消了，故退而求其次，在另一台服务器上安装 1.2（低版本）的 InfluxDB 作为客户端，连接 1.7 版本 InfluxDB 服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载</span></span><br><span class="line">wget https://dl.influxdata.com/influxdb/releases/influxdb-1.2.4.x86_64.rpm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装</span></span><br><span class="line">yum -y install influxdb-1.2.4.x86_64.rpm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置</span></span><br><span class="line">vim /etc/influxdb/influxdb.conf   </span><br><span class="line">[admin]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Determines whether the admin service is enabled.</span></span><br><span class="line">enabled = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The default <span class="built_in">bind</span> address used by the admin service.</span></span><br><span class="line">bind-address = &quot;:8083&quot; </span><br><span class="line">[http]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Determines whether HTTP endpoint is enabled.</span></span><br><span class="line">enabled = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The <span class="built_in">bind</span> address used by the HTTP service.</span></span><br><span class="line">bind-address = &quot;:8086&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打开防火墙</span></span><br><span class="line">firewall-cmd --list-all      //查看所有端口</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=8083/tcp    //放行8083</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=8086/tcp    //放行8086</span><br><span class="line">firewall-cmd --reload        //使规则生效</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动Influxdb</span></span><br><span class="line">systemctl start influxdb</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">访问</span></span><br><span class="line">浏览器输入：http://ip:8083</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">预览</span></span><br></pre></td></tr></table></figure><blockquote><p>InfluxDBStudio</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载地址：</span></span><br><span class="line">https://github.com/CymaticLabs/InfluxDBStudio/releases/download/v0.2.0-beta.1/InfluxDBStudio-0.2.0.zip</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改配置文件</span></span><br><span class="line">vim /etc/influxdb/influxdb.conf    </span><br><span class="line">[http]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Determines whether HTTP endpoint is enabled.</span></span><br><span class="line">enabled = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The <span class="built_in">bind</span> address used by the HTTP service.</span></span><br><span class="line">bind-address = &quot;:8086&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打开防火墙</span></span><br><span class="line">firewall-cmd --list-all      //查看所有端口</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=8086/tcp    //放行8086</span><br><span class="line">firewall-cmd --reload        //使规则生效</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用方式一：</span></span><br><span class="line">用户可以运行该软件源码（need Visual Studio 2015）</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用方式二：</span></span><br><span class="line">将下载的资源  解压，找到InfluxDBStudio.exe，打开即可</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用说明：</span></span><br><span class="line">https://github.com/CymaticLabs/InfluxDBStudio</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">预览</span></span><br></pre></td></tr></table></figure><blockquote><p>chronograf（强烈推荐）</p></blockquote><p>支持 influxdb 的基础监控、管理以及数据展示、警报管理及数据库管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget https://dl.influxdata.com/chronograf/releases/chronograf-1.7.14.x86_64.rpm</span><br><span class="line">sudo yum localinstall chronograf-1.7.14.x86_64.rpm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动</span></span><br><span class="line">chronograf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改配置文件</span></span><br><span class="line">vim /etc/influxdb/influxdb.conf    </span><br><span class="line">[http]</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Determines whether HTTP endpoint is enabled.</span></span><br><span class="line">   enabled = true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The <span class="built_in">bind</span> address used by the HTTP service.</span></span><br><span class="line">   bind-address = &quot;:8086&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">访问</span></span><br><span class="line">localhost|ip:8888</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启防火墙端口</span></span><br><span class="line">firewall-cmd --list-all      //查看所有端口</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=8888/tcp    //放行8888</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=8086/tcp    //放行8086</span><br><span class="line">firewall-cmd --reload        //使规则生效</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更多参考</span></span><br><span class="line">https://docs.influxdata.com/</span><br></pre></td></tr></table></figure><h3 id="服务器监控"><a href="#服务器监控" class="headerlink" title="服务器监控"></a>服务器监控</h3><ul><li>influxdb</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$pwd</span>为当前工作目录，可替换为其它宿主机目录</span></span><br><span class="line">docker run -d -p 8086:8086 -v $PWD:/var/lib/influxdb --name=influxdb influxdb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询参数为show databases 数据库会返回所有的数据库名，新安装的influxdb默认只有一个<span class="string">&quot;_internal&quot;</span>数据库</span></span><br><span class="line">curl -G http://localhost:8086/query --data-urlencode &quot;q=show databases&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">docker start influxdb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止</span></span><br><span class="line">docker stop influxdb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">docker restart influxdb</span><br></pre></td></tr></table></figure><ul><li>telegraf</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.influxdata.com/telegraf/releases/telegraf-1.6.3-1.x86_64.rpm</span><br><span class="line">yum localinstall telegraf-1.6.3-1.x86_64.rpm</span><br><span class="line">vim /etc/telegraf/telegraf.conf</span><br><span class="line">--------------------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要配置数据输出项（输出到influxdb），其它项使用telegraf默认即可</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##############################################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                           OUTPUT PLUGINS                                   <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##############################################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Configuration <span class="keyword">for</span> sending metrics to InfluxDB</span></span><br><span class="line">[[outputs.influxdb]]</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># The full HTTP or UDP URL for your InfluxDB instance.</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># Multiple URLs can be specified for a single cluster, only ONE of the</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># urls will be written to each interval.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">urls = [<span class="string">&quot;unix:///var/run/influxdb.sock&quot;</span>]</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">urls = [<span class="string">&quot;udp://127.0.0.1:8089&quot;</span>]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">influxdb http地址，由于是宿主机直接安装，直接访问本地8086端口即可。</span></span><br><span class="line">  urls = [&quot;http://127.0.0.1:8086&quot;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># The target database for metrics; will be created as needed.</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">数据库名，不存在会自动创建，默认<span class="string">&quot;telegraf&quot;</span></span></span><br><span class="line">  database = &quot;telegraf&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># If true, no CREATE DATABASE queries will be sent.  Set to true when using</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># Telegraf with a user without permissions to create databases or when the</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># database already exists.</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">跳过创建数据库</span></span><br><span class="line">  skip_database_creation = false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># Name of existing retention policy to write to.  Empty string writes to</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># the default retention policy.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">retention_policy = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># Write consistency (clusters only), can be: &quot;any&quot;, &quot;one&quot;, &quot;quorum&quot;, &quot;all&quot;</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">write_consistency = <span class="string">&quot;any&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># Timeout for HTTP messages.</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">超时时间</span></span><br><span class="line">  timeout = &quot;5s&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># HTTP Basic Auth</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">username = <span class="string">&quot;telegraf&quot;</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">password = <span class="string">&quot;metricsmetricsmetricsmetrics&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># HTTP User-Agent</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">user_agent = <span class="string">&quot;telegraf&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># UDP payload size is the maximum packet size to send.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">udp_payload = 512</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># Optional SSL Config</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">ssl_ca = <span class="string">&quot;/etc/telegraf/ca.pem&quot;</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">ssl_cert = <span class="string">&quot;/etc/telegraf/cert.pem&quot;</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">ssl_key = <span class="string">&quot;/etc/telegraf/key.pem&quot;</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># Use SSL but skip chain &amp; host verification</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">insecure_skip_verify = <span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># HTTP Proxy override, if unset values the standard proxy environment</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># variables are consulted to determine which proxy, if any, should be used.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">http_proxy = <span class="string">&quot;http://corporate.proxy:3128&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># Additional HTTP headers</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">http_headers = &#123;<span class="string">&quot;X-Special-Header&quot;</span> = <span class="string">&quot;Special-Value&quot;</span>&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># HTTP Content-Encoding for write request body, can be set to &quot;gzip&quot; to</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># compress body or &quot;identity&quot; to apply no encoding.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">content_encoding = <span class="string">&quot;identity&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># When true, Telegraf will output unsigned integers as unsigned values,</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># i.e.: &quot;42u&quot;.  You will need a version of InfluxDB supporting unsigned</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># integer values.  Enabling this option will result in field type errors if</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># existing data has been written.</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">influx_uint_support = <span class="literal">false</span></span></span><br><span class="line">  --------------------------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Telegraf提供的采集内容非常丰富，将相应配置项取消注释并重启Telegraf即可生效</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">启动</span></span><br><span class="line">systemctl start telegraf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止</span></span><br><span class="line">systemctl stop telegraf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">systemctl restart telegraf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看服务状态</span></span><br><span class="line">systemctl status telegraf</span><br></pre></td></tr></table></figure><ul><li>grafana </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:3000 --name=grafana grafana/grafana</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http://localhost:3000 打开grafana登录页面  默认用户名密码登录（admin）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">击添加数据源，按照配置选择influxdb添加一个influxdb数据源</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># url需配置成正确的宿主机ip和端口（防火墙需放行8086），若不想暴露数据库端口，可换成influxdb容器的ip地址（需自行进入容器查看，容器重启后可能会发生变化）避免数据库暴露至公网。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># InfluxDB Details需填写数据名（默认telegraf）、用户名和密码（默认均为root）。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 填写完成后，点击Save&amp;Test按钮，若访问正常，会出现Data source is working提示，否则请检查配置内容以及网络（防火墙）</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 返回主页，点击添加仪表板按钮添加新仪表板，点击Graph创建一个Graph Panel</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 点击标题展开菜单，选择Edit进入面板编辑。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 选择Metrics选项卡配置面板数据。配置可显示一条CPU-total的数据曲线</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 还可添加多条查询，同时在一个panel显示多条曲线。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 配置完成后点击上方保存按钮保存仪表板。</span></span></span><br></pre></td></tr></table></figure><ul><li>start-DockerCompose_grafana.sh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">GRAFANA_DIR=/grafana-dir</span><br><span class="line">GRAFANA_plugins=/plugins</span><br><span class="line">INSPECT_NAME=`id -u grafana &gt;&gt; /dev/null 2&gt;&amp;1`</span><br><span class="line">INSPECT_ID=`id 472 &gt;&gt; /dev/null 2&gt;&amp;1 `</span><br><span class="line">INSPECT_FILE=`-f ./docker-compose_grafana.yml &gt;&gt; /dev/null 2&gt;&amp;1`</span><br><span class="line"></span><br><span class="line">function newfile () &#123;</span><br><span class="line">cat &gt;&gt; ./docker-compose_grafana.yml &lt;&lt;EOF</span><br><span class="line">version: &#x27;2&#x27;</span><br><span class="line">services:</span><br><span class="line">grafana:</span><br><span class="line">image: grafana/grafana</span><br><span class="line">restart: always</span><br><span class="line">container_name: &quot;grafana&quot;</span><br><span class="line">ports:</span><br><span class="line">- 3000:3000</span><br><span class="line">volumes:</span><br><span class="line">- $GRAFANA_DIR/data:/var/lib/grafana:rw</span><br><span class="line">- $GRAFANA_DIR$GRAFANA_plugins:/var/lib/grafana/plugins:rw</span><br><span class="line">- /etc/localtime:/etc/localtime #同步宿主机和容器时间</span><br><span class="line">links:</span><br><span class="line">- influxdb</span><br><span class="line">depends_on:</span><br><span class="line">- influxdb</span><br><span class="line">influxdb:</span><br><span class="line">image: tutum/influxdb:latest</span><br><span class="line">restart: always</span><br><span class="line">container_name: &quot;influxdb&quot;</span><br><span class="line">environment:</span><br><span class="line">- ADMIN_USER=&quot;root&quot;</span><br><span class="line">- INFLUXDB_INIT_PWD=&quot;237356573&quot;</span><br><span class="line">- PRE_CREATE_DB=&quot;telegraf&quot;</span><br><span class="line">volumes:</span><br><span class="line">- /etc/localtime:/etc/localtime</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">未做数据卷 如要保存db data 必须做数据卷</span></span><br><span class="line">ports:</span><br><span class="line">- 8086:8086</span><br><span class="line">- 8083:8083</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ ! $INSPECT_NAME ] &amp;&amp; [ ! $INSPECT_ID ];</span><br><span class="line">then</span><br><span class="line">echo &quot;run&quot;</span><br><span class="line">groupadd -g 472 grafana &amp;&amp; useradd -M -u 472 -g 472 grafana</span><br><span class="line">mkdir -p $GRAFANA_DIR/&#123;data,plugins&#125;</span><br><span class="line">chown -R grafana:grafana $GRAFANA_DIR</span><br><span class="line">newfile</span><br><span class="line">docker-compose -f ./docker-compose_grafana.yml up -d</span><br><span class="line">elif[ $INSTPECT_FILE ];</span><br><span class="line">docker-compose -f ./docker-compose_grafana.yml up -d</span><br><span class="line">else</span><br><span class="line">newfile</span><br><span class="line">echo &quot;not run grafana-DockerCompose.yml&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>172.16.1.6  agent 安装 telegraf 并设置配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">wget http://get.influxdb.org/telegraf/telegraf-0.11.1-1.x86_64.rpm </span><br><span class="line">yum localinstall telegraf-0.11.1-1.x86_64.rpm -y</span><br><span class="line">cat  /etc/telegraf/telegrag.conf     #扩展目录 /etc/telegraf/telegrag.d/[global_tags]</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">[global_tags]</span><br><span class="line">[agent]</span><br><span class="line">  interval = &quot;8s&quot;</span><br><span class="line">  round_interval = true</span><br><span class="line">  metric_batch_size = 1000</span><br><span class="line">  metric_buffer_limit = 10000</span><br><span class="line">  collection_jitter = &quot;0s&quot;</span><br><span class="line">  flush_interval = &quot;10s&quot;</span><br><span class="line">  flush_jitter = &quot;0s&quot;</span><br><span class="line">  precision = &quot;&quot;</span><br><span class="line">  debug = false</span><br><span class="line">  quiet = false</span><br><span class="line">  logfile = &quot;&quot;</span><br><span class="line">  hostname = &quot;&quot;</span><br><span class="line">  omit_hostname = false</span><br><span class="line">[[outputs.influxdb]]</span><br><span class="line">urls = [&quot;http://172.16.1.50:8086&quot;]</span><br><span class="line">database = &quot;telegraf&quot;</span><br><span class="line">  retention_policy = &quot;&quot;</span><br><span class="line">  write_consistency = &quot;any&quot;</span><br><span class="line">  timeout = &quot;5s&quot;</span><br><span class="line">   username = &quot;root&quot;</span><br><span class="line">  password = &quot;237356573&quot;</span><br><span class="line">[[inputs.net]]</span><br><span class="line">interfaces = [&quot;ens33&quot;]</span><br><span class="line">[[inputs.cpu]]</span><br><span class="line">  percpu = true</span><br><span class="line">  totalcpu = true</span><br><span class="line">  collect_cpu_time = false</span><br><span class="line">  report_active = false</span><br><span class="line">[[inputs.disk]]</span><br><span class="line">  ignore_fs = [&quot;tmpfs&quot;, &quot;devtmpfs&quot;, &quot;devfs&quot;]</span><br><span class="line">[[inputs.diskio]]</span><br><span class="line">[[inputs.kernel]]</span><br><span class="line">[[inputs.mem]]</span><br><span class="line">[[inputs.processes]]</span><br><span class="line">[[inputs.swap]]</span><br><span class="line">[[inputs.system]]</span><br><span class="line">[[inputs.netstat]]</span><br><span class="line">---------------------------------------------------</span><br><span class="line">systemctl  start  Telegraf</span><br><span class="line">netstat -ltap | grep telegraf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http://172.16.1.50：8083  访问influxdb 查看数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">select * from *cpu*</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登陆 http://172.16.1.50:3000  配置grafana   user:admin password:admin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 grafana DB 填入地址   IP   因为我们已经在docker 容器内把  db 容器  links  别名为  influxdb    所以 URL:httpd://influxdb:8086</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Import 导入模板  dashboard 面板   模板下载地址：https://grafana.com/dashboards/1443</span></span><br></pre></td></tr></table></figure><h3 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h3><ul><li>docker-compose.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># namenode: (1)管理元数据  (2)维护目录树 (3)响应客户请求</span></span><br><span class="line">  <span class="attr">namenode:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-namenode:1.1.0-hadoop2.7.1-java8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">namenode</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hadoop_namenode:/hadoop/dfs/name</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CLUSTER_NAME=test</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line">  <span class="comment"># ResourceManager: Yarn集群主控节点，负责协调和管理整个集群（所有NodeManager）的资源</span></span><br><span class="line">  <span class="attr">resourcemanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-resourcemanager:1.1.0-hadoop2.7.1-java8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">resourcemanager</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namenode</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">datanode1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">datanode2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">datanode3</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line">  <span class="comment">#historyserver: 用来记录作业的信息，包括已经运行完成的和正在运行的</span></span><br><span class="line">  <span class="attr">historyserver:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-historyserver:1.1.0-hadoop2.7.1-java8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">historyserver</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namenode</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">datanode1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">datanode2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">datanode3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hadoop_historyserver:/hadoop/yarn/timeline</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># nodemanager:管理一个YARN集群中的每一个节点。比如监视资源使用情况（ CPU，内存，硬盘，网络），跟踪节点健康等。</span></span><br><span class="line">  <span class="attr">nodemanager1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-nodemanager:1.1.0-hadoop2.7.1-java8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nodemanager1</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namenode</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">datanode1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">datanode2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">datanode3</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># datanode: 负责数据的存储</span></span><br><span class="line">  <span class="attr">datanode1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-datanode:1.1.0-hadoop2.7.1-java8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">datanode1</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namenode</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hadoop_datanode1:/hadoop/dfs/data</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datanode2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-datanode:1.1.0-hadoop2.7.1-java8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">datanode2</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namenode</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hadoop_datanode2:/hadoop/dfs/data</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datanode3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-datanode:1.1.0-hadoop2.7.1-java8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">datanode3</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namenode</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hadoop_datanode3:/hadoop/dfs/data</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">hadoop_namenode:</span></span><br><span class="line">  <span class="attr">hadoop_datanode1:</span></span><br><span class="line">  <span class="attr">hadoop_datanode2:</span></span><br><span class="line">  <span class="attr">hadoop_datanode3:</span></span><br><span class="line">  <span class="attr">hadoop_historyserver:</span></span><br></pre></td></tr></table></figure><ul><li>hadoop.env </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CORE_CONF指明为/etc/hadoop/core-site.xml配置文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义master的URI和端口</span></span><br><span class="line">CORE_CONF_fs_defaultFS=hdfs://namenode:8020</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">呈现内容时在静态Web筛选器上进行过滤的用户名，比如在HDFS web UI中的过滤</span></span><br><span class="line">CORE_CONF_hadoop_http_staticuser_user=root</span><br><span class="line">CORE_CONF_hadoop_proxyuser_hue_hosts=*</span><br><span class="line">CORE_CONF_hadoop_proxyuser_hue_groups=*</span><br><span class="line"></span><br><span class="line">HDFS_CONF_dfs_webhdfs_enabled=true</span><br><span class="line">HDFS_CONF_dfs_permissions_enabled=false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Yarn打印工作日志</span></span><br><span class="line">YARN_CONF_yarn_log___aggregation___enable=true</span><br><span class="line">YARN_CONF_yarn_resourcemanager_recovery_enabled=true</span><br><span class="line">YARN_CONF_yarn_resourcemanager_store_class=org.apache.hadoop.yarn.server.resourcemanager.recovery.FileSystemRMStateStore</span><br><span class="line">YARN_CONF_yarn_resourcemanager_fs_state___store_uri=/rmstate</span><br><span class="line">YARN_CONF_yarn_nodemanager_remote___app___log___dir=/app-logs</span><br><span class="line">YARN_CONF_yarn_log_server_url=http://historyserver:8188/applicationhistory/logs/</span><br><span class="line">YARN_CONF_yarn_timeline___service_enabled=true</span><br><span class="line">YARN_CONF_yarn_timeline___service_generic___application___history_enabled=true</span><br><span class="line">YARN_CONF_yarn_resourcemanager_system___metrics___publisher_enabled=true</span><br><span class="line">YARN_CONF_yarn_resourcemanager_hostname=resourcemanager</span><br><span class="line">YARN_CONF_yarn_timeline___service_hostname=historyserver</span><br><span class="line">YARN_CONF_yarn_resourcemanager_address=resourcemanager:8032</span><br><span class="line">YARN_CONF_yarn_resourcemanager_scheduler_address=resourcemanager:8030</span><br><span class="line">YARN_CONF_yarn_resourcemanager_resource___tracker_address=resourcemanager:8031</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 namenode ip地址</span></span><br><span class="line">docker inspect namenode  | grep IPAddress</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http://:50070 查看集群状态</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交作业</span></span><br><span class="line">docker exec -it namenode /bin/bash</span><br><span class="line">cd /opt/hadoop-2.7.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建用户目录</span></span><br><span class="line">hdfs dfs -mkdir /user</span><br><span class="line">hdfs dfs -mkdir /user/root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">准备数据</span></span><br><span class="line">hdfs dfs -mkdir input</span><br><span class="line">hdfs dfs -put etc/hadoop/*.xml input</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交作业</span></span><br><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar grep input output &#x27;dfs[a-z.]+&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看作业执行结果</span></span><br><span class="line">hdfs dfs -cat output/*</span><br><span class="line"></span><br><span class="line">docker exec -it resourcemanager bash</span><br><span class="line">hadoop fs -ls hdfs://namenode:9000/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清空数据</span></span><br><span class="line">hdfs dfs -rm input/*</span><br><span class="line">hdfs dfs -rmdir input/</span><br><span class="line">hdfs dfs -rm output/*</span><br><span class="line">hdfs dfs -rmdir output/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止删除</span></span><br><span class="line">docker-compose stop</span><br><span class="line">docker-compose rm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问</span></span><br><span class="line">Namenode: http://namenode:50070/dfshealth.html#tab-overview</span><br><span class="line">History server: http://historyserver:8188/applicationhistory</span><br><span class="line">Datanode: http://datanode:50075/</span><br><span class="line">Nodemanager: http://nodemanager:8042/node</span><br><span class="line">Resource manager: http://resourcemanager:8088/</span><br></pre></td></tr></table></figure><h3 id="hadoop-1"><a href="#hadoop-1" class="headerlink" title="hadoop"></a>hadoop</h3><ul><li>docker-compose.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">namenode:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">namenode</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9870</span><span class="string">:9870</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop/dfs/name:/hadoop/dfs/name</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CLUSTER_NAME=test</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datanode:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">datanode</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namenode</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop/dfs/data:/hadoop/dfs/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9870&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">resourcemanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">resourcemanager</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9000 namenode:9870 datanode:9864&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nodemanager1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nodemanager</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">historyserver:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">historyserver</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop/yarn/timeline:/hadoop/yarn/timeline</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br></pre></td></tr></table></figure><ul><li>hadoop.env</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">CORE_CONF_fs_defaultFS=hdfs://namenode:9000</span><br><span class="line">CORE_CONF_hadoop_http_staticuser_user=root</span><br><span class="line">CORE_CONF_hadoop_proxyuser_hue_hosts=*</span><br><span class="line">CORE_CONF_hadoop_proxyuser_hue_groups=*</span><br><span class="line">CORE_CONF_io_compression_codecs=org.apache.hadoop.io.compress.SnappyCodec</span><br><span class="line"></span><br><span class="line">HDFS_CONF_dfs_webhdfs_enabled=<span class="literal">true</span></span><br><span class="line">HDFS_CONF_dfs_permissions_enabled=<span class="literal">false</span></span><br><span class="line">HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">YARN_CONF_yarn_log___aggregation___enable=<span class="literal">true</span></span><br><span class="line">YARN_CONF_yarn_log_server_url=http://historyserver:8188/applicationhistory/logs/</span><br><span class="line">YARN_CONF_yarn_resourcemanager_recovery_enabled=<span class="literal">true</span></span><br><span class="line">YARN_CONF_yarn_resourcemanager_store_class=org.apache.hadoop.yarn.server.resourcemanager.recovery.FileSystemRMStateStore</span><br><span class="line">YARN_CONF_yarn_resourcemanager_scheduler_class=org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler</span><br><span class="line">YARN_CONF_yarn_scheduler_capacity_root_default_maximum___allocation___mb=8192</span><br><span class="line">YARN_CONF_yarn_scheduler_capacity_root_default_maximum___allocation___vcores=4</span><br><span class="line">YARN_CONF_yarn_resourcemanager_fs_state___store_uri=/rmstate</span><br><span class="line">YARN_CONF_yarn_resourcemanager_system___metrics___publisher_enabled=<span class="literal">true</span></span><br><span class="line">YARN_CONF_yarn_resourcemanager_hostname=resourcemanager</span><br><span class="line">YARN_CONF_yarn_resourcemanager_address=resourcemanager:8032</span><br><span class="line">YARN_CONF_yarn_resourcemanager_scheduler_address=resourcemanager:8030</span><br><span class="line">YARN_CONF_yarn_resourcemanager_resource__tracker_address=resourcemanager:8031</span><br><span class="line">YARN_CONF_yarn_timeline___service_enabled=<span class="literal">true</span></span><br><span class="line">YARN_CONF_yarn_timeline___service_generic___application___history_enabled=<span class="literal">true</span></span><br><span class="line">YARN_CONF_yarn_timeline___service_hostname=historyserver</span><br><span class="line">YARN_CONF_mapreduce_map_output_compress=<span class="literal">true</span></span><br><span class="line">YARN_CONF_mapred_map_output_compress_codec=org.apache.hadoop.io.compress.SnappyCodec</span><br><span class="line">YARN_CONF_yarn_nodemanager_resource_memory___mb=16384</span><br><span class="line">YARN_CONF_yarn_nodemanager_resource_cpu___vcores=8</span><br><span class="line">YARN_CONF_yarn_nodemanager_disk___health___checker_max___disk___utilization___per___disk___percentage=98.5</span><br><span class="line">YARN_CONF_yarn_nodemanager_remote___app___log___dir=/app-logs</span><br><span class="line">YARN_CONF_yarn_nodemanager_aux___services=mapreduce_shuffle</span><br><span class="line"></span><br><span class="line">MAPRED_CONF_mapreduce_framework_name=yarn</span><br><span class="line">MAPRED_CONF_mapred_child_java_opts=-Xmx4096m</span><br><span class="line">MAPRED_CONF_mapreduce_map_memory_mb=4096</span><br><span class="line">MAPRED_CONF_mapreduce_reduce_memory_mb=8192</span><br><span class="line">MAPRED_CONF_mapreduce_map_java_opts=-Xmx3072m</span><br><span class="line">MAPRED_CONF_mapreduce_reduce_java_opts=-Xmx6144m</span><br><span class="line">MAPRED_CONF_yarn_app_mapreduce_am_env=HADOOP_MAPRED_HOME=/data/docker-compose/hadoop-3.2.1/</span><br><span class="line">MAPRED_CONF_mapreduce_map_env=HADOOP_MAPRED_HOME=/data/docker-compose/hadoop-3.2.1/</span><br><span class="line">MAPRED_CONF_mapreduce_reduce_env=HADOOP_MAPRED_HOME=/data/docker-compose/hadoop-3.2.1/</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose up -d</span></span><br><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE </span><br><span class="line">fc09ad44060d        bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8</span><br><span class="line">ff8c76c8a878        bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8    </span><br><span class="line">a4cc8c3b7bde        bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8 </span><br><span class="line">245e613ea5f2        bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8</span><br><span class="line">1ca5ef81f6b3        bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8</span><br><span class="line"><span class="comment"># docker exec -it resourcemanager bash</span></span><br><span class="line">/<span class="comment"># hadoop fs -ls hdfs://namenode:9000/</span></span><br></pre></td></tr></table></figure><h3 id="hdfs"><a href="#hdfs" class="headerlink" title="hdfs"></a>hdfs</h3><ul><li>docker-compose.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">namenode:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">singularities/hadoop</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">start-hadoop</span> <span class="string">namenode</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">namenode</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">HDFS_USER:</span> <span class="string">hdfsuser</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8020:8020&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;14000:14000&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;50070:50070&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;50075:50075&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;10020:10020&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;13562:13562&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;19888:19888&quot;</span></span><br><span class="line">  <span class="attr">datanode:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">singularities/hadoop</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">start-hadoop</span> <span class="string">datanode</span> <span class="string">namenode</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">HDFS_USER:</span> <span class="string">hdfsuser</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namenode</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩容 datanode</span></span><br><span class="line">docker-compose scale datanode=3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问 ip:50070</span></span><br><span class="line">docker exec -it hdfs_namenode_1 /bin/bash</span><br><span class="line">hadoop fs -mkdir /hdfs #在根目录下创建hdfs文件夹</span><br><span class="line">hadoop fs -ls / #列出跟目录下的文件列表</span><br><span class="line">hadoop fs -mkdir -p /hdfs/d1/d2  # 创建多级目录</span><br><span class="line">hadoop fs -ls -R /  # 级联列出文件目录</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传本地目录</span></span><br><span class="line">echo &quot;hello hdfs&quot; &gt;&gt;local.txt</span><br><span class="line">hadoop fs -put local.txt /hdfs/d1/d2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看</span></span><br><span class="line">hadoop fs -cat /hdfs/d1/d2/local.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">hadoop fs -get /hdfs/d1/d2/local.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除文件</span></span><br><span class="line">hadoop fs -rm /hdfs/d1/d2/local.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除目录</span></span><br><span class="line">hadoop fs -rmdir /hdfs/d1/d2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改权限</span></span><br><span class="line">hadoop fs -ls /hdfs</span><br><span class="line">hadoop fs -chmod 777 /hdfs/d1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件所属用户为 admin</span></span><br><span class="line">hadoop fs -chown admin /hdfs/d1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件用户组</span></span><br><span class="line">hadoop fs -chgrp admin /hdfs/d1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有命令</span></span><br><span class="line">hadoop fs</span><br></pre></td></tr></table></figure><h3 id="性能测试监控平台"><a href="#性能测试监控平台" class="headerlink" title="性能测试监控平台"></a>性能测试监控平台</h3><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>docker</td><td>开源的应用容器引擎，实现虚拟化。</td></tr><tr><td>Jmeter</td><td>基于Java的压力测试工具</td></tr><tr><td>telegraf</td><td>收集系统和服务的统计数据</td></tr><tr><td>influxdb</td><td>开源时序型数据库，常用的一种使用场景：监控数据统计</td></tr><tr><td>grafana</td><td>跨平台的开源的度量分析和可视化工具</td></tr></tbody></table><ul><li>install.sh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">脚本用于更新阿里yum源、安装docker、安装Python3、安装docker-compose、配置pip国内镜像</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">日期：2020-8-12</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新yum为阿里yum源</span></span><br><span class="line">yum_install()&#123;</span><br><span class="line">  mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class="line">  echo &#x27;备份成功，开始下载yum源&#x27;</span><br><span class="line">  curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">  echo &#x27;下载成功&#x27;</span><br><span class="line">  yum clean all</span><br><span class="line">  yum makecache</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置pip国内镜像</span></span><br><span class="line">pips()&#123;</span><br><span class="line">mkdir -p /~.pip</span><br><span class="line">tee ~.pip/pip.conf &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">[global]</span><br><span class="line">index-url=http://mirrors.aliyun.com/pypi/simple</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置docker阿里镜像加速</span></span><br><span class="line">docker_daemon()&#123;</span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://m0gqm8ls.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检测环境是否安装docker</span></span><br><span class="line">dockers()&#123;</span><br><span class="line">  total=$(find / -name &quot;docker.service&quot;)</span><br><span class="line">  if [[ -z $total ]]; then</span><br><span class="line">    echo &#x27;检测到系统未安装docker&#x27;</span><br><span class="line">    return 0</span><br><span class="line">  else</span><br><span class="line">    echo &#x27;检测到系统已安装docker&#x27;</span><br><span class="line">    return 1</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检测环境是否安装docker-compose</span></span><br><span class="line">docker_composes()&#123;</span><br><span class="line">  service=$(docker-compose -v |grep version)</span><br><span class="line">  if [[ -n $service ]]; then</span><br><span class="line">    echo &#x27;检测到系统已安装docker-compose，将自动启动服务&#x27;</span><br><span class="line">    docker_compose_run</span><br><span class="line">    echo &#x27;启动完成！！&#x27;</span><br><span class="line">    echo &#x27;该脚本所在目录存在docker-compose.yml文件，手动启动请在该文件所在目录下执行docker-compose up -d 后台运行docker-compose项目启动所有服务&#x27;</span><br><span class="line">    exit</span><br><span class="line">  else</span><br><span class="line">    echo &#x27;未安装docker-compose将进行安装&#x27;</span><br><span class="line">    return 1</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动docker服务并设置为自启动</span></span><br><span class="line">docker_run()&#123;</span><br><span class="line">  systemctl start docker</span><br><span class="line">  systemctl enable docker.service</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">判断docker服务是否存在</span></span><br><span class="line">docker_service()&#123;</span><br><span class="line">  for ((i=0;i&lt;=3;i++))</span><br><span class="line">  do</span><br><span class="line">    service=$(systemctl status docker|grep Active|grep running)</span><br><span class="line">    if [[ -z $service ]];then</span><br><span class="line">      echo &#x27;docker服务已启动&#x27;</span><br><span class="line">      return 0</span><br><span class="line">    else</span><br><span class="line">      echo &#x27;docker服务没有启动,尝试启动&#x27;</span><br><span class="line">      docker_run</span><br><span class="line">      sleep 3</span><br><span class="line">      echo &#x27;再次检测docker服务是否启动&#x27;</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装docker</span></span><br><span class="line">docker_install()&#123;</span><br><span class="line">  yum -y install docker</span><br><span class="line">  echo &#x27;启动docker&#x27;</span><br><span class="line">  docker_run</span><br><span class="line">  docker_service</span><br><span class="line">  docker_daemon</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装Python3和docker-compose</span></span><br><span class="line">docker_compose_install()&#123;</span><br><span class="line">  yum -y install python3</span><br><span class="line">  pips</span><br><span class="line">  pip3 install docker-compose </span><br><span class="line">  echo &#x27;安装完成&#x27;</span><br><span class="line">&#125;</span><br><span class="line">docker_compose_run()&#123;</span><br><span class="line">  docker_daemon</span><br><span class="line">  docker-compose up -d</span><br><span class="line">  exit</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主流程</span></span><br><span class="line">echo &#x27;********安装docker-compose部署influxdb、telegraf、grafana、jmeter服务*********&#x27;</span><br><span class="line">read -r -p &quot;是否需要将yum源更换为阿里源[y/n]: &quot; input</span><br><span class="line">case $input in</span><br><span class="line">  [yY][eE][sS]|[yY])</span><br><span class="line">    echo &#x27;开始更新yum源&#x27;</span><br><span class="line">    yum_install</span><br><span class="line">    echo &#x27;检测系统是否安装docker&#x27;</span><br><span class="line">    dockers</span><br><span class="line">    if [[ $? -eq 0 ]]; then</span><br><span class="line">      echo &#x27;开始docker安装&#x27;</span><br><span class="line">      docker_install</span><br><span class="line">      echo &#x27;开始Python3和docker-compose安装&#x27;</span><br><span class="line">      docker_compose_install</span><br><span class="line">      echo &#x27;启动docker-compose&#x27;</span><br><span class="line">      docker-compose_run</span><br><span class="line">    else</span><br><span class="line">      echo &#x27;检测系统是否安装docker-compose&#x27;</span><br><span class="line">      docker_composes</span><br><span class="line">      docker_compose_install</span><br><span class="line">      docker-compose_run</span><br><span class="line">      exit</span><br><span class="line">    fi</span><br><span class="line">    ;;</span><br><span class="line">  [nN][oO]|[nN])</span><br><span class="line">    echo &#x27;检测是否安装docker&#x27;</span><br><span class="line">    dockers</span><br><span class="line">    if [[ $? -eq 0 ]]; then</span><br><span class="line">      echo &#x27;开始docker安装&#x27;</span><br><span class="line">      docker_install</span><br><span class="line">      echo &#x27;开始Python3和docker-compose安装&#x27;</span><br><span class="line">      docker_compose_install</span><br><span class="line">      echo &#x27;启动docker-compose&#x27;</span><br><span class="line">      docker-compose_run</span><br><span class="line">    else</span><br><span class="line">      docker_composes     </span><br><span class="line">      if [[ $? -eq 1 ]]; then</span><br><span class="line">        docker_compose_install</span><br><span class="line">        echo &#x27;正在启动docker-compose&#x27;</span><br><span class="line">        docker_compose_run</span><br><span class="line">      fi</span><br><span class="line">    fi</span><br><span class="line">  ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><ul><li>docker-compose.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jmeter:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/jmeter/jmeter:centos</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jmeter</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/jmeter/web:/jmeter/web</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/jmeter/jmx:/jmeter/jmx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/jmeter/jtl:/jmeter/jtl</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">influxdb</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">telegraf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">influxdb</span></span><br><span class="line">  <span class="attr">influxdb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">influxdb</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">influxdb</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8086:8086&quot;</span></span><br><span class="line">  <span class="attr">telegraf:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/jmeter/telegraf:1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">telegraf</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8092:8092&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8125:8125&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8094:8094&quot;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">influxdb</span></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br></pre></td></tr></table></figure><h3 id="gitlab"><a href="#gitlab" class="headerlink" title="gitlab"></a>gitlab</h3><ul><li>docker-compose.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">&#x27;twang2218/gitlab-ce-zh&#x27;</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">&#x27;172.26.121.43&#x27;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">TZ:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">        <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          external_url &#x27;http://172.26.121.43&#x27;</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 2222</span></span><br><span class="line"><span class="string">          unicorn[&#x27;port&#x27;] = 8888</span></span><br><span class="line"><span class="string">          nginx[&#x27;listen_port&#x27;] = 80</span></span><br><span class="line"><span class="string"></span>      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;8088:80&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;2443:443&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;2222:22&#x27;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./config:/etc/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./data:/var/opt/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./logs:/var/log/gitlab</span></span><br></pre></td></tr></table></figure><ul><li>测试访问</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问 ip:8088</span></span><br></pre></td></tr></table></figure><h3 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h3><ul><li>docker-compose.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jobmanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">flink:1.9.2-scala_2.12</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6123&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8081:8081&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">jobmanager</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JOB_MANAGER_RPC_ADDRESS=jobmanager</span></span><br><span class="line">  <span class="attr">taskmanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">flink:1.9.2-scala_2.12</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6121&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6122&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">jobmanager</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">taskmanager</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;jobmanager:jobmanager&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JOB_MANAGER_RPC_ADDRESS=jobmanager</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问 ip:8081</span></span><br></pre></td></tr></table></figure><h3 id="es"><a href="#es" class="headerlink" title="es"></a>es</h3><ul><li>准备</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 最大文件打开数</span></span><br><span class="line">ulimit -a |grep open</span><br><span class="line">vim /etc/security/limits.conf</span><br><span class="line">-------------------------</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br><span class="line">-------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调整系统进程数</span></span><br><span class="line">vim /etc/security/limits.d/20-nproc.conf</span><br><span class="line">-------------------------</span><br><span class="line">*          soft    nproc     4096</span><br><span class="line">root       soft    nproc     unlimited</span><br><span class="line">-------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调整虚拟内存和最大并发连接数</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 临时</span></span></span><br><span class="line">sysctl –w vm.max_map_count=262144</span><br><span class="line">sysctl –w vm.max_map_count=262144</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 永久</span></span></span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line">---------------------------</span><br><span class="line">vm.max_map_count=655360</span><br><span class="line">fs.file-max=655360</span><br><span class="line">vm.overcommit_memory=1</span><br><span class="line">----------------------------</span><br><span class="line">sysctl -p --load /etc/sysctl.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭es自检</span></span><br><span class="line">vim elasticsearch.yml</span><br><span class="line">----------------------------</span><br><span class="line">bootstrap.memory_lock: false</span><br><span class="line">bootstrap.system_call_filter: false</span><br><span class="line">-----------------------------</span><br></pre></td></tr></table></figure><ul><li>部署</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询Elasticsearch 镜像</span></span><br><span class="line">docker search elasticsearch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取Elasticsearch 镜像</span></span><br><span class="line">docker pull docker.elastic.co/elasticsearch/elasticsearch:7.3.1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改镜像名称</span></span><br><span class="line">docker tag docker.elastic.co/elasticsearch/elasticsearch:7.3.1  elasticsearch:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署es</span></span><br><span class="line">docker run -itd -p 9200:9200 -p 9300:9300 --restart=always --privileged=true --name elasticsearch-server -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms=512m -Xms=512m&quot; elasticsearch:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认配置目录</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># /usr/share/elasticsearch/config</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># /usr/share/elasticsearch/logs</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看</span></span><br><span class="line">docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Names&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;&quot;</span><br><span class="line">1.需要开放端口[9200和9300]-&gt;9200作为Http协议，主要用于外部通讯,9300作为Tcp协议，jar之间就是通过tcp协议通讯,通常部署集群就是通过9300通信。推荐[宿主机自定义端口:9200]</span><br><span class="line">2.--restart=always :配置容器重启策略,当宿主机重启由于配置了开机自启动，不用手动启动</span><br><span class="line">3.--privileged：配置容器操作权限[true-root操作权限，false-当前容器用户操作权限]</span><br><span class="line">4.对于部署网络模式推荐默认桥接模式,也自定义可以host模式等</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置  如果Docker安装了可视化界面 Portainer，推荐采用这种方式进入容器</span></span><br><span class="line">docker exec -it f2d2e97da375 /bin/bash</span><br><span class="line">cd config </span><br><span class="line">vi elasticsearch.yml</span><br><span class="line">----------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加跨域配置：http.cors.enabled: <span class="literal">true</span> &amp;&amp; http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span></span><br><span class="line">cluster.name: &quot;docker-cluster&quot;</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">-----------------------------</span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器</span></span><br><span class="line">docker restart f2d2e97da375</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署header</span></span><br><span class="line">docker pull mobz/elasticsearch-head:5</span><br><span class="line">docker tag  mobz/elasticsearch-head:5        elasticsearch-head:latest</span><br><span class="line">docker run -itd --restart=always --privileged=true -p 9100:9100 --name elasticsearch-head-server elasticsearch-head:latest</span><br><span class="line">docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Names&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问 http://ip:9100/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分词插件</span></span><br><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.5.0/elasticsearch-analysis-ik-7.5.0.zip</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="neo4j"><a href="#neo4j" class="headerlink" title="neo4j"></a>neo4j</h3><ul><li>docker-compose.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">neo4j:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">neo4j:4.0-enterprise</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">7474</span><span class="string">:7474</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">7687</span><span class="string">:7687</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data/neo4j/data:/data</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data/neo4j/plugins:/plugins</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NEO4J_AUTH=neo4j/test</span>    <span class="comment"># 指定用户名、密码</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NEO4J_ACCEPT_LICENSE_AGREEMENT=yes</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NEO4JLABS_PLUGINS=[&quot;apoc&quot;</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p>目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- bin 目录：用于存储 Neo4j 的可执行程序；</span><br><span class="line">- conf 目录：用于控制 Neo4j 启动的配置文件；</span><br><span class="line">- data 目录：用于存储核心数据库文件；</span><br><span class="line">- plugins 目录：用于存储 Neo4j 的插件。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -xzvf neo4j-community-3.3.1-unix.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 Neo4j 解压目录</span></span><br><span class="line">cd /usr/local/neo4j/neo4j-community-3.1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（启动/控制台/停止）</span></span><br><span class="line">bin/neo4j  start/console/stop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入命令行</span></span><br><span class="line">bin/cypher-shell</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问 http://ip:7474/browser/</span></span><br><span class="line">docker exec -it neo4j bash</span><br><span class="line">cypher-shell -u neo4j -p test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清空数据  MATCH是匹配操作，而小括号()代表一个节点node（可理解为括号类似一个圆形），括号里面的n为标识符。</span></span><br><span class="line">MATCH (n) DETACH DELETE n</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建人物节点  CREATE是创建操作，Person是标签，代表节点的类型。花括号&#123;&#125;代表节点的属性</span></span><br><span class="line">CREATE (n:Person &#123;name:&#x27;John&#x27;&#125;) RETURN n</span><br><span class="line">CREATE (n:Person &#123;name:&#x27;Sally&#x27;&#125;) RETURN n</span><br><span class="line">CREATE (n:Person &#123;name:&#x27;Steve&#x27;&#125;) RETURN n</span><br><span class="line">CREATE (n:Person &#123;name:&#x27;Mike&#x27;&#125;) RETURN n</span><br><span class="line">CREATE (n:Person &#123;name:&#x27;Liz&#x27;&#125;) RETURN n</span><br><span class="line">CREATE (n:Person &#123;name:&#x27;Shawn&#x27;&#125;) RETURN n</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个 Person，并包含属性名字和职称</span></span><br><span class="line">CREATE (n:Person &#123; name: &#x27;Andres&#x27;, title: &#x27;Developer&#x27; &#125;) RETURN n;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建地区节点  节点类型为Location，属性包括city和state</span></span><br><span class="line">CREATE (n:Location &#123;city:&#x27;Miami&#x27;, state:&#x27;FL&#x27;&#125;)</span><br><span class="line">CREATE (n:Location &#123;city:&#x27;Boston&#x27;, state:&#x27;MA&#x27;&#125;)</span><br><span class="line">CREATE (n:Location &#123;city:&#x27;Lynn&#x27;, state:&#x27;MA&#x27;&#125;)</span><br><span class="line">CREATE (n:Location &#123;city:&#x27;Portland&#x27;, state:&#x27;ME&#x27;&#125;)</span><br><span class="line">CREATE (n:Location &#123;city:&#x27;San Francisco&#x27;, state:&#x27;CA&#x27;&#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建关系  方括号[]即为关系，FRIENDS为关系的类型。注意这里的箭头--&gt;是有方向的，表示是从a到b的关系</span></span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Liz&#x27;&#125;), (b:Person &#123;name:&#x27;Mike&#x27;&#125;) MERGE (a)-[:FRIENDS]-&gt;(b)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 使用花括号&#123;&#125;来增加关系的属性  2001年 Shawn和Sally成为朋友</span></span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Shawn&#x27;&#125;), (b:Person &#123;name:&#x27;Sally&#x27;&#125;) MERGE (a)-[:FRIENDS &#123;since:2001&#125;]-&gt;(b)</span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Shawn&#x27;&#125;), (b:Person &#123;name:&#x27;John&#x27;&#125;) MERGE (a)-[:FRIENDS &#123;since:2012&#125;]-&gt;(b)</span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Mike&#x27;&#125;), (b:Person &#123;name:&#x27;Shawn&#x27;&#125;) MERGE (a)-[:FRIENDS &#123;since:2006&#125;]-&gt;(b)</span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Sally&#x27;&#125;), (b:Person &#123;name:&#x27;Steve&#x27;&#125;) MERGE (a)-[:FRIENDS &#123;since:2006&#125;]-&gt;(b)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Liz 和 John 1998年结婚</span></span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Liz&#x27;&#125;), (b:Person &#123;name:&#x27;John&#x27;&#125;) MERGE (a)-[:MARRIED &#123;since:1998&#125;]-&gt;(b)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立不同类型节点之间的关系-人物和地点的关系  John1978年出生在Boston</span></span><br><span class="line">MATCH (a:Person &#123;name:&#x27;John&#x27;&#125;), (b:Location &#123;city:&#x27;Boston&#x27;&#125;) MERGE (a)-[:BORN_IN &#123;year:1978&#125;]-&gt;(b)</span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Liz&#x27;&#125;), (b:Location &#123;city:&#x27;Boston&#x27;&#125;) MERGE (a)-[:BORN_IN &#123;year:1981&#125;]-&gt;(b)</span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Mike&#x27;&#125;), (b:Location &#123;city:&#x27;San Francisco&#x27;&#125;) MERGE (a)-[:BORN_IN &#123;year:1960&#125;]-&gt;(b)</span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Shawn&#x27;&#125;), (b:Location &#123;city:&#x27;Miami&#x27;&#125;) MERGE (a)-[:BORN_IN &#123;year:1960&#125;]-&gt;(b)</span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Steve&#x27;&#125;), (b:Location &#123;city:&#x27;Lynn&#x27;&#125;) MERGE (a)-[:BORN_IN &#123;year:1970&#125;]-&gt;(b)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询 出生于 Boston城市的人</span></span><br><span class="line">MATCH (a:Person)-[:BORN_IN]-&gt;(b:Location &#123;city:&#x27;Boston&#x27;&#125;) RETURN a,b</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询所有对外关系节点  这里箭头的方向，返回结果不含任何地区节点，因为地区并没有指向其他节点（只是被指向）</span></span><br><span class="line">MATCH (a)--&gt;() RETURN a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询所有有关系的节点</span></span><br><span class="line">MATCH (a)--() RETURN a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询所有对外有关系的节点，以及关系类型</span></span><br><span class="line">MATCH (a)-[r]-&gt;() RETURN a.name, type(r)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询所有有结婚关系的节点</span></span><br><span class="line">MATCH (n)-[:MARRIED]-() RETURN n</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建节点的时候就建好关系</span></span><br><span class="line">CREATE (a:Person &#123;name:&#x27;Todd&#x27;&#125;)-[r:FRIENDS]-&gt;(b:Person &#123;name:&#x27;Carlos&#x27;&#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找某人的朋友的朋友</span></span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Mike&#x27;&#125;)-[r1:FRIENDS]-()-[r2:FRIENDS]-(friend_of_a_friend) RETURN friend_of_a_friend.name AS fofName</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加/修改节点的属性 SET表示修改操作</span></span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Liz&#x27;&#125;) SET a.age=34</span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Shawn&#x27;&#125;) SET a.age=32</span><br><span class="line">MATCH (a:Person &#123;name:&#x27;John&#x27;&#125;) SET a.age=44</span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Mike&#x27;&#125;) SET a.age=25</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除节点的属性</span></span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Mike&#x27;&#125;) SET a.test=&#x27;test&#x27;</span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Mike&#x27;&#125;) REMOVE a.test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 删除节点</span></span><br><span class="line">MATCH (a:Location &#123;city:&#x27;Portland&#x27;&#125;) DELETE a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除有关系的节点</span></span><br><span class="line">MATCH (a:Person &#123;name:&#x27;Todd&#x27;&#125;)-[rel]-(b:Person) DELETE a,b,rel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入 CVS数据到图库  CVS第一行数据： <span class="string">&quot;title&quot;</span>,<span class="string">&quot;url&quot;</span>,<span class="string">&quot;image&quot;</span>,<span class="string">&quot;openTypeList&quot;</span>,<span class="string">&quot;detail&quot;</span>,<span class="string">&quot;baseInfoKeyList&quot;</span>,<span class="string">&quot;baseInfoValueList&quot;</span></span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">名称、百科 URL 地址、图片、分类类型、详情、关键字、依据来源</span></span><br><span class="line">LOAD CSV WITH HEADERS  FROM &quot;file:///hudong_pedia.csv&quot; AS line  </span><br><span class="line">CREATE (p:HudongItem&#123;title:line.title,image:line.image,detail:line.detail,url:line.url,openTypeList:line.openTypeList,baseInfoKeyList:line.baseInfoKeyList,baseInfoValueList:line.baseInfoValueList&#125;)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##### 如果导入的时候出现 Neo4j JVM 内存溢出错误，可以在导入前，先把 Neo4j 下的 conf/neo4j.conf 中的 dbms.memory.heap.initial_size 和 dbms.memory.heap.max_size 调大点。导入完成后再把值改回去即可。</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建索引  对 titile 属性添加 UNIQUE（唯一约束/索引）</span></span><br><span class="line">CREATE CONSTRAINT ON (c:HudongItem)</span><br><span class="line">ASSERT c.title IS UNIQUE</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入新的节点  title、lable  点名称和标签</span></span><br><span class="line">LOAD CSV WITH HEADERS FROM &quot;file:///new_node.csv&quot; AS line</span><br><span class="line">CREATE (:NewNode &#123; title: line.title &#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加索引</span></span><br><span class="line">CREATE CONSTRAINT ON (c:NewNode)</span><br><span class="line">ASSERT c.title IS UNIQUE</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 导入hudongItem和新加入节点之间的关系   HudongItem1、relation、HudongItem2  实体1、关系、实体2</span></span></span><br><span class="line">LOAD CSV  WITH HEADERS FROM &quot;file:///wikidata_relation2.csv&quot; AS line</span><br><span class="line">MATCH (entity1:HudongItem&#123;title:line.HudongItem&#125;) , (entity2:NewNode&#123;title:line.NewNode&#125;)</span><br><span class="line">CREATE (entity1)-[:RELATION &#123; type: line.relation &#125;]-&gt;(entity2)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Entity、AttributeName、Attribute  实体、属性名称、属性值</span></span><br><span class="line">LOAD CSV WITH HEADERS FROM &quot;file:///attributes.csv&quot; AS line</span><br><span class="line">MATCH (entity1:NewNode&#123;title:line.Entity&#125;), (entity2:HudongItem&#123;title:line.Attribute&#125;)</span><br><span class="line">CREATE (entity1)-[:RELATION &#123; type: line.AttributeName &#125;]-&gt;(entity2)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询</span></span><br><span class="line">MATCH (n:HudongItem) RETURN n LIMIT 25</span><br></pre></td></tr></table></figure><h3 id="postgres"><a href="#postgres" class="headerlink" title="postgres"></a>postgres</h3><ul><li>docker-compose.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:9.6.2</span> <span class="string">//</span> <span class="string">postgres</span> <span class="string">镜像</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span>  <span class="string">//映射端口号</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">$&#123;pwd&#125;</span>  <span class="string">//密码</span></span><br><span class="line">      <span class="attr">PGDATA:</span> <span class="string">/var/lib/postgresql/data/pgdata</span> <span class="string">//数据存储文件夹</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/server/pg_data/data:/var/lib/postgresql/data/pgdata</span> <span class="string">//将数据映射到对应的路径</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">docker exec -it pushserver_db_1 psql -U postgres</span><br></pre></td></tr></table></figure><ul><li>docker</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment">#############</span></span><br><span class="line">  <span class="comment"># Kafka</span></span><br><span class="line">  <span class="comment">#############</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">confluentinc/cp-zookeeper</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2181:2181&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ZOOKEEPER_CLIENT_PORT:</span> <span class="number">2181</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">confluentinc/cp-kafka</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9092:9092&quot;</span>  </span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="string">localhost:2181</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="string">PLAINTEXT://localhost:9092</span></span><br><span class="line">      <span class="attr">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class="number">1</span> <span class="comment"># We have only 1 broker, so offsets topic can only have one replication factor.</span></span><br><span class="line"><span class="comment">######</span></span><br><span class="line"><span class="comment"># 负责读取所提供topic的记录并将其插入PostgreSQL。</span></span><br><span class="line"><span class="comment">######</span></span><br><span class="line">  <span class="attr">connect:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">confluentinc/cp-kafka-connect</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka-connect</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8083:8083&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/connect-plugins:/etc/kafka-connect/jars</span> <span class="comment"># in this volume is located the postgre driver.</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CONNECT_BOOTSTRAP_SERVERS:</span> <span class="string">kafka:9092</span></span><br><span class="line">      <span class="attr">CONNECT_REST_PORT:</span> <span class="number">8083</span> <span class="comment"># Kafka connect creates an endpoint in order to add connectors</span></span><br><span class="line">      <span class="attr">CONNECT_REST_ADVERTISED_HOST_NAME:</span> <span class="string">&quot;kafka-connect&quot;</span></span><br><span class="line">      <span class="attr">CONNECT_GROUP_ID:</span> <span class="string">kafka-connect</span></span><br><span class="line">      <span class="attr">CONNECT_ZOOKEEPER_CONNECT:</span> <span class="string">zookeeper:2181</span></span><br><span class="line">      <span class="attr">CONNECT_CONFIG_STORAGE_TOPIC:</span> <span class="string">kafka-connect-config</span></span><br><span class="line">      <span class="attr">CONNECT_OFFSET_STORAGE_TOPIC:</span> <span class="string">kafka-connect-offsets</span></span><br><span class="line">      <span class="attr">CONNECT_STATUS_STORAGE_TOPIC:</span> <span class="string">kafka-connect-status</span></span><br><span class="line">      <span class="attr">CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR:</span> <span class="number">1</span> <span class="comment"># We have only 1 broker, so we can only have 1 replication factor.</span></span><br><span class="line">      <span class="attr">CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR:</span> <span class="number">1</span> </span><br><span class="line">      <span class="attr">CONNECT_STATUS_STORAGE_REPLICATION_FACTOR:</span> <span class="number">1</span> </span><br><span class="line">      <span class="attr">CONNECT_KEY_CONVERTER:</span> <span class="string">&quot;org.apache.kafka.connect.storage.StringConverter&quot;</span> <span class="comment"># We receive a string as key and a json as value</span></span><br><span class="line">      <span class="attr">CONNECT_VALUE_CONVERTER:</span> <span class="string">&quot;org.apache.kafka.connect.json.JsonConverter&quot;</span></span><br><span class="line">      <span class="attr">CONNECT_INTERNAL_KEY_CONVERTER:</span> <span class="string">&quot;org.apache.kafka.connect.storage.StringConverter&quot;</span></span><br><span class="line">      <span class="attr">CONNECT_INTERNAL_VALUE_CONVERTER:</span> <span class="string">&quot;org.apache.kafka.connect.json.JsonConverter&quot;</span></span><br><span class="line">      <span class="attr">CONNECT_PLUGIN_PATH:</span> <span class="string">/usr/share/java,/etc/kafka-connect/jars</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#############</span></span><br><span class="line">  <span class="comment"># PostgreSQL</span></span><br><span class="line">  <span class="comment">#############</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgresql</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">influencers</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 乌班图</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -itd --name ubuntu-test ubuntu</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 centos</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -itd --name centos-test centos:centos7</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 nginx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name nginx-test -p 8080:80 -d nginx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 node.js</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -itd --name node-test node</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it node-test /bin/bash</span></span><br><span class="line">root@6c5d265c68a6:/# node -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">php + nginx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name  myphp-fpm -v ~/nginx/www:/www  -d php:5.6-fpm</span></span><br><span class="line">mkdir ~/nginx/conf/conf.d </span><br><span class="line">vim test.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">php:9000: 表示 php-fpm 服务的 URL，下面我们会具体说明。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/www/: 是 myphp-fpm 中 php 文件的存储路径，映射到本地的 ~/nginx/www 目录。</span></span><br><span class="line">------------------------------------</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   php:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  /www/$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">docker run --name php-nginx -p 8083:80 -d \</span><br><span class="line">    -v ~/nginx/www:/usr/share/nginx/html:ro \</span><br><span class="line">    -v ~/nginx/conf/conf.d:/etc/nginx/conf.d:ro \</span><br><span class="line">    --link myphp-fpm:php \</span><br><span class="line">    nginx</span><br><span class="line">vim ~/nginx/www/index.php</span><br><span class="line">-------------------------------------------------</span><br><span class="line">&lt;?php</span><br><span class="line">echo phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">--------------------------------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器打开 http://127.0.0.1:8083/index.php</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tomcat</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name tomcat -p 8080:8080 -v <span class="variable">$PWD</span>/test:/usr/local/tomcat/webapps/test -d tomcat</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">python</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run  -v <span class="variable">$PWD</span>/myapp:/usr/src/myapp  -w /usr/src/myapp python:3.5 python hello.py</span></span><br><span class="line">vim hello.py</span><br><span class="line">-----------------------------</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">print(&quot;Hello, World!&quot;);</span><br><span class="line">-----------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redis</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -itd --name redis-test -p 6379:6379 redis</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it redis-test /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongo</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -itd --name mongo -p 27017:27017 mongo --auth</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it mongo mongo admin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个名为 admin，密码为 123456 的用户。</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> db.createUser(&#123; user:<span class="string">&#x27;admin&#x27;</span>,<span class="built_in">pwd</span>:<span class="string">&#x27;123456&#x27;</span>,roles:[ &#123; role:<span class="string">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span>&#125;,<span class="string">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">尝试使用上面创建的用户信息进行连接。</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.auth(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apach</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -p 80:80 -v <span class="variable">$PWD</span>/www/:/usr/local/apache2/htdocs/ -v <span class="variable">$PWD</span>/conf/httpd.conf:/usr/local/apache2/conf/httpd.conf -v <span class="variable">$PWD</span>/logs/:/usr/local/apache2/logs/ -d httpd</span></span><br></pre></td></tr></table></figure><h3 id="mongo"><a href="#mongo" class="headerlink" title="mongo"></a>mongo</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ma:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">bolingcavalry/ubuntu16-mongodb349:0.0.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ma</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/sh</span> <span class="string">-c</span> <span class="string">&#x27;mongod --replSet replset0&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">mb:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">bolingcavalry/ubuntu16-mongodb349:0.0.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mb</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ma</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/sh</span> <span class="string">-c</span> <span class="string">&#x27;mongod --replSet replset0&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">mc:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">bolingcavalry/ubuntu16-mongodb349:0.0.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mc</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mb</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/sh</span> <span class="string">-c</span> <span class="string">&#x27;mongod --replSet replset0&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">rockmongo:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">javierjeronimo/rockmongo:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rockmongo</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mc</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8088:80&quot;</span> </span><br><span class="line">    <span class="attr">links:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">ma:mongodba</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> </span><br></pre></td></tr></table></figure><p>如上述yml脚本所示，ma、mb、mc这三个容器组成了副本集集群，rockmongo容器启动后，/etc/hosts文件中有了ma的ip配置(links属性)；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置集群</span></span><br><span class="line">docker exec -it ma /bin/bash</span><br><span class="line">mongo</span><br><span class="line">use admin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行以下命令，配置机器信息，其中的use replset0是启动mongodb时候的–replSet参数，定义副本集的<span class="built_in">id</span></span></span><br><span class="line">config = &#123; _id:&quot;replset0&quot;, members:[&#123;_id:0,host:&quot;172.19.0.2:27017&quot;&#125;,&#123;_id:1,host:&quot;172.19.0.3:27017&quot;&#125;,&#123;_id:2,host:&quot;172.19.0.4:27017&quot;&#125;]&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行rs.initiate(config)初始化配置；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行rs.status()查看状态</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加数据</span></span><br><span class="line">use school</span><br><span class="line">db.student.insert(&#123;name:&quot;Tom&quot;, age:16&#125;)</span><br><span class="line">db.student.insert(&#123;name:&quot;Jerry&quot;, age:15&#125;)</span><br><span class="line">db.student.insert(&#123;name:&quot;Mary&quot;, age:9&#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Rockmongo</span></span><br><span class="line">docker exec -it rockmongo /bin/bash</span><br><span class="line">vi /app/config.php</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">两个配置分别是数据库名称和mongodb的IP，分别改成”school”和”mongodba”</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongo_name  mongo</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongo_host  mongodba</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开浏览器，输入http://localhost:8088，看到rockmongo的登录页面 用户名密码都是admin</span></span><br></pre></td></tr></table></figure><h3 id="mongo-1"><a href="#mongo-1" class="headerlink" title="mongo"></a>mongo</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongo-container:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:3.4</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">MONGO_DATA_DIR=/data/db</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">MONGO_LOG_DIR=/data/logs</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">MONGO_INITDB_DATABASE=test</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_USERNAME=root</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD=123456</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;27017:27017&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mongodb/data:/data/db&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mongodb/logs:/data/logs&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/data/mongo-entrypoint/:/docker-entrypoint-initdb.d/&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mongod</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">  <span class="comment"># web 管理页面</span></span><br><span class="line">  <span class="attr">mongo-express:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo-express</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo-express</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongo:mongo</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;27018:8081&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ME_CONFIG_OPTIONS_EDITORTHEME:</span> <span class="number">3024</span><span class="string">-night</span></span><br><span class="line">      <span class="attr">ME_CONFIG_MONGODB_SERVER:</span> <span class="string">mongo</span></span><br><span class="line">      <span class="attr">ME_CONFIG_MONGODB_ADMINUSERNAME:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">ME_CONFIG_MONGODB_ADMINPASSWORD:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">ME_CONFIG_BASICAUTH_USERNAME:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">ME_CONFIG_BASICAUTH_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">      </span><br><span class="line">      </span><br></pre></td></tr></table></figure><p>在/data/mongo-entrypoint目录下创建docker-entrypoint-initdb.sh初始化数据库脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Creating mongo users...&quot;</span></span><br><span class="line">mongo admin --host localhost -u root -p 123456 --<span class="built_in">eval</span> <span class="string">&quot;db.createUser(&#123;user: &#x27;admin&#x27;, pwd: &#x27;123456&#x27;, roles: [&#123;role: &#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27;&#125;]&#125;);&quot;</span></span><br><span class="line">mongo admin -u root -p 123456 &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">use hi</span></span><br><span class="line"><span class="string">db.createUser(&#123;user: &#x27;test&#x27;, pwd: &#x27;123456&#x27;, roles:[&#123;role:&#x27;readWrite&#x27;,db:&#x27;hi&#x27;&#125;]&#125;)</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Mongo users created.&quot;</span></span><br></pre></td></tr></table></figure><h3 id="jumpserver"><a href="#jumpserver" class="headerlink" title="jumpserver"></a>jumpserver</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker run --name jms_server -d -p 8011:80 -p 2222:2222 registry.jumpserver.org/public/jumpserver:1.0.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录系统</span></span><br><span class="line">访问 http://127.0.0.1:8011/  用户名和密码分别是 admin 与admin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">管理用户</span></span><br><span class="line">添加资产的前提条件是有一个管理用户，这个管理用户是资产的最高权限账户，堡垒机之后会使用此账户来登录并管理资产，和获取一些统计信息，笔者在资产管理-&gt;管理用户列表中点击创建系统用户按钮，便来到了创建管理用户的页面</span><br><span class="line">在表单中可以看见必须填写用户名，和认证所用的密码或私钥，按照真实情况去填写，比如笔者的资产最高权限账户是 song，密码 123456Ab,那么就如实填写上去。</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">资产管理</span></span><br><span class="line">在添加管理用户之后，便可以添加资产了，添加资产也非常的简单，在资产列表点击创建资产按钮，便来到了添加资产的页面</span><br><span class="line">添加资产需要填写，资产的 IP 地址，以及 SSH 的端口号，以及选择资产的操作系统类型，并且选择用哪一个管理用户。</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统用户</span></span><br><span class="line">在资产管理下还有一个系统用户管理，这个系统用户的使用场景是，有时候需要在很多个目标资产中创建一个普通账户，这时候肯定是十分麻烦；此时便可以通过堡垒机上的系统用户管理来创建一个系统用户；然后下发到目标资产中，这样一来就不需要去目标主机一个个登录然后去创建，因此非常方便，</span><br><span class="line">创建系统用户需输入需要创建的账号，以及选择认证的方式，默认为秘钥方式，也可以将选择框选中去掉，通过密码来认证</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试验证</span></span><br><span class="line">在前面的配置步骤操作完毕后，便可以进行一些常规功能验证，以此来加深对Jumpserver 系统的了解，这些功能测试点有 资产连接测试、用户授权、Web终端、在线会话、命令记录等功能。</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 连接测试的目的是检查资产是否可以被堡垒机所访问，可以在资产列表点击资产名称，便可以进入资产详情页面，右侧有两个按钮，点击刷新按钮，如果能看到左侧的硬件信息发生了变更，就代表此前配置的管理用户没有问题，否则会弹出错误提示框。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 用户授权 当配置资产后，如果想在堡垒机中直接连接终端就还需要给用户授权，授权分为两个步骤，第一步是给web终端账户授权，在会话管理-&gt;终端管理  第二步则是给用户自己本身授权，在授权管理-&gt;资产权限-&gt;创建权限规则中做好相应配置</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># web终端  当给用户授权之后，用户便可以会话管理-&gt;Web终端中与系统进行交互，</span></span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 在线会话 有些时候想看谁在操作服务器，可以很轻松的通过在线会话功能来查看当前有哪些用户在操作终端，在会话管理-&gt;在线会话列表中进行查看，堡垒机最大的作用之一便是审计，如果想知道某个用户在系统中执行了那些命令，可以很方便的在会话管理-&gt;命令记录中进行查看</span></span></span><br></pre></td></tr></table></figure><h3 id="微服务组件"><a href="#微服务组件" class="headerlink" title="微服务组件"></a>微服务组件</h3><p><a href="https://ld246.com/tag/%E4%BA%91%E8%AE%A1%E7%AE%97">https://ld246.com/tag/%E4%BA%91%E8%AE%A1%E7%AE%97</a></p><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">带了 --<span class="built_in">rm</span> 参数，这样在停止容器后容器会自动删除，节省不少时间</span></span><br><span class="line">docker run --rm --name seata-server -d -p 8091:8091 seataio/seata-server:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将配置文件导出到宿主机上</span></span><br><span class="line">docker cp a67c272193c4:/seata-server/resources /app/cloud/seata/conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置文件 registry.conf</span></span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">registry &#123;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;10.0.10.48:8848&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">config &#123;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">file、nacos 、apollo、zk、consul、etcd3</span></span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;10.0.10.48:8848&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 Seata 配置推送到 Nacos</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止容器</span></span><br><span class="line">docker stop a67c272193c4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新启动容器</span></span><br><span class="line">docker run --name  seata-server  \</span><br><span class="line">-d -p 8091:8091 \</span><br><span class="line">-e SEATA_CONFIG_NAME=file:/root/seata-config/registry  \</span><br><span class="line">                 -e SEATA_IP=172.31.0.207 \</span><br><span class="line">-v /app/cloud/seata/conf:/root/seata-config  \</span><br><span class="line">-v /app/cloud/seata/logs:/root/logs \</span><br><span class="line">        seataio/seata-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">客户端改造</span></span><br><span class="line">只需要将 registry.conf 文件放在微服务的 resources 下即可</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">依次启动服务 account-service,product-service,order-service,观察 Seata 日志</span><br></pre></td></tr></table></figure><p>seata db 模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立数据库</span></span><br><span class="line">建立数据库 seata_config，并从 https://github.com/seata/seata/blob/develop/script/server/db/mysql.sql 下载建表语句,导入数据库</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 store.mode 调整为 db</span></span><br><span class="line">在 nacos 配置文件中将 store.mode 这一 DATA ID 调整为 db， 这个也可以通过环境变量 STORE_MODE=db 指定</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改数据库连接  在 nacos 中修改 store.db 的相关配置</span></span><br><span class="line">store.db.url=jdbc:mysql://xxxxxx:3306/seata_config?useUnicode=true</span><br><span class="line">store.db.user=root</span><br><span class="line">store.db.password=xxxxxx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器</span></span><br><span class="line">docker run  --name  seata-server \</span><br><span class="line">    -d -p 8091:8091 \</span><br><span class="line">    -e SEATA_CONFIG_NAME=file:/root/seata-config/registry  \</span><br><span class="line">    -e SEATA_IP=172.31.0.207 \</span><br><span class="line">    -v /app/cloud/seata/conf/resources:/root/seata-config  \</span><br><span class="line">    -v /app/cloud/seata/logs:/root/logs/seata \</span><br><span class="line">    seataio/seata-server</span><br></pre></td></tr></table></figure><p>编写 compose 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/cloud/mysql/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:1.1.4</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PREFER_HOST_MODE=hostname</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MODE=standalone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE_NUM=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_PLATFORM=mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_MASTER_SERVICE_HOST=mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_MASTER_SERVICE_DB_NAME=nacos_config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_MASTER_SERVICE_PORT=3306</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_MASTER_SERVICE_USER=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_MASTER_SERVICE_PASSWORD=123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/cloud/nacos/logs:/home/nacos/logs</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bladex/sentinel-dashboard:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sentinel</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8858:8858&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">seata:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">seataio/seata-server:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seata</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8091:8091&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEATA_CONFIG_NAME=file:/root/seata-config/registry</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEATA_IP=10.0.10.48</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/cloud/seata/conf:/root/seata-config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/cloud/seata/logs:/root/logs</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h1 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><blockquote><p>集群 购买服务器 2核4G *4</p></blockquote><ul><li>购买服务器(在同一IP网段) 按流量付费</li><li>安装docker (xshell 同步功能同时安装)</li></ul><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><p>Docker Engine 1.12 introduces swarm mode that enables you to create a cluster of one or more Docker Engines called a swarm. A swarm consists of one or more nodes: physical or virtual machines running Docker Engine 1.12 or later in swarm mode.</p><p>There are two types of nodes: <a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/nodes/#manager-nodes"><strong>managers</strong></a> and <a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/nodes/#worker-nodes"><strong>workers</strong></a>.</p><p><img src="https://docs.docker.com/engine/swarm/images/swarm-diagram.png" alt="Swarm mode cluster"></p><p>If you haven’t already, read through the <a href="https://docs.docker.com/engine/swarm/">swarm mode overview</a> and <a href="https://docs.docker.com/engine/swarm/key-concepts/">key concepts</a></p><p> 工作节点和管理节点，操作只能在管理节点,主节点之间互通</p><p>Raft 一致性原则</p><h2 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker swarm --help</span><br><span class="line">Usage:docker swarm COMMAND</span><br><span class="line">Commands:</span><br><span class="line">  ca          Display and rotate the root CA</span><br><span class="line">  init        Initialize a swarm</span><br><span class="line">  join        Join a swarm as a node and/or manager</span><br><span class="line">  join-token  Manage join tokens</span><br><span class="line">  leave       Leave the swarm</span><br><span class="line">  unlock      Unlock swarm</span><br><span class="line">  unlock-key  Manage the unlock key</span><br><span class="line">  update      Update the swarm</span><br><span class="line">[root@VM_0_17_centos ~]# docker swarm init --help</span><br><span class="line">Options:</span><br><span class="line">      --advertise-addr string                  Advertised address (format: &lt;ip|interface&gt;[:port])</span><br><span class="line">      # 清除网络</span><br><span class="line">[root@VM_0_17_centos ~]# docker network prune </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询本机ip</span></span><br><span class="line">[root@VM_0_17_centos ~]# ip addr</span><br><span class="line"> 内网地址: 172.16.0.17</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化 主节点</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker swarm init --advertise-addr 172.16.0.17</span><br><span class="line">Swarm initialized: current node (2liicusnbqgsx4yccy1ol57pg) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-606j63asib8rqyrgooyoqz3ru4fbphwfo291ld6gp0lkl2okg4-95s0gi6qysaut762fhji23ijs 172.16.0.17:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run &#x27;docker swarm join-token manager&#x27; and follow the instructions.</span><br></pre></td></tr></table></figure><p>初始化主节点 <code>docker swarm init </code></p><p>加入一个节点 <code>docker swarm join</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取管理令牌 通过令牌加入管理节点</span></span><br><span class="line">docker swarm join-token manager</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取工作节点令牌 通过令牌加入工作节点</span></span><br><span class="line">docker swarm join-token worker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入工作节点  需要开发 2377端口</span></span><br><span class="line">[root@VM-0-16-centos ~]# docker swarm join --token SWMTKN-1-606j63asib8rqyrgooyoqz3ru4fbphwfo291ld6gp0lkl2okg4-95s0gi6qysaut762fhji23ijs 172.16.0.17:2377</span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure><p>查看节点信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker node ls</span><br><span class="line">ID     HOSTNAME      STATUS      AVAILABILITY    MANAGER STATUS    ENGINE VERSION</span><br><span class="line">8q    VM-0-16-centos    Ready     Active                              19.03.12</span><br><span class="line">pg   VM_0_17_centos   Ready     Active            Leader            19.03.11</span><br></pre></td></tr></table></figure><h2 id="Raft协议"><a href="#Raft协议" class="headerlink" title="Raft协议"></a>Raft协议</h2><p>双主双从，加入一个主节点挂了，其他节点能否使用?</p><p>Raft协议: 保证大多数节点存活才能用，只要&gt;1,集群主节点必须大于3台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">离开集群  --force 强制离开</span></span><br><span class="line">[root@VM-0-16-centos ~]# docker swarm leave </span><br><span class="line">Node left the swarm.</span><br></pre></td></tr></table></figure><p><strong>实验</strong>: 两主，停止一个主节点的docker，查看是否集群可用</p><h2 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h2><p>弹性、扩缩容，集群</p><p>docker-compose up 启动的是一个项目，单机</p><p>集群: swarm <code>docker service ls</code></p><p>容器 =&gt; 服务 =&gt; 副本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker service --help</span><br><span class="line">Usage:docker service COMMAND</span><br><span class="line">Commands:</span><br><span class="line">  create      Create a new service</span><br><span class="line">  inspect     Display detailed information on one or more services</span><br><span class="line">  logs        Fetch the logs of a service or task</span><br><span class="line">  ls          List services</span><br><span class="line">  ps          List the tasks of one or more services</span><br><span class="line">  rm          Remove one or more services</span><br><span class="line">  rollback    Revert changes to a service&#x27;s configuration</span><br><span class="line">  scale       Scale one or multiple replicated services</span><br><span class="line">  update      Update a service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">动态创建服务、扩展服务、更新服务</span></span><br></pre></td></tr></table></figure><p>灰度发布</p><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker service create -p 8080:80 --name my-nginx nginx --env TAG=1.0 </span><br><span class="line">pus7kfahb9hrh2e51cohlxxn6</span><br><span class="line">overall progress: 1 out of 1 tasks </span><br><span class="line">1/1: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run 容器启动，不具有扩缩容</span><br><span class="line">docker service 服务启动，具有扩缩容，动态滚动更新</span><br></pre></td></tr></table></figure><p>滚动更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动自己的web 容器</span></span><br><span class="line">docker service create --name web --publish 8080:5000 --network demo yanglf/demo:1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩容</span></span><br><span class="line">docker service scale web=2 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在其他节点使用shell一直发请求，观察服务是否中断</span></span><br><span class="line">sh -c &quot;while true; do curl localhost:8080&amp;&amp;sleep 1;done&quot;</span><br><span class="line">docker service update --image yanglf/demo:2.0 web</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新端口</span></span><br><span class="line">docker service update --publish-rm 8080:5000 --publish-add 8088:5000 web</span><br></pre></td></tr></table></figure><p>查看服务副本数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker service ps my-nginx</span><br><span class="line">ID                  NAME                IMAGE               NODE    DESIRED STATE       CURRENT STATE                ERROR               PORTS</span><br><span class="line">mhevmmsuegvy        my-nginx.1          nginx:latest        VM_0_17_centos      Running             Running about a minute ago     </span><br><span class="line">[root@VM_0_17_centos ~]# docker service inspect my-nginx</span><br></pre></td></tr></table></figure><p>动态扩缩容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker service update --replicas 3 my-nginx</span><br><span class="line">my-nginx</span><br><span class="line">overall progress: 3 out of 3 tasks </span><br><span class="line">1/3: running   [==================================================&gt;] </span><br><span class="line">2/3: running   [==================================================&gt;] </span><br><span class="line">3/3: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged </span><br><span class="line">[root@VM_0_17_centos ~]# </span><br><span class="line">[root@VM_0_17_centos ~]# docker service update --replicas 1 my-nginx</span><br><span class="line">my-nginx</span><br><span class="line">overall progress: 1 out of 1 tasks </span><br><span class="line">1/1: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">动态扩缩容 等同于 update</span> </span><br><span class="line">[root@VM_0_17_centos ~]# docker service scale my-nginx=2</span><br></pre></td></tr></table></figure><p>服务在集群中的任意节点都能访问，服务可以动态扩缩容来实现高可用</p><p>移除服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker service rm my-nginx</span><br><span class="line">my-nginx</span><br><span class="line">[root@VM_0_17_centos ~]# docker service ls</span><br><span class="line">ID     NAME                MODE                REPLICAS    IMAGE      PORTS</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有服务</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker service rm $(docker service ls -q)</span><br></pre></td></tr></table></figure><p>多容器通讯</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主节点创建网络</span></span><br><span class="line">[root@fengerous ~]# docker network create -d overlay demo</span><br><span class="line">[root@fengerous ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">9fe7073ffba4        bridge              bridge              local</span><br><span class="line">yr5lfzyaszne        demo                overlay             swarm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器一:Mysql</span></span><br><span class="line">docker service create --name mysql --env MYSQL_ROOT_PASSWORD=root --env MYSQL_DATABASE=wordpress --network=demo --mount type=volume,source=myql-data,destination=/var/lib/mysql mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器二:wordpress</span></span><br><span class="line">docker service create --name wordpress -p 8088:80 --env WORDPRESS_DB_PASSWPRD=root --env WORDPRESS_DB_HOST=mysql --network=demo  wordpress</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只有从节点部署容器，会自动同步网络</span></span><br><span class="line">[root@VM-0-16-centos ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">c117e7df06b3        bridge              bridge              local</span><br><span class="line">yr5lfzyaszne        demo                overlay             swarm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主节点</span></span><br><span class="line">[root@fengerous ~]# docker service ls</span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE               PORTS</span><br><span class="line">mldhgx4ndzvj        db                  replicated          1/1                 mysql:5.7.27        </span><br><span class="line">tag74nlj1ebs        my-nginx            replicated          1/1                 nginx:latest        *:8080-&gt;80/tcp</span><br><span class="line">ixj96deflg9v        mysql               replicated          1/1                 mysql:latest        </span><br><span class="line">ru99lswx1qhc        wordpress           replicated          1/1                 wordpress:latest    *:8088-&gt;80/tcp</span><br></pre></td></tr></table></figure><p>docker swarm会自动同步容器状态，如果在从节点停止一个容器副本，swarm检测到副本数量不一致，会自动重新拉取服务，保证服务副本数量可用</p><blockquote><p>负载均衡 Routing Mesh</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@fengerous ~]# docker service create --name whoami -p 8000:8000 --network demo -d jwilder/whoami</span><br><span class="line">[root@VM-0-16-centos ~]#  curl 127.0.0.1:8000</span><br><span class="line">I&#x27;m 4f5bdf94398b</span><br><span class="line">[root@VM-0-16-centos ~]# docker service create --name client -d --network demo busybox sh -c &quot;while true; do sleep 3600;done&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 busybox 容器</span></span><br><span class="line">[root@VM-0-16-centos ~]# docker exec -it f9f8 sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 <span class="built_in">whoami</span> ip</span></span><br><span class="line"><span class="meta prompt_">/# </span><span class="language-bash">ping <span class="built_in">whoami</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩容 <span class="built_in">whoami</span></span></span><br><span class="line">[root@fengerous ~]# docker service scale whoami =2</span><br><span class="line">[root@fengerous ~]# docker service ps whoami</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">继续ping <span class="built_in">whoami</span> 看到的ip地址 不变   -&gt; 虚拟ip</span></span><br><span class="line">[root@VM-0-16-centos ~]# docker exec -it f9f8 sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 <span class="built_in">whoami</span> ip</span></span><br><span class="line"><span class="meta prompt_">/# </span><span class="language-bash">ping <span class="built_in">whoami</span></span></span><br><span class="line"><span class="meta prompt_">/# </span><span class="language-bash">nslookup <span class="built_in">whoami</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">whoami</span> 的真实ip</span></span><br><span class="line"><span class="meta prompt_">/# </span><span class="language-bash">nslookup tasks.whoami</span></span><br></pre></td></tr></table></figure><p>Internal: 通过访问虚拟ip，会自动负载到容器的真实ip，每个容器内部都有一个DNS Server 起到负载均衡的作用</p><p>Ingress: 通过 lvs 把，所以通过主从节点都可以访问到启动的容器</p><h2 id="概念总结"><a href="#概念总结" class="headerlink" title="概念总结"></a>概念总结</h2><p><strong>Swarm</strong></p><p>集群的管理编排，docker可以初始化一个主节点，其他节点加入(管理者、工作者)</p><p><strong>Node</strong></p><p>就是一个docker节点，多个节点组成一个集群(管理者、工作者)</p><p><strong>Service</strong></p><p>任务,可以在管理节点或者工作节点来运行，核心</p><p><strong>Task</strong></p><p>容器内的命令</p><p>命令 -&gt; 管理 -&gt; api -&gt; 调度 -&gt; 工作节点(创建task任务维护创建)</p><p>调整 service 运行模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--mode string</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认</span></span><br><span class="line">docker service create --mode replicated --name mytomcat tomcat:7</span><br><span class="line">docker service create --mode global --name mytomcat tomcat:7</span><br></pre></td></tr></table></figure><p>拓展:网络模式  “PublishMode”:”ingress”</p><p>Swarm:</p><p>Overlay</p><p>ingress  特殊的 Overlay，具有负载均衡的功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">plljkigm74lk        ingress             overlay             swarm</span><br><span class="line">[root@VM_0_17_centos ~]# docker network inspect ingress</span><br><span class="line">   &quot;Peers&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;492583caaf45&quot;,</span><br><span class="line">                &quot;IP&quot;: &quot;172.16.0.17&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>虽然 docker在4台机器上，但是用的网络是同一个，ingress网络</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Docker-Compose&quot;&gt;&lt;a href=&quot;#Docker-Compose&quot; class=&quot;headerlink&quot; title=&quot;Docker Compose&quot;&gt;&lt;/a&gt;Docker Compose&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;官方定义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义运行多个容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;YAML配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. To learn more about all the features of Compose, see &lt;a href=&quot;https://docs.docker.com/compose/#features&quot;&gt;the list of features&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="http://yanglf.online/categories/docker/"/>
    
    
    <category term="docker" scheme="http://yanglf.online/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker进阶</title>
    <link href="http://yanglf.online/p/abdfa13a.html"/>
    <id>http://yanglf.online/p/abdfa13a.html</id>
    <published>2023-02-27T08:05:25.000Z</published>
    <updated>2023-03-02T03:47:27.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><p>如果数据在容器中，那么容器删除，数据也会丢失!  数据持久化</p><p>Docker 容器产生的数据，同步到本地，也就是将容器的目录挂载到Linux上</p><p><strong>容器的持久化和同步操作，容器间数据共享</strong></p><span id="more"></span><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote><p>方式一 :  命令挂载</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">映射 容器 /home 目录到主机的 /home/ceshi 目录</span></span><br><span class="line">[root@VM_0_17_centos home]# docker run -it -v  /home/ceshi:/home centos /bin/bash</span><br><span class="line">[root@33c02e8d9f17 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@33c02e8d9f17 /]# cd /home</span><br><span class="line">[root@33c02e8d9f17 home]# ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器 /home 下操作会自动同步到主机 /home/ceshi 目录</span></span><br><span class="line">[root@33c02e8d9f17 home]# touch test.java</span><br><span class="line">[root@33c02e8d9f17 home]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@33c02e8d9f17 home]# ls</span><br><span class="line">a.jsontest.java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@VM_0_17_centos home]# cd /home/ceshi</span><br><span class="line">[root@VM_0_17_centos ceshi]# ls</span><br><span class="line">test.java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主机 /home/ceshi 目录下的操作会自动同步到 容器 /home 目录</span></span><br><span class="line">[root@VM_0_17_centos ceshi]# touch a.json</span><br><span class="line">[root@VM_0_17_centos ceshi]# ls</span><br><span class="line">a.json  test.java</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 容器元数据 挂载参数  双向绑定</span></span><br><span class="line">[root@VM_0_17_centos ceshi]# docker inspect 33c02e8d9f17</span><br><span class="line">  &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/home/ceshi&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/home&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止容器 ，数据同步到主机</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止容器，在主机修改映射的目录 /home/ceshi 下的 a.json 文件</span></span><br><span class="line">[root@33c02e8d9f17 home]# exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器  主机 /home/ceshi 修改的文件会同步到 容器 /home 目录</span> </span><br><span class="line">[root@VM_0_17_centos home]# docker start 33c02e8d9f17</span><br><span class="line">[root@VM_0_17_centos home]# docker exec -it 33c02e8d9f17 /bin/bash</span><br><span class="line">[root@33c02e8d9f17 /]# cd /home</span><br><span class="line">[root@33c02e8d9f17 home]# ls</span><br><span class="line">a.jsontest.java</span><br><span class="line">[root@33c02e8d9f17 home]# cat a.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;:&quot;张三&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MySql-数据持久化"><a href="#MySql-数据持久化" class="headerlink" title="MySql 数据持久化"></a>MySql 数据持久化</h2><p><a href="https://hub.docker.com/_/mysql">https://hub.docker.com/_/mysql</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取镜像</span></span><br><span class="line">[root@VM_0_17_centos home]# docker pull mysql:5.7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器，需要做数据挂载   安装启动mysql需要配置密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官方测试 docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 mysql</span></span><br><span class="line"> -d 后台运行</span><br><span class="line"> -p 端口映射</span><br><span class="line"> -v 卷挂载</span><br><span class="line"> -e 环境变量</span><br><span class="line"> --name 容器名称</span><br><span class="line">[root@VM_0_17_centos home]# docker run -d -p 3307:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin123 --name mysql01 mysql:5.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用本地  navicate 测试连接</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在本地创建数据库 <span class="built_in">test</span></span></span><br><span class="line">[root@VM_0_17_centos data]# cd /home/mysql/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地的 data 映射目录出现 <span class="built_in">test</span> 文件</span></span><br><span class="line">[root@VM_0_17_centos data]# ls</span><br><span class="line">auto.cnf    ca.pem           client-key.pem  ibdata1      ib_logfile1  mysql               private_key.pem  server-cert.pem  sys</span><br><span class="line">ca-key.pem  client-cert.pem  ib_buffer_pool  ib_logfile0  ibtmp1       performance_schema  public_key.pem   server-key.pem   test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除容器</span></span><br><span class="line">[root@VM_0_17_centos data]# docker rm -f mysql01</span><br><span class="line">mysql01</span><br><span class="line">[root@VM_0_17_centos data]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND             CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">bd726942e644        portainer/portainer   &quot;/portainer&quot;        2 hours ago         Up 2 hours          0.0.0.0:8088-&gt;9000/tcp   festive_lichterman</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地映射的 目录 依旧存在</span></span><br><span class="line">[root@VM_0_17_centos data]# ls</span><br><span class="line">auto.cnf    ca.pem           client-key.pem  ibdata1      ib_logfile1  mysql               private_key.pem  server-cert.pem  sys</span><br><span class="line">ca-key.pem  client-cert.pem  ib_buffer_pool  ib_logfile0  ibtmp1       performance_schema  public_key.pem   server-key.pem   test</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名挂载</span></span><br><span class="line"> -v 容器内路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名挂载 nginx</span></span><br><span class="line">root@VM_0_17_centos data]#  docker run -d -P --name nginx2 -v /etc/nginx nginx</span><br><span class="line">34568a84a3deefb1678350836ded7dd8c7deb7f32f2d9a61570270063de43117</span><br><span class="line">[root@VM_0_17_centos data]# </span><br><span class="line">[root@VM_0_17_centos data]# </span><br><span class="line">[root@VM_0_17_centos data]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">34568a84a3de        nginx                 &quot;nginx -g &#x27;daemon of…&quot;   5 seconds ago       Up 3 seconds        0.0.0.0:32768-&gt;80/tcp    nginx2</span><br><span class="line">bd726942e644        portainer/portainer   &quot;/portainer&quot;      </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有卷的情况</span></span><br><span class="line">[root@VM_0_17_centos data]# docker volume  ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               1f211161814927a74c78ba8251a4cc43de6b1c54f9ee06fcad41715b828d1af9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">具名挂载  挂载的时候给卷取个名字 juming-nginx</span></span><br><span class="line">  -v 卷名:容器内路径</span><br><span class="line">[root@VM_0_17_centos data]# docker run -d -P --name nginx6 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">a034c9ecaec10f66b8e904a29f602ca4715a9c1ac4c1af5057d407ca0a8ad2c3</span><br><span class="line">[root@VM_0_17_centos data]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">a034c9ecaec1        nginx                 &quot;nginx -g &#x27;daemon of…&quot;   7 seconds ago       Up 7 seconds        0.0.0.0:32769-&gt;80/tcp    nginx6</span><br><span class="line">34568a84a3de        nginx                 &quot;nginx -g &#x27;daemon of…&quot;   6 minutes ago       Up 6 minutes        0.0.0.0:32768-&gt;80/tcp    nginx2</span><br><span class="line">bd726942e644        portainer/portainer   &quot;/portainer&quot;             2 hours ago         Up 2 hours          0.0.0.0:8088-&gt;9000/tcp   festive_lichterman</span><br><span class="line">[root@VM_0_17_centos data]# docker volume list</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               juming-nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看卷挂载的具体路径</span></span><br><span class="line">[root@VM_0_17_centos data]# docker volume inspect juming-nginx</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2020-05-24T19:11:25+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;juming-nginx&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>所有docker容器内的卷，没有指定目录，默认都在/var/lib/docker/volumes/xx 下</em></p><p>我们通过具名挂载可以很方便的找到我们挂载的卷，大多数情况使用的<code>具名挂载</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如何确定匿名挂载和具名挂载，还是指定路径挂载</span></span><br><span class="line">  -v 容器内路径   # 匿名挂载</span><br><span class="line">  -v 卷名:容器内路径 # 具名挂载</span><br><span class="line">  -v /宿主机路径:容器内路径   # 指定路径挂载</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 -v 容器内路径:  ro  rw 可以改变读写权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ro <span class="built_in">readonly</span></span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rw readwrite</span></span><br><span class="line">docker run -d -P --name nginx6 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx6 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ro 这个路径只能通过宿主机操作，容器内部无法操作</span></span><br></pre></td></tr></table></figure><h2 id="初识DockerFile"><a href="#初识DockerFile" class="headerlink" title="初识DockerFile"></a>初识DockerFile</h2><hr><p>DockerFile 就是用来构架docker镜像的脚本文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 一个 dockerfile文件，名字可以随机，但是建议 dockerfile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内容</span></span><br><span class="line"></span><br><span class="line">FROM centos</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名挂载, volume1 volume2 为容器内的两个目录</span></span><br><span class="line">VOLUME [&quot;volume1&quot;,&quot;volume2&quot;]</span><br><span class="line">CMD echo &quot;----end------&quot;</span><br><span class="line">CMD /bin/bash              </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 镜像</span></span><br><span class="line">[root@VM_0_17_centos docker-test-volume]# docker build -f dockerfile1 -t ylf/centos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">470671670cac</span></span><br><span class="line">Step 2/4 : VOLUME [&quot;volume1&quot;,&quot;volume2&quot;]</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> baa7d85a9f4d</span></span><br><span class="line">Removing intermediate container baa7d85a9f4d</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">054c5200f9f6</span></span><br><span class="line">Step 3/4 : CMD echo &quot;----end------&quot;</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 65e318797c77</span></span><br><span class="line">Removing intermediate container 65e318797c77</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">58750a81e30c</span></span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 18fe869d393a</span></span><br><span class="line">Removing intermediate container 18fe869d393a</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">52d9780faf64</span></span><br><span class="line">Successfully built 52d9780faf64</span><br><span class="line">Successfully tagged ylf/centos:latest</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动构建的镜像</span></span><br><span class="line">[root@VM_0_17_centos docker-test-volume]# docker run -it 52d9780faf64 /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现 dockerfile 中的 volume1  volume2 目录自动挂载了</span></span><br><span class="line">[root@830dcd8aef02 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume1  volume2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看匿名挂载卷在宿主机的映射地址</span></span><br><span class="line">[root@VM_0_17_centos ceshi]# docker  inspect 830dcd8aef02</span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;62cf22d535cfe580511713654fa7423de04d76bdda14631a0c33504d578d796d&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/62cf22d535cfe580511713654fa7423de04d76bdda14631a0c33504d578d796d/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;volume1&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种方式用的比较多，因为我们通常会自己构建镜像</p><p>加入构建镜像的时候没有挂载卷，可以通过手动挂载 -v 卷名:容器内路径</p><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><hr><p>多个mysql 数据同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos test]# docker run -it --name centos01 ylf/centos</span><br><span class="line">[root@45fd04d3576b /]# ls -l</span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x  2 root root 4096 May 11  2019 home</span><br><span class="line">drwxr-xr-x  2 root root 4096 May 30 07:23 volume1</span><br><span class="line">drwxr-xr-x  2 root root 4096 May 30 07:23 volume2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 --volumes-from 实现两个容器之间数据的共享</span></span><br><span class="line">[root@VM_0_17_centos test]# docker run -it --name centos02 --volumes-from centos01  ylf/centos</span><br><span class="line">[root@4704485c5d82 /]# ls -l</span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x  2 root root 4096 May 30 07:23 volume1</span><br><span class="line">drwxr-xr-x  2 root root 4096 May 30 07:23 volume2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@VM_0_17_centos test]# docker run -it --name centos03 --volumes-from centos01  ylf/centos</span><br><span class="line">[root@e8f75c53d709 /]# ls -l</span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x   2 root root 4096 May 30 07:29 volume1</span><br><span class="line">drwxr-xr-x   2 root root 4096 May 30 07:23 volume2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 centos01 容器 后，数据卷数据依然存在</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据卷之间是一种拷贝的关系</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多个 mysql/redis 数据共享</span></span><br></pre></td></tr></table></figure><blockquote><p>多个 mysql 数据共享</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos home]# docker run -d -p 3307:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin123 --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line">[root@VM_0_17_centos home]# docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=admin123 --volumes-from mysql01 --name mysql0 mysql:5.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以实现两个容器数据同步</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>  容器配置信息之间的传递，数据卷容器的生命周期一直持续到没有容器使用为止</p><p>  但是一旦持久化到了本地，本地的数据是不会删除的</p><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h2 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h2><p>dockerfile 是用来构建docker镜像的脚本</p><p>构建步骤:</p><ol><li>编写一个dockerfile 文件</li><li>docker build 构建镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像</li></ol><p><a href="https://github.com/CentOS/sig-cloud-instance-images/blob/b521221b5c8ac3ac88698e77941a2414ce6e778d/docker/Dockerfile">centos 镜像文件</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">ADD centos-7-x86_64-docker.tar.xz /</span><br><span class="line"></span><br><span class="line">LABEL \</span><br><span class="line">    org.label-schema.schema-version=&quot;1.0&quot; \</span><br><span class="line">    org.label-schema.name=&quot;CentOS Base Image&quot; \</span><br><span class="line">    org.label-schema.vendor=&quot;CentOS&quot; \</span><br><span class="line">    org.label-schema.license=&quot;GPLv2&quot; \</span><br><span class="line">    org.label-schema.build-date=&quot;20200504&quot; \</span><br><span class="line">    org.opencontainers.image.title=&quot;CentOS Base Image&quot; \</span><br><span class="line">    org.opencontainers.image.vendor=&quot;CentOS&quot; \</span><br><span class="line">    org.opencontainers.image.licenses=&quot;GPL-2.0-only&quot; \</span><br><span class="line">    org.opencontainers.image.created=&quot;2020-05-04 00:00:00+01:00&quot;</span><br><span class="line"></span><br><span class="line">CMD [&quot;/bin/bash&quot;]</span><br></pre></td></tr></table></figure><p>很多官方镜像都是基础包，很多功能没有，我们通常需要自己制作镜像</p><h2 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h2><p>很多指令:</p><ol><li>每个保留关键字都必须是大写字母</li><li>从上往下依次执行</li><li>每个指令都会创建一个新的镜像层，并提交</li></ol><p><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=4047443406,3367621745&fm=11&gp=0.jpg" alt="img"></p><p>dockerfile 是面向开发的</p><p><strong>步骤</strong></p><p>DockerFile：构建文件，定义了一切步骤，源代码</p><p>DockerImage: 通过DockerFile构建生成的镜像，最终发布运行的产品</p><p>Docker容器: 镜像运行起来提供服务的</p><h2 id="DockerFile指令"><a href="#DockerFile指令" class="headerlink" title="DockerFile指令"></a>DockerFile指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM   # 基础镜像，一切从这里构建</span><br><span class="line">MAINTAINER  # 镜像是谁写的，姓名+邮箱</span><br><span class="line">RUN     # 镜像构建时候运行的命令</span><br><span class="line">ADD     # 步骤,添加文件，如果是压缩包，添加并解压</span><br><span class="line">WORKDIR  # 镜像的工作目录</span><br><span class="line">VOLUME    # 挂载的目录</span><br><span class="line">EXPOSE    # 暴露端口，相当于-p</span><br><span class="line">CMD       # 指定容器启动时的命令，只有一个会生效，会被替换</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CMD  <span class="built_in">ls</span> -a    运行  docker  run -l 时，实际会执行  -l 命令，运行失败</span></span><br><span class="line">ENTRYPOINT  # 指定容器启动时的命令，会追加命令</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ENTRYPOINT  <span class="built_in">ls</span> -a    运行  docker  run -l 时，实际会执行  <span class="built_in">ls</span> -a -l 命令，运行成功</span></span><br><span class="line">ONBUILD    # 当构建一个被继承的 DockerFile 时,就会运行这个命令,是个触发指令</span><br><span class="line">COPY       # 类似 ADD ,复制文件到镜像，但是不会解压压缩包</span><br><span class="line">ENV        # 构建的时候，设置环境变量,相当 -e 命令</span><br></pre></td></tr></table></figure><p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=268974649,2607019911&fm=26&gp=0.jpg" alt="img"></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>Docker Hub 中 99%的镜像都是从 scratch 开始构建的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">ADD centos-7-x86_64-docker.tar.xz /</span><br><span class="line"></span><br><span class="line">LABEL \</span><br><span class="line">    org.label-schema.schema-version=&quot;1.0&quot; \</span><br><span class="line">    org.label-schema.name=&quot;CentOS Base Image&quot; \</span><br><span class="line">    org.label-schema.vendor=&quot;CentOS&quot; \</span><br><span class="line">    org.label-schema.license=&quot;GPLv2&quot; \</span><br><span class="line">    org.label-schema.build-date=&quot;20200504&quot; \</span><br><span class="line">    org.opencontainers.image.title=&quot;CentOS Base Image&quot; \</span><br><span class="line">    org.opencontainers.image.vendor=&quot;CentOS&quot; \</span><br><span class="line">    org.opencontainers.image.licenses=&quot;GPL-2.0-only&quot; \</span><br><span class="line">    org.opencontainers.image.created=&quot;2020-05-04 00:00:00+01:00&quot;</span><br><span class="line"></span><br><span class="line">CMD [&quot;/bin/bash&quot;]</span><br></pre></td></tr></table></figure><blockquote><p>创建一个自己的 centos</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 编写 DockerFile 文件</span></span><br><span class="line">[root@VM_0_17_centos test]# cat mycontos </span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">MAINTAINER  yanglf&lt;185601452@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &#x27;------end-----------------&#x27;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 构建镜像 docker build -f dockerfile文件 -t 镜像名:[TAG] 构建目录</span></span><br><span class="line">[root@VM_0_17_centos test]# docker build -f mycontos -t mycentos:1.0 .</span><br><span class="line">Successfully built 1d8b121d21ab</span><br><span class="line">Successfully tagged mycentos:1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 运行测试</span></span><br><span class="line">[root@VM_0_17_centos test]# docker run -it mycentos:2.0</span><br><span class="line">[root@3bbc3d804cd1 local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@3bbc3d804cd1 local]# ifconfig</span><br></pre></td></tr></table></figure><p>原生的centos镜像没有ifconfig、vim 命令</p><p>我们的镜像新增了一些命令，设置了工作目录 /usr/local</p><p><strong>可以列出镜像的变更历史</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos test]# docker history 1d8b121d21ab</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">1d8b121d21ab        13 minutes ago      /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;/bin…   0B                  </span><br><span class="line">7006bdf5fcf5        13 minutes ago      /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B                  </span><br><span class="line">736cd5ac007f        13 minutes ago      /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B                  </span><br><span class="line">d33c9e5c4345        13 minutes ago      /bin/sh -c #(nop)  EXPOSE 80                    0B                  </span><br><span class="line">a051f031c4ac        13 minutes ago      /bin/sh -c yum -y install net-tools             24.1MB              </span><br><span class="line">e7a61e06eee9        13 minutes ago      /bin/sh -c yum -y install vim                   59.8MB              </span><br><span class="line">ec421aa97423        13 minutes ago      /bin/sh -c #(nop) WORKDIR /$ MYPATH             0B                  </span><br><span class="line">e205f9fbc9a0        13 minutes ago      /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B                  </span><br><span class="line">baf81ff767f9        13 minutes ago      /bin/sh -c #(nop)  MAINTAINER yanglf&lt;1856014…   0B                  </span><br><span class="line">470671670cac        4 months ago        /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B                  </span><br><span class="line">&lt;missing&gt;           4 months ago        /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B                  </span><br><span class="line">&lt;missing&gt;           4 months ago        /bin/sh -c #(nop) ADD file:aa54047c80ba30064…   237MB   </span><br></pre></td></tr></table></figure><blockquote><p>CMD 和 ENTRYPOINT 区别</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD       # 指定容器启动时的命令，只有一个会生效，会被替换</span><br><span class="line">ENTRYPOINT  # 指定容器启动时的命令，会追加命令</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编写 cmd 镜像测试dockerfile</span></span><br><span class="line">[root@VM_0_17_centos test]# cat cmd-test </span><br><span class="line">FROM centos</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-1&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 cmd-testdockerfile</span></span><br><span class="line">[root@VM_0_17_centos test]# </span><br><span class="line">[root@VM_0_17_centos test]# docker build -f cmd-test -t cmd-test .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行镜像 发现 <span class="built_in">ls</span> -a 命令生效</span></span><br><span class="line">[root@VM_0_17_centos test]# docker run 7650c3e24009</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">追加 命令  会替换 CMD [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-1&quot;</span>] 的 替换成  -l 执行错误</span></span><br><span class="line">[root@VM_0_17_centos test]# docker run 7650c3e24009 -l</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused &quot;exec: \&quot;-l\&quot;: executable file not found in $PATH&quot;: unknown.</span><br></pre></td></tr></table></figure><p><strong>测试 ENTRYPOINT</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编写entrypoint 测试  dockerfile</span></span><br><span class="line">[root@VM_0_17_centos test]# cat entrypoint-test </span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-1&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建镜像</span></span><br><span class="line">[root@VM_0_17_centos test]# docker build -f entrypoint-test -t entrypoint-test .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行命令</span></span><br><span class="line">[root@VM_0_17_centos test]# docker run entrypoint-test</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">追加命令是直接追加在 ENTRYPOINT [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-1&quot;</span>] 后边的  <span class="built_in">ls</span> -a -l 执行成功</span></span><br><span class="line">[root@VM_0_17_centos test]# docker run entrypoint-test -l</span><br><span class="line">total 48</span><br><span class="line">lrwxrwxrwx   1 root root    7 May 11  2019 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  340 May 30 09:09 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 30 09:09 etc</span><br></pre></td></tr></table></figure><h2 id="实战-Tomcat镜像"><a href="#实战-Tomcat镜像" class="headerlink" title="实战:Tomcat镜像"></a>实战:Tomcat镜像</h2><ol><li>准备镜像需要的 tomcat 压缩包，jdk 的压缩包</li><li>编写  dockerfile,官方命名<code>Dockerfile</code> ,build 构建时不需要指定文件名</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos package]# touch readme.txt</span><br><span class="line">[root@VM_0_17_centos package]# cat Dockerfile </span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER yanglf&lt;185601452@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/localreadme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u221-linux-x64.tar.gz /usr/local</span><br><span class="line">ADD apache-tomcat-8.0.53.tar.gz /usr/local</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_221</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-8.0.53</span><br><span class="line">ENV CATALINA_BASE /usr/local/apache-tomcat-8.0.53</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-8.0.53/startup.sh &amp; tail -f /usr/local/apache-tomcat-8.0.53/logs/catalina.out</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>构建镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos package]# docker build -t diytomcat .</span><br></pre></td></tr></table></figure><ol start="4"><li>启动镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos package]# docker run -d -p 8088:8080 --name yanglf-tomcat -v /home/yanglf/build/tomcat/test:/usr/local/apache-tomcat-8.0.53/webapps -v /home/yanglf/build/tomcat/logs:/usr/local/apache-tomcat-8.0.53/logs diytomcat</span><br></pre></td></tr></table></figure><ol start="5"><li>在本地挂载的目录部署tomcat应用，查看日志</li></ol><h2 id="实战-Hadoop"><a href="#实战-Hadoop" class="headerlink" title="实战:Hadoop"></a>实战:Hadoop</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭selinux (立刻生效，不需要重启操作系统)</span></span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改/etc/selinux/config文件中的SELINUX=disabled ，然后重启系统生效</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要先构建一个hadoop的基础镜像，使用dockerfile文件方式进行构建。</span></span><br><span class="line"><span class="comment"># 先构建一个具备ssh功能的镜像，方便后期使用。（但是这样对于容器的安全性会有影响）</span></span><br><span class="line"><span class="comment"># 注意：这个镜像中的root用户的密码是root</span></span><br><span class="line"><span class="built_in">mkdir</span> centos-ssh-root </span><br><span class="line"><span class="built_in">cd</span> centos-ssh-root </span><br><span class="line">vim Dockerfile</span><br><span class="line"><span class="comment"># -t  镜像的名称</span></span><br><span class="line">docker build -t=”yanglf/centos-ssh-root” .</span><br><span class="line"><span class="comment"># 基于这个镜像再构建一个带有jdk的镜像</span></span><br><span class="line"><span class="built_in">mkdir</span> centos-ssh-root-jdk </span><br><span class="line"><span class="built_in">cd</span> centos-ssh-root-jdk </span><br><span class="line"><span class="built_in">cp</span> ../jdk-7u75-Linux-x64.tar.gz . </span><br><span class="line">vim Dockerfile</span><br><span class="line">docker build -t=”yanglf/centos-ssh-root-jdk” .</span><br><span class="line"><span class="comment"># 基于这个jdk镜像再构建一个带有hadoop的镜像</span></span><br><span class="line"><span class="built_in">mkdir</span> centos-ssh-root-jdk-hadoop </span><br><span class="line"><span class="built_in">cd</span> centos-ssh-root-jdk-hadoop </span><br><span class="line"><span class="built_in">cp</span> ../hadoop-2.4.1.tar.gz . </span><br><span class="line">vim Dockerfile</span><br><span class="line">docker build -t=”yanglf/centos-ssh-root-jdk-hadoop” .</span><br></pre></td></tr></table></figure><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择一个已有的os镜像作为基础 </span></span><br><span class="line"><span class="keyword">FROM</span> centos </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 镜像的作者 </span></span><br><span class="line"><span class="keyword">MAINTAINER</span> yanglf</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装openssh-server和sudo软件包，并且将sshd的UsePAM参数设置成no </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y openssh-server sudo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/UsePAM yes/UsePAM no/g&#x27;</span> /etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment">#安装openssh-clients</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y openssh-clients</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加测试用户root，密码root，并且将此用户添加到sudoers里 </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;root:root&quot;</span> | chpasswd </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;root  ALL=(ALL)    ALL&quot;</span> &gt;&gt; /etc/sudoers</span></span><br><span class="line"><span class="comment"># 下面这两句比较特殊，在centos6上必须要有，否则创建出来的容器sshd不能登录 </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动sshd服务并且暴露22端口 </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /var/run/sshd</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">22</span> </span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/usr/sbin/sshd&quot;</span>, <span class="string">&quot;-D&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> yanglf/centos-ssh-root</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> jdk-7u75-linux-x64.tar.gz /usr/local/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mv</span> /usr/local/jdk1.7.0_75 /usr/local/jdk1.7</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="number">7</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> yanglf/centos-ssh-root-jdk</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> hadoop-2.4.1.tar.gz /usr/local</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mv</span> /usr/local/hadoop-2.4.1 /usr/local/hadoop</span></span><br><span class="line"><span class="keyword">ENV</span> HADOOP_HOME /usr/local/hadoop</span><br><span class="line"><span class="keyword">ENV</span> PATH $HADOOP_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="搭建hadoop分布式集群"><a href="#搭建hadoop分布式集群" class="headerlink" title="搭建hadoop分布式集群"></a>搭建hadoop分布式集群</h3><blockquote><p>规划</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">准备搭建一个具有三个节点的集群，一主两从</span><br><span class="line">主节点：hadoop0 ip：192.168.2.10</span><br><span class="line">从节点1：hadoop1 ip：192.168.2.11</span><br><span class="line">从节点2：hadoop2 ip：192.168.2.12</span><br><span class="line"></span><br><span class="line">但是由于docker容器重新启动之后ip会发生变化，所以需要我们给docker设置固定ip。使用pipework给docker容器设置固定ip</span><br></pre></td></tr></table></figure><blockquote><p>启动三个容器，分别作为hadoop0 hadoop1 hadoop2</p><p>在宿主机上执行下面命令，给容器设置主机名和容器的名称，并且在hadoop0中对外开放端口50070 和8088</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name hadoop0 --hostname hadoop0 -d -P -p 50070:50070 -p 8088:8088 crxy/centos-ssh-root-jdk-hadoop</span><br><span class="line"> </span><br><span class="line">docker run --name hadoop1 --hostname hadoop1 -d -P crxy/centos-ssh-root-jdk-hadoop</span><br><span class="line"> </span><br><span class="line">docker run --name hadoop2 --hostname hadoop2 -d -P crxy/centos-ssh-root-jdk-hadoop</span><br></pre></td></tr></table></figure><blockquote><p>给这三台容器设置固定IP</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1：下载pipework 下载地址：https://github.com/jpetazzo/pipework.git</span></span><br><span class="line"><span class="comment"># 2：把下载的zip包上传到宿主机服务器上，解压,改名字</span></span><br><span class="line">unzip pipework-master.zip</span><br><span class="line"><span class="built_in">mv</span> pipework-master pipework</span><br><span class="line"><span class="built_in">cp</span> -rp pipework/pipework /usr/local/bin/</span><br><span class="line"><span class="comment"># 3：安装bridge-utils</span></span><br><span class="line">yum -y install bridge-utils</span><br><span class="line"><span class="comment"># 4：创建网络</span></span><br><span class="line">brctl addbr br0</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev br0 up</span><br><span class="line">ip addr add 192.168.2.1/24 dev br0</span><br><span class="line"><span class="comment"># 5：给容器设置固定ip</span></span><br><span class="line">pipework br0 hadoop0 192.168.2.10/24</span><br><span class="line">pipework br0 hadoop1 192.168.2.11/24</span><br><span class="line">pipework br0 hadoop2 192.168.2.12/24</span><br><span class="line"><span class="comment"># 验证一下，分别ping三个ip，能ping通就说明没问题</span></span><br></pre></td></tr></table></figure><blockquote><p>配置hadoop集群</p></blockquote><p>先连接到hadoop0上， 使用命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it hadoop0 /bin/bash</span><br><span class="line"><span class="comment"># 1：设置主机名与ip的映射，修改三台容器：vi /etc/hosts</span></span><br><span class="line">192.168.2.10  hadoop0</span><br><span class="line">192.168.2.11  hadoop1</span><br><span class="line">192.168.2.12  hadoop2</span><br><span class="line"><span class="comment"># 2：设置ssh免密码登录  在hadoop0上执行下面操作</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> .ssh</span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">ssh-keygen -t rsa(一直按回车即可)</span><br><span class="line">ssh-copy-id -i localhost</span><br><span class="line">ssh-copy-id -i hadoop0</span><br><span class="line">ssh-copy-id -i hadoop1</span><br><span class="line">ssh-copy-id -i hadoop2</span><br><span class="line">在hadoop1上执行下面操作</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">ssh-keygen -t rsa(一直按回车即可)</span><br><span class="line">ssh-copy-id -i localhost</span><br><span class="line">ssh-copy-id -i hadoop1</span><br><span class="line">在hadoop2上执行下面操作</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">ssh-keygen -t rsa(一直按回车即可)</span><br><span class="line">ssh-copy-id -i localhost</span><br><span class="line">ssh-copy-id -i hadoop2</span><br><span class="line"><span class="comment"># 3：在hadoop0上修改hadoop的配置文件</span></span><br><span class="line"><span class="comment"># 进入到/usr/local/hadoop/etc/hadoop目录</span></span><br><span class="line"><span class="comment"># 修改目录下的配置文件core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml</span></span><br><span class="line"><span class="comment"># (1)hadoop-env.sh</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk1.7</span><br><span class="line"><span class="comment"># (2)core-site.xml</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://hadoop0:9000&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">     &lt;property&gt;</span><br><span class="line">         &lt;name&gt;fs.trash.interval&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;1440&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"><span class="comment"># (3)hdfs-site.xml</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="literal">false</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"><span class="comment"># (4)yarn-site.xml</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt; </span><br><span class="line">        &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt; </span><br><span class="line">        &lt;value&gt;<span class="literal">true</span>&lt;/value&gt; </span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"><span class="comment"># (5)修改文件名：mv mapred-site.xml.template mapred-site.xml</span></span><br><span class="line"><span class="comment"># vi mapred-site.xml</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"><span class="comment"># (6)格式化 进入到/usr/local/hadoop目录下</span></span><br><span class="line">bin/hdfs namenode -format</span><br><span class="line"><span class="comment"># 注意：在执行的时候会报错，是因为缺少which命令，安装即可</span></span><br><span class="line">yum install -y <span class="built_in">which</span></span><br><span class="line"><span class="comment"># 格式化操作不能重复执行。如果一定要重复格式化，带参数-force即可</span></span><br><span class="line"><span class="comment"># (7)启动伪分布hadoop</span></span><br><span class="line">sbin/start-all.sh</span><br><span class="line"><span class="comment"># 第一次启动的过程中需要输入yes确认一下。</span></span><br><span class="line"><span class="comment"># 使用jps，检查进程是否正常启动？能看到下面几个进程表示伪分布启动成功</span></span><br><span class="line">[root@hadoop0 hadoop]<span class="comment"># jps</span></span><br><span class="line">3267 SecondaryNameNode</span><br><span class="line">3003 NameNode</span><br><span class="line">3664 Jps</span><br><span class="line">3397 ResourceManager</span><br><span class="line">3090 DataNode</span><br><span class="line">3487 NodeManager</span><br><span class="line"><span class="comment"># (8)停止伪分布hadoop</span></span><br><span class="line">sbin/stop-all.sh</span><br><span class="line"><span class="comment"># (9)指定nodemanager的地址，修改文件yarn-site.xml</span></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;description&gt;The hostname of the RM.&lt;/description&gt;</span><br><span class="line">  &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;hadoop0&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line"><span class="comment"># (10)修改hadoop0中hadoop的一个配置文件etc/hadoop/slaves</span></span><br><span class="line"><span class="comment"># 删除原来的所有内容，修改为如下</span></span><br><span class="line">hadoop1</span><br><span class="line">hadoop2</span><br><span class="line"><span class="comment"># (11)在hadoop0中执行命令</span></span><br><span class="line">scp -rq /usr/local/hadoop  hadoop1:/usr/local</span><br><span class="line">scp -rq /usr/local/hadoop  hadoop2:/usr/local</span><br><span class="line"><span class="comment"># (12)启动hadoop分布式集群服务</span></span><br><span class="line"><span class="comment"># 执行sbin/start-all.sh</span></span><br><span class="line"><span class="comment"># 注意：在执行的时候会报错，是因为两个从节点缺少which命令，安装即可</span></span><br><span class="line"><span class="comment"># 分别在两个从节点执行下面命令安装</span></span><br><span class="line">yum install -y <span class="built_in">which</span></span><br><span class="line"><span class="comment"># 再启动集群(如果集群已启动，需要先停止)</span></span><br><span class="line">sbin/start-all.sh</span><br><span class="line"><span class="comment"># (13)验证集群是否正常</span></span><br><span class="line"><span class="comment"># 首先查看进程：</span></span><br><span class="line"><span class="comment"># Hadoop0上需要有这几个进程</span></span><br><span class="line">[root@hadoop0 hadoop]<span class="comment"># jps</span></span><br><span class="line">4643 Jps</span><br><span class="line">4073 NameNode</span><br><span class="line">4216 SecondaryNameNode</span><br><span class="line">4381 ResourceManager</span><br><span class="line"><span class="comment"># Hadoop1上需要有这几个进程</span></span><br><span class="line">[root@hadoop1 hadoop]<span class="comment"># jps</span></span><br><span class="line">715 NodeManager</span><br><span class="line">849 Jps</span><br><span class="line">645 DataNode</span><br><span class="line"><span class="comment"># Hadoop2上需要有这几个进程</span></span><br><span class="line">[root@hadoop2 hadoop]<span class="comment"># jps</span></span><br><span class="line">456 NodeManager</span><br><span class="line">589 Jps</span><br><span class="line">388 DataNode</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>使用程序验证集群服务</p><ul><li>创建一个本地文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi a.txt</span><br><span class="line">hello you</span><br><span class="line">hello me</span><br></pre></td></tr></table></figure><ul><li>上传a.txt到hdfs上</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -put a.txt /</span><br></pre></td></tr></table></figure><ul><li>执行wordcount程序</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/hadoop/share/hadoop/mapreduce</span><br><span class="line">hadoop jar hadoop-mapreduce-examples-2.4.1.jar wordcount /a.txt /out</span><br></pre></td></tr></table></figure><ul><li>查看程序执行结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -text /out/part-r-00000</span><br></pre></td></tr></table></figure><ul><li>访问</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.144:50070/</span><br><span class="line">http://192.168.1.144:8088/</span><br></pre></td></tr></table></figure><h3 id="集群节点重启"><a href="#集群节点重启" class="headerlink" title="集群节点重启"></a>集群节点重启</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止</span></span><br><span class="line">docker stop hadoop0</span><br><span class="line">docker stop hadoop1</span><br><span class="line">docker stop hadoop2</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker start hadoop0</span><br><span class="line">docker start hadoop1</span><br><span class="line">docker start hadoop2</span><br><span class="line"><span class="comment"># 固定ip</span></span><br><span class="line">pipework br0 hadoop0 192.168.2.10/24</span><br><span class="line">pipework br0 hadoop1 192.168.2.11/24</span><br><span class="line">pipework br0 hadoop2 192.168.2.12/24</span><br><span class="line"><span class="comment"># 在容器中配置主机名和ip的映射关系 </span></span><br><span class="line">vim runhosts.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> 192.168.2.10    hadoop0 &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">echo</span> 192.168.2.11    hadoop1 &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">echo</span> 192.168.2.12    hadoop2 &gt;&gt; /etc/hosts</span><br><span class="line"><span class="comment"># 添加权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x runhosts.sh</span><br><span class="line"><span class="comment"># 把这个脚本拷贝到所有节点，并且分别执行这个脚本</span></span><br><span class="line">scp runhosts.sh hadoop1:~</span><br><span class="line">scp runhosts.sh hadoop2:~</span><br><span class="line"><span class="comment"># 执行脚本的命令</span></span><br><span class="line">./runhosts.sh</span><br><span class="line"><span class="comment"># 启动集群</span></span><br><span class="line">sbin/start-all.sh</span><br></pre></td></tr></table></figure><h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><blockquote><p>Docker Hub</p></blockquote><ol><li><a href="https://id.docker.com/">注册 docker hub 账号</a></li><li>登录docker hub</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos test]# docker login --help</span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>提交镜像 docker push</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交自己的镜像到服务器 带版本号</span> </span><br><span class="line">[root@VM_0_17_centos test]# docker push diytomcat</span><br><span class="line">The push refers to repository [docker.io/library/diytomcat]</span><br><span class="line">ea9e48ac981d: Preparing </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改  tag</span></span><br><span class="line">[root@VM_0_17_centos test]# docker tag diytomcat ylf/tomcat:1.0</span><br><span class="line">[root@VM_0_17_centos test]# docker push ylf/tomcat:1.0</span><br></pre></td></tr></table></figure><blockquote><p>阿里云镜像仓库</p></blockquote><ol><li>登录账号</li><li><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/repositories">创建镜像仓库</a></li><li>推送镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出登录</span></span><br><span class="line">[root@VM_0_17_centos test]# docker logout</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录镜像仓库</span></span><br><span class="line">[root@VM_0_17_centos test]# docker login --username=xxx registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">[root@VM_0_17_centos test]# docker push ylf/tomcat:1.0</span><br></pre></td></tr></table></figure><h2 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h2><p>docker save 保存的是镜像（image），docker export 保存的是容器（container）；</p><p>docker load 用来载入镜像包，docker import 用来载入容器包，但两者都会恢复为镜像；</p><p>docker load 不能对载入的镜像重命名，而 docker import 可以为镜像指定新名称。</p><ul><li>镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像的组成部分</span></span><br><span class="line">docker history mysql:5.7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将镜像 yanglf/mysql:v3 生成 mysql.tar 文档</span></span><br><span class="line">docker save -o mysql.tar yanglf/mysql:v3</span><br><span class="line"></span><br><span class="line">------------------------------------------------------</span><br><span class="line">docker save 镜像ID -o saveImageName.tar </span><br><span class="line">docker save 镜像ID &gt; saveImageName.tar</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"></span><br><span class="line">docker images ls</span><br><span class="line">docker load &lt; mysql.tar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--input , -i : 指定导入的文件，代替 STDIN。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--quiet , -q : 精简输出信息。</span></span><br><span class="line">docker load --input fedora.tar</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------</span><br><span class="line">docker load -i saveImageName.tar 或者</span><br><span class="line">docker load &lt; saveImageName.tar</span><br><span class="line">-----------------------------------------------------</span><br></pre></td></tr></table></figure><ul><li>容器</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> 容器ID或名称 -o container_name.tar</span><br><span class="line"></span><br><span class="line">docker import container_name.tar 或者</span><br><span class="line"><span class="built_in">cat</span> container_name.tar | docker import -repository:tag</span><br><span class="line"></span><br><span class="line">docker run --name mysqltestnew -p 3307:3307 -e MYSQL_ROOT_PASSWORD=12345 -d mysqlnew:5.7.27 docker-entrypoint.sh mysqld</span><br></pre></td></tr></table></figure><p> save/load和export/import区别</p><p>1、前者保存的为镜像，后者导出的为容器</p><p>2、前者导入的镜像后需要使用tag执行repository和tag，后者可以在导入的时候指定这两个参数</p><p>3、以mysql为例，前者启动时不需要添加docker-entrypoint.sh mysqld，后者则需要</p><p>4、前者导入的时候，只导入所需的层，并显示导入的进度及image id，分层导入结果很清晰，后者则只返回image id</p><p>5、前者导入的镜像大小不变，后者导入的镜像则丢失了一些历史和层数据，数据包比较小</p><h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="理解-docker0"><a href="#理解-docker0" class="headerlink" title="理解 docker0"></a>理解 docker0</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">linux 内部可以ping通容器</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker run -d -P --name tomcat01 tomcat</span><br><span class="line">[root@VM_0_17_centos ~]# docker exec -it ee8c9a04ca8a ip addr</span><br><span class="line">[root@VM_0_17_centos ~]# ping 172.17.0.2</span><br></pre></td></tr></table></figure><blockquote><p>原理</p></blockquote><ol><li>我们按照了docker，就会有一个docker0的网卡，docker0使用的桥接模式，使用的技术是evth-pair，我们每启动一个docker容器，docker就会给docker容器分配一个IP</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们发现这个容器生成的网卡都是一对一对</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">evth-pair 就是一对虚拟设备接口，一段连着协议，一段彼此连接</span></span><br></pre></td></tr></table></figure><ol start="2"><li>容器和容器之间可以ping通的</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker0 相当于一个路由器，容器之间公用一个路由器，容器之间通讯都是有docker0进行转发</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有容器不指定网络的情况下，都是docker0路由的，docker会给容器分配一个可用的ip,</span></span><br></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><p>Docker 使用的是Linux的桥接,宿主机中是一个Docker容器的网桥 docker0 </p><p>Docker 中所有的网络接口都是虚拟的，虚拟的转发效率高，只要容器删除，对应的网桥也会删除</p><h2 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h2><blockquote><p>我们编写一个微服务，datasource url =ip,项目不重启，数据库IP变了，我们希望通过容器名称访问数据库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker run -d -P --name tomcat01 tomcat</span><br><span class="line">[root@VM_0_17_centos ~]# docker run -d -P --name tomcat02 tomcat</span><br><span class="line">[root@VM_0_17_centos ~]# docker exec -it cc7fa10b0811 ping tomcat01</span><br><span class="line">ping: tomcat01: Name or service not known</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 --<span class="built_in">link</span> 可以解决容器之间联通的问题</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker run -d -P --name tomcat03 --link tomcat02 tomcat</span><br><span class="line">[root@VM_0_17_centos ~]# docker exec -it 5cde7deb8d4e ping tomcat02</span><br><span class="line">PING tomcat02 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.070 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.057 ms</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">反向ping不通</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker exec -it cc7fa10b0811 ping tomcat03</span><br><span class="line">ping: tomcat03: Name or service not known</span><br></pre></td></tr></table></figure><p>其实这个tomcat03 就是在hosts文件配置了一个tomcat02的映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker exec -it tomcat03 cat /etc/hosts</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.17.0.3tomcat02 cc7fa10b0811</span><br><span class="line">172.17.0.45cde7deb8d4e</span><br></pre></td></tr></table></figure><p><strong>本质:</strong> –link 就是我们在 hosts文件配置中新增了一个 172.17.0.3    tomcat02 cc7fa10b0811</p><p>真实环境使用docker，不建议使用–link 我们需要自定义网络，不使用docker0</p><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><blockquote><p>查看所有的网络</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                       DRIVER              SCOPE</span><br><span class="line">3f30113ad385        bridge                     bridge              local</span><br><span class="line">bb20121a9bf7        host                       host                local</span><br><span class="line">a22b6bc723e9        none                       null                local</span><br><span class="line">dda9856e69fc        sentry_onpremise_default   bridge              local</span><br></pre></td></tr></table></figure><p><strong>网络模式</strong></p><ol><li>bridge: 桥接模式，在docker之间搭桥 默认的，我们创建的网络也是用这个模式</li><li>none: 不配置网络</li><li>host： 和宿主机共享网络</li><li>container: 容器网络连通 用的比较少 局限比较大</li></ol><p><strong>测试</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之前直接启动的命令模式的网络 --net bridge 也就是 docker0</span></span><br><span class="line">docker run -d -P --name tomcat01 tomcat</span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker0 默认 域名不能访问，需要 --<span class="built_in">link</span> 打通</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们可以自定义一个网络，之后的容器都指定这个网络</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> --driver bridge 默认桥接模式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> --subnet 192.168.0.0/16  子网的地址 192.168.0.2 192.168.255.255 最多支持36635个网络</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> --gateway 192.168.0.1 网关</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">cfbf34529b6c73535cf538f6f7eab0d107a4193d444b4cd27ec61b9ec879468c</span><br><span class="line">[root@VM_0_17_centos ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                       DRIVER              SCOPE</span><br><span class="line">3f30113ad385        bridge                     bridge              local</span><br><span class="line">bb20121a9bf7        host                       host                local</span><br><span class="line">cfbf34529b6c        mynet                      bridge              local</span><br><span class="line">a22b6bc723e9        none                       null                local</span><br></pre></td></tr></table></figure><p>我们自己的网络就创建好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;cfbf34529b6c73535cf538f6f7eab0d107a4193d444b4cd27ec61b9ec879468c&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-05-31T14:29:28.038472717+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在新创建的网络启动两个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]# docker run -d -P --name tomcat-net-01 --net mynet tomcat</span><br><span class="line">[root@VM_0_17_centos ~]# docker run -d -P --name tomcat-net-02 --net mynet tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器分配的网络信息</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker network inspect mynet</span><br><span class="line"> &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;b41aac1d5b3601e84c0ca410bc7a91048d485ccf67ca5907b5a535b4e4c3a6fb&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat-net-01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;325f173a5c43c00c60347399d517f6a28d986adae1b23af15d49e759f7e424cd&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;c4fee6cc3e56142393bb6c06186a6a669cc85f0c27355c7f1a60356f3906dd97&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat-net-02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;185c42b5dafbe10c91aa52b56ea44f747432c764c60811ac0bc23b1f4875a968&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>测试是否可以连通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@VM_0_17_centos ~]# </span><br><span class="line">[root@VM_0_17_centos ~]# docker exec -it tomcat-net-02 ping 192.168.0.2</span><br><span class="line">PING 192.168.0.2 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=1 ttl=64 time=0.097 ms</span><br><span class="line">--- 192.168.0.2 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 1001ms</span><br><span class="line">rtt min/avg/max/mdev = 0.054/0.069/0.097/0.019 ms</span><br><span class="line">[root@VM_0_17_centos ~]# docker exec -it tomcat-net-02 ping tomcat-net-02</span><br><span class="line">PING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from c4fee6cc3e56 (192.168.0.3): icmp_seq=1 ttl=64 time=0.013 ms</span><br></pre></td></tr></table></figure><p>我们自定义的网络docker都帮我们维护好了，推荐平时这样使用网络</p><p>不同的集群使用不同的网络，保证网络的健康</p><p>redis    –net redisnet</p><p>mysql  –net mysqlnet</p><h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><p>自定义的多个网络，之间互相通讯</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]<span class="comment"># </span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker network --help</span></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  <span class="built_in">ls</span>          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  <span class="built_in">rm</span>          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;docker network COMMAND --help&#x27;</span> <span class="keyword">for</span> more information on a <span class="built_in">command</span>.</span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker network connect --help</span></span><br><span class="line">Usage:docker network connect [OPTIONS] NETWORK CONTAINER</span><br><span class="line">Connect a container to a network</span><br><span class="line">Options:</span><br><span class="line">      --<span class="built_in">alias</span> strings           Add network-scoped <span class="built_in">alias</span> <span class="keyword">for</span> the container</span><br><span class="line">      --driver-opt strings      driver options <span class="keyword">for</span> the network</span><br><span class="line">      --ip string               IPv4 address (e.g., 172.30.100.104)</span><br><span class="line">      --ip6 string              IPv6 address (e.g., 2001:db8::33)</span><br><span class="line">      --<span class="built_in">link</span> list               Add <span class="built_in">link</span> to another container</span><br><span class="line">      --link-local-ip strings   Add a link-local address <span class="keyword">for</span> the container</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试 docker01 网络下的 tomcat01 到 mynet 之间的通讯</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker run -d -P --name tomcat01 tomcat</span><br><span class="line">[root@VM_0_17_centos ~]# docker exec -it tomcat-net-01 ping tomcat01</span><br><span class="line">ping: tomcat01: Name or service not known</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连通 tomcat01和 mynet</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker network connect mynet tomcat01</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">连通之后 就是将tomcat01 放到 mynet 网络下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">有个容器，两个IP地址 相当于 阿里云 公网IP和内网IP</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker network inspect mynet</span><br><span class="line">   &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;943f20302e90f8efeaf3b2f542a1f500f8cb973cb9a9819d9f8924d25510ddca&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;cbac1c67256d84aa432059bec861131931f367a276ce57091ddf19598d66731d&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:04&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.4/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;b41aac1d5b3601e84c0ca410bc7a91048d485ccf67ca5907b5a535b4e4c3a6fb&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat-net-01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;325f173a5c43c00c60347399d517f6a28d986adae1b23af15d49e759f7e424cd&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;c4fee6cc3e56142393bb6c06186a6a669cc85f0c27355c7f1a60356f3906dd97&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat-net-02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;185c42b5dafbe10c91aa52b56ea44f747432c764c60811ac0bc23b1f4875a968&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">[root@VM_0_17_centos ~]# docker exec -it tomcat-net-01 ping tomcat01</span><br><span class="line">PING tomcat01 (192.168.0.4) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat01.mynet (192.168.0.4): icmp_seq=1 ttl=64 time=0.076 ms</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 1000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.052/0.060/0.076/0.012 ms</span><br></pre></td></tr></table></figure><h2 id="实战-部署redis集群"><a href="#实战-部署redis集群" class="headerlink" title="实战:部署redis集群"></a>实战:部署redis集群</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建 redis网卡</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker network create redis --subnet 172.38.0.0/16</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用shell脚本创建6个redis集群的配置文件</span></span><br><span class="line">for port in $(seq 1 6);\</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt; /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启集群</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">循环启动 docker容器</span></span><br><span class="line">for port in $(seq 1 6);\</span><br><span class="line">do \</span><br><span class="line">docker run -d -p 637$&#123;port&#125;:6379 --name redis-$&#123;port&#125; \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/data:/data \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">--net redis  \</span><br><span class="line">--ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">docker run -d -p 6371:6379 --name redis-1 \</span><br><span class="line">-v /mydata/redis/node-1/data:/data \</span><br><span class="line">-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">--net redis  \</span><br><span class="line">--ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置集群</span></span><br><span class="line">[root@VM_0_17_centos redis]# docker exec -it redis-1 /bin/sh</span><br><span class="line">/data # redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379  172.38.0.15:6379  172.38.0.16:6379 --cluster-replicas 1</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span></span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 172.38.0.15:6379 to 172.38.0.11:6379</span><br><span class="line">Adding replica 172.38.0.16:6379 to 172.38.0.12:6379</span><br><span class="line">Adding replica 172.38.0.14:6379 to 172.38.0.13:6379</span><br><span class="line">M: 52d775ae62511330551613e75ff7807be38e0832 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 2c8c02685aee54e6fda0517fdbd2cea18e4e0691 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: 27c14d404261a665ed6dc61d573dfeede05fa423 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 59675f195cd2b9a7a77bfb54a77f1b580f2ca261 172.38.0.14:6379</span><br><span class="line">   replicates 27c14d404261a665ed6dc61d573dfeede05fa423</span><br><span class="line">S: 50c7c5fcd632fd9eb70ed9808f6371fe7b65a9f2 172.38.0.15:6379</span><br><span class="line">   replicates 52d775ae62511330551613e75ff7807be38e0832</span><br><span class="line">S: 6ef94d9bbfa33edc0ab3e173cb4e481cc76e6f6c 172.38.0.16:6379</span><br><span class="line">   replicates 2c8c02685aee54e6fda0517fdbd2cea18e4e0691</span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Sending CLUSTER MEET messages to <span class="built_in">join</span> the cluster</span></span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">....</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)</span></span><br><span class="line">M: 52d775ae62511330551613e75ff7807be38e0832 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 6ef94d9bbfa33edc0ab3e173cb4e481cc76e6f6c 172.38.0.16:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 2c8c02685aee54e6fda0517fdbd2cea18e4e0691</span><br><span class="line">S: 59675f195cd2b9a7a77bfb54a77f1b580f2ca261 172.38.0.14:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 27c14d404261a665ed6dc61d573dfeede05fa423</span><br><span class="line">S: 50c7c5fcd632fd9eb70ed9808f6371fe7b65a9f2 172.38.0.15:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 52d775ae62511330551613e75ff7807be38e0832</span><br><span class="line">M: 2c8c02685aee54e6fda0517fdbd2cea18e4e0691 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 27c14d404261a665ed6dc61d573dfeede05fa423 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span></span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试 -c 代表连接集群</span></span><br><span class="line">/data # redis-cli -c</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看集群信息</span></span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有节点  三主三从</span></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">52d775ae62511330551613e75ff7807be38e0832 172.38.0.11:6379@16379 myself,master - 0 1590910836000 1 connected 0-5460</span><br><span class="line">6ef94d9bbfa33edc0ab3e173cb4e481cc76e6f6c 172.38.0.16:6379@16379 slave 2c8c02685aee54e6fda0517fdbd2cea18e4e0691 0 1590910836573 6 connected</span><br><span class="line">59675f195cd2b9a7a77bfb54a77f1b580f2ca261 172.38.0.14:6379@16379 slave 27c14d404261a665ed6dc61d573dfeede05fa423 0 1590910836000 4 connected</span><br><span class="line">50c7c5fcd632fd9eb70ed9808f6371fe7b65a9f2 172.38.0.15:6379@16379 slave 52d775ae62511330551613e75ff7807be38e0832 0 1590910835000 5 connected</span><br><span class="line">2c8c02685aee54e6fda0517fdbd2cea18e4e0691 172.38.0.12:6379@16379 master - 0 1590910835000 2 connected 5461-10922</span><br><span class="line">27c14d404261a665ed6dc61d573dfeede05fa423 172.38.0.13:6379@16379 master - 0 1590910836371 3 connected 10923-16383</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a=b 是由 172.38.0.13 这个节点处理</span> </span><br><span class="line">127.0.0.1:6379&gt; set a b</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [15495] located at 172.38.0.13:6379</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止  13 节点</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker stop redis-3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新连接后，在获取数据</span></span><br><span class="line">/data # redis-cli -c</span><br><span class="line">127.0.0.1:6379&gt; get a</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [15495] located at 172.38.0.14:6379</span></span><br><span class="line">&quot;b&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 nodes 节点信息  13节点  fail , 14 成为主节点  master</span></span><br><span class="line">172.38.0.14:6379&gt; cluster nodes</span><br><span class="line">59675f195cd2b9a7a77bfb54a77f1b580f2ca261 172.38.0.14:6379@16379 myself,master - 0 1590911165000 7 connected 10923-16383</span><br><span class="line">2c8c02685aee54e6fda0517fdbd2cea18e4e0691 172.38.0.12:6379@16379 master - 0 1590911166345 2 connected 5461-10922</span><br><span class="line">27c14d404261a665ed6dc61d573dfeede05fa423 172.38.0.13:6379@16379 master,fail - 1590911084833 1590911083731 3 connected</span><br><span class="line">6ef94d9bbfa33edc0ab3e173cb4e481cc76e6f6c 172.38.0.16:6379@16379 slave 2c8c02685aee54e6fda0517fdbd2cea18e4e0691 0 1590911165344 6 connected</span><br><span class="line">52d775ae62511330551613e75ff7807be38e0832 172.38.0.11:6379@16379 master - 0 1590911166000 1 connected 0-5460</span><br><span class="line">50c7c5fcd632fd9eb70ed9808f6371fe7b65a9f2 172.38.0.15:6379@16379 slave 52d775ae62511330551613e75ff7807be38e0832 0 1590911166846 5 connected</span><br></pre></td></tr></table></figure><h2 id="SpringBoot-打包Docker镜像"><a href="#SpringBoot-打包Docker镜像" class="headerlink" title="SpringBoot 打包Docker镜像"></a>SpringBoot 打包Docker镜像</h2><ol><li>构建 springboot 项目</li><li>打包应用</li><li>编写dockerfile</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line"></span><br><span class="line">CMD [&quot;--server.port=8080&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure><ol start="4"><li>构建镜像</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos docker]<span class="comment"># docker build -t ylf.docker:1.0 .</span></span><br></pre></td></tr></table></figure><ol start="5"><li>发布运行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos docker]# docker run -d -p 8088:8080 --name mydocker ylf.docker:1.0</span><br></pre></td></tr></table></figure><h1 id="Docker-清理"><a href="#Docker-清理" class="headerlink" title="Docker 清理"></a>Docker 清理</h1><h2 id="清理docker容器镜像"><a href="#清理docker容器镜像" class="headerlink" title="清理docker容器镜像"></a>清理docker容器镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 docker 文件夹磁盘使用情况</span></span><br><span class="line">du -hs /var/lib/docker/\</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下可以查看 Docker 的磁盘使用情况（类似于 Linux 上的 <span class="built_in">df</span> 命令）</span></span><br><span class="line">docker system df</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理</span></span><br><span class="line">docker system prune -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">类似于Linux上的<span class="built_in">df</span>命令，用于查看Docker的磁盘使用情况</span></span><br><span class="line">docker system df</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像（即无tag的镜像）</span></span><br><span class="line">docker system prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理得更加彻底，可以将没有容器使用Docker镜像都删掉（请慎重操作）</span></span><br><span class="line">docker system prune -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有虚悬（dangling）镜像，也就是 TAG 为 &lt;none&gt; 的</span></span><br><span class="line">docker images -f dangling=true</span><br></pre></td></tr></table></figure><h2 id="配置docker镜像目录"><a href="#配置docker镜像目录" class="headerlink" title="配置docker镜像目录"></a>配置docker镜像目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://&quot;],#个人阿里云进行加速地址</span><br><span class="line">    &quot;dns&quot;: [&quot;223.5.5.5&quot;,&quot;202.93.128.86&quot;],#DNS解析机器</span><br><span class="line">    &quot;data-root&quot;: &quot;/data/docker&quot; #镜像存放地址</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">docker restart $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h2 id="迁移docker工作目录"><a href="#迁移docker工作目录" class="headerlink" title="迁移docker工作目录"></a>迁移docker工作目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前工作目录</span></span><br><span class="line">docker info |grep &quot;Docker Root Dir&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止docker 并移动原有docker文件到新目录</span></span><br><span class="line">systemctl stop docker</span><br><span class="line">mkdir -p /opt/soft/</span><br><span class="line">mv /var/lib/docker /opt/soft/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新设置 Docker Root Dir  /opt/soft/docker</span></span><br><span class="line">vi /usr/lib/systemd/system/docker.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 ExecStart=/usr/bin/dockerd 后追加 --graph=/opt/soft/docker，注意如果本来后面有其他参数不要搞乱了</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例如下（后面其他参数是我个人配置别的使用的请忽略）</span></span><br><span class="line">ExecStart=/usr/bin/dockerd --graph=/opt/soft/docker -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start docker.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确认</span></span><br><span class="line">docker info |grep &quot;Docker Root Dir&quot;</span><br></pre></td></tr></table></figure><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h1 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h1><h1 id="CI-CD之Jenkins"><a href="#CI-CD之Jenkins" class="headerlink" title="CI/CD之Jenkins"></a>CI/CD之Jenkins</h1><h2 id="GitLab-CI"><a href="#GitLab-CI" class="headerlink" title="GitLab CI"></a>GitLab CI</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://mirrors.tuna.tsinghua.edu.cn/</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.9.10-ce.0.el7.x86_64.rpm</span><br><span class="line">rpm  -ivh gitlab-ce-12.9.10-ce.0.el7.x86_64.rpm</span><br><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line">external_url &#x27;http://106.55.153.148&#x27;</span><br><span class="line"></span><br><span class="line">gitlab_rails[&#x27;smtp_enable&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;smtp_address&#x27;] = &#x27;smtp.qq.com&#x27;</span><br><span class="line">gitlab_rails[&#x27;smtp_port&#x27;] = 456</span><br><span class="line">gitlab_rails[&#x27;smtp_user_name&#x27;] = &#x27;185601452@qq.com&#x27;</span><br><span class="line">gitlab_rails[&#x27;smtp_password&#x27;] = &#x27;nmjikjihuhughygy&#x27;</span><br><span class="line">gitlab_rails[&#x27;smtp_domain&#x27;] = &#x27;qq.com&#x27;</span><br><span class="line">gitlab_rails[&#x27;smtp_authentication&#x27;] = :login </span><br><span class="line">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;smtp_tls&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;185601452@qq.com&#x27;</span><br><span class="line">user[&#x27;git_user_email&#x27;] = &#x27;185601452@qq.com&#x27;</span><br><span class="line"></span><br><span class="line">grep &#x27;^[a-Z]&#x27; /etc/gitlab/gitlab.rb</span><br><span class="line">gitlab-ctl --help</span><br><span class="line">chmod +x /var/opt/gitlab/</span><br><span class="line">chmod +x /var/opt/</span><br><span class="line">chmod +x /var/</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问 http://106.55.153.148 用户名 root 密码需要修改</span></span><br><span class="line"></span><br><span class="line">/etc/gitlab  # 配置文件</span><br><span class="line">/run/gitlab # 运行pid文件</span><br><span class="line">/opt/gitlab # 安装目录</span><br><span class="line">/var/log/gitlab #日志文件</span><br><span class="line">gitlab-ctl stop # 停止</span><br><span class="line">gitlab-ctl start # 启动</span><br><span class="line">gitlab-ctl restart # 重启</span><br><span class="line">gitlab-ctl status # 状态</span><br><span class="line">gitlab-ctl tail nginx # 查看某个组件日志</span><br></pre></td></tr></table></figure><h3 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#x27;fengerous&#x27;</span><br><span class="line">git config --global user.email &#x27;fengerous106@gmail.com&#x27;</span><br><span class="line">git config --global --list</span><br><span class="line">git clone http://106.55.153.148/groupA/app1.git</span><br><span class="line">git add index.html</span><br><span class="line">git commit -m &#x27;v1&#x27;</span><br><span class="line">git status</span><br><span class="line">git push</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">git log</span><br><span class="line">vim .gitignore</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">版本回滚 HEAD为当前版本 加一个^为上一个版本，两个^为上上版本</span></span><br><span class="line">git reset --hard HEAD^^</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取每次提交<span class="built_in">id</span>，可以使用 --hard 根据<span class="built_in">id</span>进行版本回滚</span></span><br><span class="line">git reflog</span><br><span class="line">git reset --hard 5ae4b06</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回滚是在本地仓库进行，回滚后，可以选择 push，或者 pull 到远程仓库</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前所在分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建并切换新分支</span></span><br><span class="line">git checkout -b dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换分支</span></span><br><span class="line">git check dev</span><br><span class="line"></span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 develop分支代码合并到当前分支</span></span><br><span class="line">git merge origin/develop</span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##############################</span></span></span><br><span class="line">gitlab:</span><br><span class="line">create merge request</span><br><span class="line">title: v10合并申请</span><br><span class="line">description: 申请把v10合并到master分支，v10已经经过测试部门测试</span><br><span class="line">assignee: 申请处理人</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##############################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">clone</span>指定分支代码</span></span><br><span class="line">git clone -b develop http://106.55.153.148/groupA/app1.git</span><br></pre></td></tr></table></figure><h3 id="gitlab-分支模型"><a href="#gitlab-分支模型" class="headerlink" title="gitlab 分支模型"></a>gitlab 分支模型</h3><p>单分支模型: 只有 master分支</p><p>生产/开发模型: master分支和develop类型分支</p><p>特性、发布模型: master/develop/feature类型分支</p><p>开发、发布分离模型: master/develop/feature/release类型分支</p><p>开发、发布、缺陷模型: master/develop/feature/release/hotfix类型分支</p><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.jenkins.io/zh/">https://www.jenkins.io/zh/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo \</span><br><span class="line">    https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class="line">yum upgrade</span><br><span class="line">yum install jenkins</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看安装好的jenkins</span></span><br><span class="line">rpm -qal jenkins</span><br><span class="line">yum list installed | grep jenkins</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件</span></span><br><span class="line">/etc/default/jenkins</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载的war包</span></span><br><span class="line">/usr/share/jenkins/jenkins.war</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jenkins 插件安装目录</span></span><br><span class="line">/var/lib/jenkins/plugins</span><br><span class="line"></span><br><span class="line">vim /etc/default/jenkins</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认创建jenkins用户</span></span><br><span class="line">JENKINS_USER=root</span><br><span class="line">JENKINS_GROUP=root</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start jenkins</span><br><span class="line">systemctl status jenkins</span><br><span class="line"></span><br><span class="line">tail -f /var/log/jenkins/jenkins.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问  http://ip:8080</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插件下载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/ 下载插件解压到 /var/lib/jenkins/plugins 目录，重启Jenkins</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改Jenkins 配置文件下载源地址</span></span><br><span class="line">vim /var/lib/jenkins/hudson.model.UpdateCenter.xml</span><br><span class="line">&lt;?xml version=&#x27;1.1&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span><br><span class="line">&lt;sites&gt;</span><br><span class="line">  &lt;site&gt;</span><br><span class="line">    &lt;id&gt;default&lt;/id&gt;</span><br><span class="line">    &lt;url&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&lt;/url&gt;</span><br><span class="line">  &lt;/site&gt;</span><br><span class="line">&lt;/sites&gt;</span><br></pre></td></tr></table></figure><h3 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h3><h4 id="基于jenkins自动化clone代码部署"><a href="#基于jenkins自动化clone代码部署" class="headerlink" title="基于jenkins自动化clone代码部署"></a>基于jenkins自动化clone代码部署</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、jekins服务器生成ssh秘钥</span></span><br><span class="line">ssh-keygen</span><br><span class="line">ls /root/.ssh</span><br><span class="line">id_rsa  id_rsa.pub</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、 配置 gitlab 用户配置 -&gt; ssh key 复制公钥id_rsa.pub到gitlab</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、创建jenkins项目，源码管理 配置git <span class="built_in">clone</span> 地址和分支 新增全局凭证 配置私钥 用户名root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、配置构建环境 勾选 delete workspace before build start</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、copy ssh 公钥到其他服务器，方便 Jenkins免密复制文件到其他服务器</span></span><br><span class="line">ssh-copy-id root@192.168.22.10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、编写构建脚本</span></span><br><span class="line">cd /var/lib/jenkins/workspace/dev-demo</span><br><span class="line">tar czvf dev-demo.tar.gz ./*</span><br><span class="line">ssh root@192.168.22.10 &quot;/etc/init.d/tomcat stop&quot;</span><br><span class="line">scp dev-demo.tar.gz root@192.168..22.10:/data/tomcat/tomcat_webapps</span><br><span class="line">ssh root@192.168.22.10 &quot;cd /data/tomcat/tomcat_webapps/ &amp;&amp; rm -rf dev-demo/* &amp;&amp; tar xvf dev-demo.tar.gz -C dev-demo/&quot;</span><br><span class="line">ssh root@192.168.22.10 &quot;/etc/init.d/tomcat start&quot;</span><br></pre></td></tr></table></figure><h4 id="基于脚本clone代码部署"><a href="#基于脚本clone代码部署" class="headerlink" title="基于脚本clone代码部署"></a>基于脚本clone代码部署</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在构建脚本中使用shell脚本<span class="built_in">clone</span>代码部署</span></span><br><span class="line">cd /data/git/dev &amp;&amp; rm -rf demo</span><br><span class="line">git clone git@192.168.0.101:dev/demo.git &amp;&amp; cd demo &amp;&amp; tar czvf demo.tar.gz ./</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 停止服务</span></span></span><br><span class="line">ssh root@192.168.22.10 &quot;/etc/init.d/tomcat stop&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 分发代码</span></span></span><br><span class="line">scp dev-demo.tar.gz root@192.168.22.10:/data/tomcat/tomcat_webapps</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 代码替换</span></span></span><br><span class="line">ssh root@192.168.22.10 &quot;cd /data/tomcat/tomcat_webapps/ &amp;&amp; rm -rf demo/* &amp;&amp; tar xvf demo.tar.gz -C demo/ &amp;&amp; rm -rf demo.tar.gz&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动服务</span></span></span><br><span class="line">ssh root@192.168.22.10 &quot;/etc/init.d/tomcat start&quot;</span><br></pre></td></tr></table></figure><h4 id="脚本部署-python和shell脚本都可以"><a href="#脚本部署-python和shell脚本都可以" class="headerlink" title="脚本部署(python和shell脚本都可以)"></a>脚本部署(python和shell脚本都可以)</h4><ul><li>Jenkins服务器中编写脚本</li></ul><p>vim  /data/scripts/demo-deploy.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd /data/git/dev &amp;&amp; rm -rf demo</span><br><span class="line">git clone git@192.168.0.101:dev/demo.git &amp;&amp; cd demo &amp;&amp; tar czvf demo.tar.gz ./</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 停止服务</span></span></span><br><span class="line">ssh root@192.168.22.10 &quot;/etc/init.d/tomcat stop&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 分发代码</span></span></span><br><span class="line">scp dev-demo.tar.gz root@192.168.22.10:/data/tomcat/tomcat_webapps</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 代码替换</span></span></span><br><span class="line">ssh root@192.168.22.10 &quot;cd /data/tomcat/tomcat_webapps/ &amp;&amp; rm -rf demo/* &amp;&amp; tar xvf demo.tar.gz -C demo/ &amp;&amp; rm -rf demo.tar.gz&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动服务</span></span></span><br><span class="line">ssh root@192.168.22.10 &quot;/etc/init.d/tomcat start&quot;</span><br></pre></td></tr></table></figure><p>chmod a+x  /data/scripts/demo-deploy.sh</p><ul><li>Jenkins构建中执行脚本</li></ul><p>bash  /data/scripts/demo-deploy.sh</p><h4 id="Pipline"><a href="#Pipline" class="headerlink" title="Pipline"></a>Pipline</h4><ul><li>语法</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stage: 阶段 ,一个Pipline可以划分若干stage,每个stage都是一个操作,比如clone代码，编译代码，测试代码和代码部署，阶段是一个逻辑分组，可以跨node执行</span><br><span class="line">Node: 节点,每一个node都是一个Jenkins节点，可以是Jenkins master，也可以是Jenkins agent，node是执行step具体的服务器</span><br><span class="line">Step: 步骤,step 是Jenkins Pipline最基本的操作单元，从在服务器创建目录到构建服务镜像，由各Jenkins插件提供实现，一个stage可以有多个step</span><br></pre></td></tr></table></figure><ul><li>添加node</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Jenkins -&gt; 节点列表 -&gt; 新增节点</span></span><br><span class="line">节点名称: jenkins-agent1 固定节点</span><br><span class="line">描述: jenkins-agent1</span><br><span class="line">执行器数量: 2 (CPU个数)</span><br><span class="line">远程工作目录: /var/lib/jenkins （需要在节点服务器创建这个目录）</span><br><span class="line">标签: jenkins-agent1</span><br><span class="line">用法: 只允许运行绑定到这台机器的job</span><br><span class="line">启动方式: Launch agents via SSH   创建全局凭证 root-password  None verification Strategy</span><br><span class="line">可用性: 尽量保持代理在线</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看连接日志</span></span><br></pre></td></tr></table></figure><ul><li>创建任务-流水线</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义Pipline script</span></span><br><span class="line">node(&quot;jenkins-agent1&quot;)&#123;</span><br><span class="line">   stage(&quot;clone代码&quot;)&#123;</span><br><span class="line">     sh &quot;cd /var/lib/jenkins/workspace/dev &amp;&amp; rm -rf ./*&quot;</span><br><span class="line">     git credentialsId: &#x27;&#x27;,url:&#x27;git@192.168.0.101:dev/demo.git&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&quot;代码构建&quot;)&#123;</span><br><span class="line">     sh &quot;cd /var/lib/jenkins/workspace/dev &amp;&amp; tar czvf demo.tar.gz ./* &quot;</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&quot;停止服务&quot;)&#123;</span><br><span class="line">     sh &#x27;ssh root@192.168.22.10 &quot;/etc/init.d/tomcat stop &amp;&amp; rm -rf /data/tomcat/tomcat_webapps/demo/*&quot;&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&quot;代码copy&quot;)&#123;</span><br><span class="line">     sh &quot;cd /var/lib/jenkins/workspace/dev &amp;&amp; scp demo.tar.gz root@192.168.22.10:/data/tomcat/tomcat_webapps/&quot;</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&quot;代码部署&quot;)&#123;</span><br><span class="line">     sh &#x27;ssh root@192.168.22.10 &quot;cd /data/tomcat/tomcat_webapps/ &amp;&amp; tar xvf demo.tar.gz -C /data/tomcat/tomcat_webapps/ &amp;&amp; rm -rf demo.tar.gz&quot;&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&quot;启动服务&quot;)&#123;</span><br><span class="line">     sh &#x27;ssh root@192.168.22.10 &quot;/etc/init.d/tomcat start&quot;&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SCM</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在代码中定义 Jenkinsfile文件</span></span><br><span class="line">vim Jenkinsfile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将上边的Pipline script copy到这个文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Jenkins中流水线选择 pipline script from scm</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scm 配置Git地址</span></span><br></pre></td></tr></table></figure><h3 id="Sonarqube代码检测"><a href="#Sonarqube代码检测" class="headerlink" title="Sonarqube代码检测"></a>Sonarqube代码检测</h3><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###### 必须安装jdk和mysql</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget https://sonarsource.bintray.com/Distribution/sonarqube/sonarqube-6.1.zip</span><br><span class="line">wget https://sonarsource.bintray.com/Distribution/sonar-scanner-cli/sonar-scanner-2.8.zip</span><br><span class="line">chmod 777 sonarqube-6.1.zip</span><br><span class="line">chmod 777 sonar-scanner-2.8.zip</span><br><span class="line">unzip sonarqube-6.1.zip &amp;&amp; unzip  sonar-scanner-2.8.zip</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置</span></span><br><span class="line">vim sonarqube-6.1/conf/sonar.properties</span><br><span class="line">----------------------------------------------------</span><br><span class="line">sonar.jdbc.username=</span><br><span class="line">sonar.jdbc.password=</span><br><span class="line"></span><br><span class="line">sonar.jdbc.url=jdbc:mysql://172.16.30.228:3306/qjfsonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance</span><br><span class="line">sonar.jdbc.username=gmsd</span><br><span class="line">sonar.jdbc.password=gmsdtrade</span><br><span class="line">sonar.sorceEncoding=UTF-8</span><br><span class="line">sonar.login=admin</span><br><span class="line">sonar.password=admin</span><br><span class="line">sonar.web.host=*</span><br><span class="line">---------------------------------------------------</span><br><span class="line">cd sonarqube-6.1/bin/linux-x86-64/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入环境变量</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line">---------------------------------------------------</span><br><span class="line">export SONAR_HOME=~/sonar/sonarqube-6.1/bin/linux-x86-64/</span><br><span class="line">export SONAR_RUNNER_HOME=~/sonar/sonar-scanner-2.8/bin/</span><br><span class="line">export PATH=$JAVA_HOME/bin:$SONAR_HOME:$SONAR_RUNNER_HOME:$PATH</span><br><span class="line">---------------------------------------------------</span><br><span class="line">sonar.sh start   #启动服务</span><br><span class="line">sonar.sh stop    #停止服务</span><br><span class="line">sonar.sh restart #重启服务</span><br><span class="line">netstat -tpln | grep 9000</span><br><span class="line">tail -f sonarqube6.1/logs/sonar.log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问 http://localhost:9000</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换中文语言  设置-&gt;插件里搜索chinese -&gt; Chinese Pack</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Java插件 设置 -&gt; 插件里搜索Java -&gt; SonarJava</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插件所在目录 sonarqube6.1/extension/plugins</span></span><br><span class="line">vim sonar-scanner-2.8/conf/sonar-scanner.propertis</span><br><span class="line">---------------------------------------</span><br><span class="line">sonar.host.url=http://192.168.0.101:9000</span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">项目所在目录新增文件</span></span><br><span class="line">vim sonar-project.propertis</span><br><span class="line">---------------------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Required metadata</span></span><br><span class="line">sonar.projectKey=dev-demo-test-scanner</span><br><span class="line">sonar.projectName=dev-demo-test</span><br><span class="line">sonar.projectVersion=1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Comma-separated paths to directories with <span class="built_in">source</span> (required)</span></span><br><span class="line">sonar.source=src</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Language</span></span><br><span class="line">sonar.language=java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">encoding of <span class="built_in">source</span> file</span></span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br><span class="line">----------------------------------------</span><br><span class="line">sonar-scanner-2.8/bin/sonar-scanner # 启动 scanner</span><br></pre></td></tr></table></figure><h4 id="集成jenkins"><a href="#集成jenkins" class="headerlink" title="集成jenkins"></a>集成jenkins</h4><p><a href="https://www.jianshu.com/p/b357cf94e4d2">https://www.jianshu.com/p/b357cf94e4d2</a></p><h4 id="集成idea"><a href="#集成idea" class="headerlink" title="集成idea"></a>集成idea</h4><h3 id="发布策略"><a href="#发布策略" class="headerlink" title="发布策略"></a>发布策略</h3><h4 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h4><p>指两个版本之间能够平滑过渡的一种发布方式，灰度发布是增量发布的一种类型，灰度发布是在原有版本可用的情况下，同时部署一个新版本应用作为“金丝雀”,测试新版本的表现和性能，以保障整体系统稳定性的情况下，尽早发现、调整问题。</p><p>金丝雀发布、灰度发布步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、 准备好部署各个阶段的工件，包括：构建工件、测试脚本、配置文件和部署清单文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、 从负载均衡列表中移除“金丝雀”服务器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、 升级“金丝雀”应用（排除原有流量并进行部署）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、 对应用进行自动化测试</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、 将“金丝雀”服务器重新添加到负载均衡列表（连通性和健康检查）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、 如果“金丝雀”，在线测试成功，升级其他的服务器，否则就回滚</span></span><br></pre></td></tr></table></figure><h4 id="蓝绿部署"><a href="#蓝绿部署" class="headerlink" title="蓝绿部署"></a>蓝绿部署</h4><p>指的是不停止老版本代码（不影响上个版本访问）,而是在另一套环境部署一版本，然后进行测试，测试通过后将用户流量切换到新版本服务器，其特点是业务无中断，升级风险相对小.</p><p>绿蓝部署步骤:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、 当前版本业务正常访问 (V1)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、 在另一套环境部署新版本代码(V2)，代码可能是修改了bug或者新增了功能</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、 测试通过后将用户请求流量切换到新版本服务器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、 观察一段时间,如有异常直接切回旧版本</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、 下次升级，将旧版本升级到新版本(V3),两套环境之间相互切换升级</span></span><br></pre></td></tr></table></figure><h4 id="A-B测试"><a href="#A-B测试" class="headerlink" title="A/B测试"></a>A/B测试</h4><p>也是同时运行两个APP环境，但是和绿蓝部署不同，A/B测试是用来测试应用功能表现的方法，例如可用性、受欢迎程度、可见性等，绿蓝部署的目的是安全稳定的发布新版本应用，并在必要时回滚，即绿蓝部署是一套正式环境在线，而A/B测试是两套正式环境在线.</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;容器数据卷&quot;&gt;&lt;a href=&quot;#容器数据卷&quot; class=&quot;headerlink&quot; title=&quot;容器数据卷&quot;&gt;&lt;/a&gt;容器数据卷&lt;/h1&gt;&lt;h2 id=&quot;什么是容器数据卷&quot;&gt;&lt;a href=&quot;#什么是容器数据卷&quot; class=&quot;headerlink&quot; title=&quot;什么是容器数据卷&quot;&gt;&lt;/a&gt;什么是容器数据卷&lt;/h2&gt;&lt;p&gt;如果数据在容器中，那么容器删除，数据也会丢失!  数据持久化&lt;/p&gt;
&lt;p&gt;Docker 容器产生的数据，同步到本地，也就是将容器的目录挂载到Linux上&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器的持久化和同步操作，容器间数据共享&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="http://yanglf.online/categories/docker/"/>
    
    
    <category term="docker" scheme="http://yanglf.online/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker入门</title>
    <link href="http://yanglf.online/p/91b3bcfd.html"/>
    <id>http://yanglf.online/p/91b3bcfd.html</id>
    <published>2023-02-27T08:05:16.000Z</published>
    <updated>2023-03-02T03:49:04.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><span id="more"></span><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、 下载旧版本</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、 安装依赖</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、设置镜像仓库</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新软件包索引</span></span><br><span class="line">yum makecache fast </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、 安装 docker-ce 社区版</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 5、启动 docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、使用  docker version 查看是否安装成功</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker version</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7、hello world </span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker run hello-world</span></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">0e03bdcc26d7: Pull complete </span><br><span class="line">Digest: sha256:6a65f928fb91fcfbc963f7aa6d57c8eeb426ad9a20c7ee045538ef34847f44f1</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"><span class="comment"># 8、查看镜像</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        4 months ago        13.3kB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 docker </span></span><br><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment"># 删除资源目录</span></span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h1 id="win-linux-子模块"><a href="#win-linux-子模块" class="headerlink" title="win linux 子模块"></a>win linux 子模块</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>系统要求</p></blockquote><p>先必须是Win10系统，对于不同的CPU架构也有要求：</p><ol><li>对于 x64 系统：版本 1903 或更高版本，采用内部版本 18362 或更高版本。</li><li>对于 ARM64 系统：版本 2004 或更高版本，采用内部版本 19041 或更高版本。</li><li>低于 18362 的版本不支持 WSL2。使用 Windows Update 助手更新 Windows 版本。</li></ol><blockquote><p>启用虚拟机和Linux子系统功能</p></blockquote><p>以管理员身份打开 PowerShell 并运行（右键开始菜单图标），注意，一定要“以管理员的身份打开” 运行下面的命令开启Linux子系统功能：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><p>运行下面的命令开启虚拟机功能：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p>执行上面两句命令后就可以开启Linux子系统和虚拟机功能了，可以通过“设置-&gt;应用-&gt;程序和功能(应用界面右边相关设置下面)-&gt;启用或关闭Windows功能”查看</p><p>记得重启，之后才能安装Linux内核包！！！！</p><blockquote><p>下载并安装Linux内核更新包</p></blockquote><p>可以通过<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wslupdatex64.msi%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E4%B8%8B%E8%BD%BDLinux%E5%86%85%E6%A0%B8%E6%9B%B4%E6%96%B0%E5%8C%85%EF%BC%8C%E5%B9%B6%E5%AE%89%E8%A3%85">https://wslstorestorage.blob.core.windows.net/wslblob/wslupdatex64.msi这个地址下载Linux内核更新包，并安装</a></p><p>这个下载地址是X64 Windows系统的，如果是Arm64的系统，需要上面地址的文件名称改成这个wsl_update_arm64.msi</p><blockquote><p>将WSL2设置为默认版本</p></blockquote><p>以管理员的身份打开 PowerShell，将 WSL 2 设置为默认版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><p>如果通过以上几步没有遇到问题，那么恭喜你，WSL2环境已经启用成功。</p><blockquote><p>安装 Linux</p></blockquote><p>WSL2环境启用成功后，就可以安装Linux系统了，通过 Microsoft Store 搜索 Ubuntu 选择适合自己的Ubuntu版本，下载并安装（这里我安装的是18.04）</p><p>安装完成后，首次启动Ubuntu会有一个初始化过程，需要几分钟，然后创建一个Ubuntu账号：</p><blockquote><p>换源</p></blockquote><p>一般来说装完Linux系统第一件事就是换源，毕竟国内访问外网的网速感人，这里采用的是清华源，可以通过下面的地址获取清华源的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</span><br></pre></td></tr></table></figure><p>选择适合自己系统版本的源配置：</p><p><strong>配置源</strong>:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt/</span><br><span class="line"># 备份</span><br><span class="line">mv sources.list sources.list.def</span><br><span class="line">sudo vim sources.list</span><br><span class="line"># INSERT:::粘贴清华源的配置</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><blockquote><p>安装 docker</p></blockquote><p>Ubuntu安装Docker很简单，只需要一句命令就行：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -qO- https://get.docker.com | sh</span><br></pre></td></tr></table></figure><p><strong>执行控制台红色方框内的命令</strong> ，完成Docker的安装。</p><blockquote><p>运行 docker容器</p></blockquote><p>Docker安装完成之后可以通过简单的运行Docker容器来测试是否正常安装。</p><p>首先启动Docker后台进程：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br><span class="line"><span class="comment"># 运行 hello-world 容器</span></span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>迁移Linux子系统(非必要)</p></blockquote><p>在Windows启用WSL2功能后，默认情况下，在Microsoft store安装的Linux系统(Ubuntu)是在系统盘中(C盘)，但是一般来说系统盘的容量是有限的，所以下载安装Linux子系统后的第一步就是迁移Linux子系统。</p><p>首先查看已安装的Linux子系统</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l --all -v</span><br></pre></td></tr></table></figure><p>将Linux子系统导出到磁盘中(D盘)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --export Ubuntu-<span class="number">18</span>.<span class="number">04</span> d:\WSL\Ubuntu18.<span class="number">04</span>.tar</span><br></pre></td></tr></table></figure><p>注销当前Linux子系统(Ubuntu-18.04)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu-<span class="number">18</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure><p>重新导入Linux子系统，指定导入位置为D盘的WSL目录，WSL版本为2</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import Ubuntu-<span class="number">18</span>.<span class="number">04</span> d:\WSL d:\WSL\Ubuntu18.<span class="number">04</span>.tar --version <span class="number">2</span></span><br></pre></td></tr></table></figure><p>导入成功之后D盘的WSL目录下面将会出现一个ext4.vhdx文件，这个就是Linux子系统。</p><p>最后设置默认的登录用户名，这个命令好像只能在cmd命令行执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu1804 config --default-user itqn</span><br></pre></td></tr></table></figure><blockquote><p>为WSL2设置固定IP</p></blockquote><p>Windows的WSL有个坑，那就是每一次启动的时候IP地址都是随机生成的</p><p>可以创建一个bat脚本，每次开机的时候运行这个脚本即可(也可以设置开机自动设置)，bat脚本内容如下：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rem set IP for WSL</span></span><br><span class="line">wsl -d Ubuntu-<span class="number">18</span>.<span class="number">04</span> -u root ip addr add <span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">16</span>/<span class="number">24</span> broadcast <span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">255</span> dev eth0 <span class="built_in">label</span> eth0:<span class="number">1</span></span><br><span class="line"><span class="comment">rem set IP for windows10</span></span><br><span class="line">netsh interface ip add address &quot;vEthernet (WSL)&quot; <span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">88</span> <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>这个脚本一定要是Windows管理员身份运行。</p><p>这样WSL2的Linux子系统中和Windows系统就有了同一个网段的IP了</p><p>设置固定IP之后，访问WSL只需要使用固定的192.168.50.110即可，不需要知道WSL随机生成的IP是什么。</p><blockquote><p>IDEA安装Docker插件</p></blockquote><p>IDEA安装Docker插件跟IDEA安装其他插件是一样的，在Setting-&gt;Plugins中搜索安装即可</p><p>为了IDEA的Docker插件能连接到WSL的Docker，需要打开WSL的Docker 2375端口远程访问，编辑 <code>/etc/default/docker</code>修改如下配置:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 开启远程访问 -H tcp://<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">2375</span></span><br><span class="line"># 开启本地套接字访问 -H unix:///var/run/docker.sock</span><br><span class="line">DOCKER_OPTS=&quot;-H tcp://<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">2375</span> -H unix:///var/run/docker.sock&quot;</span><br></pre></td></tr></table></figure><p>重启 docker进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><p>在IDEA配置Docker远程连接，Build-&gt;Docker，配置对应WSL的IP即可连接Docker</p><p>连接Docker之后就可以查看和管理Docker镜像和容器</p><blockquote><p>开发 Java 应用</p></blockquote><p>项目pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/sayHi&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hi &quot;</span> + System.currentTimeMillis();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:openjdk-<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> target/*.jar app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$&#123;TZ&#125;</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$&#123;TZ&#125;</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8888</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;java&quot;</span>, <span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span> ]</span></span><br></pre></td></tr></table></figure><blockquote><p>一键发布部署</p></blockquote><p>Java应用开发完成后, 只需要创建Docker构建即可一键发布应用</p><p>设置前置任务来用maven编译项目(clean package)</p><p>运行构建即可自动创建容器并运行</p><p>访问Java应用测试</p><h1 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://m03wm683.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><blockquote><p>安装脚本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Centos新版本Docker安装：https://www.cnblogs.com/Peter2014/p/7704306.html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">step 1: 安装必要的一些系统工具</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 2: 添加软件源信息</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 3: 更新并安装 Docker-CE</span></span><br><span class="line">yum makecache fast</span><br><span class="line">yum install docker-ce-18.06.0.ce -y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 4: 开启Docker服务</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://vcugatat.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;hosts&quot;: [</span><br><span class="line">    &quot;tcp://0.0.0.0:0306&quot;,</span><br><span class="line">    &quot;unix:///var/run/docker.sock&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><blockquote><p>一键安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 \</span><br><span class="line">&amp;&amp; yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo \</span><br><span class="line">&amp;&amp; yum install  -y docker-ce docker-ce-cli containerd.io \</span><br><span class="line">&amp;&amp; systemctl start docker \</span><br><span class="line">&amp;&amp; yum -y install epel-release \</span><br><span class="line">&amp;&amp; yum -y install python-pip \</span><br><span class="line">&amp;&amp; pip install --upgrade pip \</span><br><span class="line">&amp;&amp; pip install docker-compose</span><br></pre></td></tr></table></figure><p>Docker for windows 工具: <code>https://www.docker.com/products/docker-desktop</code></p><h1 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示 docker版本信息</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment"># 显示 docker 的系统信息，包括容器和镜像数量</span></span><br><span class="line">docker info</span><br><span class="line"><span class="comment"># 帮助命令</span></span><br><span class="line">docker 命令 --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>帮助文档地址  <a href="https://docs.docker.com/engine/reference/commandline/docker/">https://docs.docker.com/engine/reference/commandline/docker/</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>查看所有本地主机上的镜像 docker images</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]<span class="comment"># </span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        4 months ago        13.3kB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释</span></span><br><span class="line">REPOSITORY <span class="comment"># 镜像仓库源</span></span><br><span class="line">TAG       <span class="comment"># 镜像标签</span></span><br><span class="line">IMAGE ID    <span class="comment"># 镜像id</span></span><br><span class="line">CREATED     <span class="comment"># 镜像创建时间</span></span><br><span class="line">SIZE     <span class="comment"># 镜像大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">    -a,  --all <span class="comment"># 列出所有镜像</span></span><br><span class="line">    -q,  --quiet <span class="comment"># 只显示镜像id</span></span><br></pre></td></tr></table></figure><p><strong>搜索镜像 docker search</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker search mysql</span></span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   9535                [OK]                </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3458                [OK]   </span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">  --filter=STARS=300 只搜索收藏大于3000的镜像</span><br><span class="line"> </span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker search mysql --filter=STARS=300</span></span><br><span class="line">NAME                 DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                MySQL is a widely used, open-source relation…   9535                [OK]                </span><br><span class="line">mariadb              MariaDB is a community-developed fork of MyS…   3458                [OK]                </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>下载镜像 docker pull</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像  docker pull 镜像名称 [:tag]</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker pull mysql</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">afb6ec6fdc1c: Pull complete     <span class="comment"># 分层下载，docker images 核心</span></span><br><span class="line">0bdc5971ba40: Pull complete </span><br><span class="line">97ae94a2c729: Pull complete </span><br><span class="line">f777521d340e: Pull complete </span><br><span class="line">1393ff7fc871: Pull complete </span><br><span class="line">a499b89994d9: Pull complete </span><br><span class="line">7ebe8eefbafe: Pull complete </span><br><span class="line">597069368ef1: Pull complete </span><br><span class="line">ce39a5501878: Pull complete </span><br><span class="line">7d545bca14bf: Pull complete </span><br><span class="line">211e5bb2ae7b: Pull complete </span><br><span class="line">5914e537c077: Pull complete </span><br><span class="line">Digest: sha256:a31a277d8d39450220c722c1302a345c84206e7fd4cdb619e7face046e89031d</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:latest</span><br><span class="line">docker.io/library/mysql:latest   <span class="comment"># 真实下载地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于它</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker pull mysql:5.7</span></span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">afb6ec6fdc1c: Already exists </span><br><span class="line">0bdc5971ba40: Already exists </span><br><span class="line">97ae94a2c729: Already exists </span><br><span class="line">f777521d340e: Already exists </span><br><span class="line">1393ff7fc871: Already exists </span><br><span class="line">a499b89994d9: Already exists </span><br><span class="line">7ebe8eefbafe: Already exists </span><br><span class="line">4eec965ae405: Pull complete </span><br><span class="line">a531a782d709: Pull complete </span><br><span class="line">270aeddb45e3: Pull complete </span><br><span class="line">b25569b61008: Pull complete </span><br><span class="line">Digest: sha256:d16d9ef7a4ecb29efcd1ba46d5a82bda3c28bd18c0f1e3b86ba54816211e1ac4</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mysql               5.7                 a4fdfd462add        3 days ago          448MB</span><br><span class="line">mysql               latest              30f937e841c8        3 days ago          541MB</span><br><span class="line">hello-world         latest              bf756fb1ae65        4 months ago        13.3kB</span><br></pre></td></tr></table></figure><p><strong>删除镜像 docker rmi</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除指定镜像</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker rmi 容器id</span></span><br><span class="line"><span class="comment"># 删除多个镜像</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker rmi 容器id 容器id 容器id</span></span><br><span class="line"><span class="comment"># 删除全部镜像</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker rmi -f $(docker images  -aq)</span></span><br></pre></td></tr></table></figure><p><strong>其他命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker images # 显示本地所有的镜像列表</span><br><span class="line">docker import # 从一个tar包创建一个镜像，往往和export结合使用</span><br><span class="line">docker build # 使用Dockerfile创建镜像（推荐）</span><br><span class="line">docker commit # 从容器创建镜像</span><br><span class="line">docker rmi # 删除一个镜像</span><br><span class="line">docker load # 从一个tar包创建一个镜像，和save配合使用</span><br><span class="line">docker save # 将一个镜像保存为一个tar包，带layers和tag信息</span><br><span class="line">docker history # 显示生成一个镜像的历史命令</span><br><span class="line">docker tag # 为镜像起一个别名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有镜像</span></span><br><span class="line">docker rmi $(docker images -q)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未使用的镜像</span></span><br><span class="line">docker image prune -a </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 24 小时之前创建的镜像</span></span><br><span class="line">docker image prune -a --filter&quot;until = 24h&quot;</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><em><strong>有了镜像才可以创建容器</strong></em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">  --name=<span class="string">&quot;Name&quot;</span>  容器名称  Tomcat1  Tomcat2  用来区分容器</span><br><span class="line">  -d             后台方式运行</span><br><span class="line">  -it            交互方式运行，进入容器查看</span><br><span class="line">  -p             指定容器端口 -p 8080:8080</span><br><span class="line">        -p <span class="built_in">id</span>:主机端口:容器端口</span><br><span class="line">        -p 主机端口:容器端口</span><br><span class="line">        -p 容器端口</span><br><span class="line">        容器端口</span><br><span class="line">  -P             随机指定端口</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 centos 并进入容器</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line"><span class="comment"># 查看容器内部文件</span></span><br><span class="line">[root@dbd5b3b6bc9f /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="comment"># 从容器退回到主机</span></span><br><span class="line">[root@dbd5b3b6bc9f /]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># ls</span></span><br><span class="line">chromedriver_linux64.zip  LibreOffice_6.3.4_Linux_x86-64_rpm.tar  <span class="built_in">test</span>  test.zip  up_det  up_his  up_hot  ww</span><br></pre></td></tr></table></figure><p><strong>列出所有运行的容器</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出当前正在运行的容器</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker ps  </span></span><br><span class="line"></span><br><span class="line">  -a   <span class="comment"># 列出当前正在运行的容器 + 历史运行过的容器</span></span><br><span class="line">  -n=? <span class="comment"># 显示最近创建的第几个容器</span></span><br><span class="line">  -q   <span class="comment"># 只显示容器的编号</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">dbd5b3b6bc9f        centos              <span class="string">&quot;/bin/bash&quot;</span>         2 minutes ago       Exited (0) 58 seconds ago                       unruffled_brattain</span><br><span class="line">7f7a009a3fb3        bf756fb1ae65        <span class="string">&quot;/hello&quot;</span>            44 minutes ago      Exited (0) 44 minutes ago                       quirky_ritchie</span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止并退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 不停止退出容器</span></span><br><span class="line">Ctrl + P + Q</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除指定容器 不能删除正在运行的容器  rm -f 强制删除</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器<span class="built_in">id</span></span><br><span class="line"><span class="comment"># 递归删除所有容器  -v 删除容器时删除对应的卷</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -aq)</span><br><span class="line">docker ps -a -q |xargs -docker <span class="built_in">rm</span></span><br><span class="line"><span class="comment"># 删除未使用的容器</span></span><br><span class="line">docker container prune </span><br><span class="line"><span class="comment"># 删除超过24小时的已停止容器：</span></span><br><span class="line">docker container prune --filter<span class="string">&quot;until = 24h&quot;</span></span><br><span class="line"><span class="comment"># 删除未使用的数据卷</span></span><br><span class="line">docker volume prune </span><br><span class="line"><span class="comment"># 删除未标记为保留标签的卷</span></span><br><span class="line">docker volume prune --filter<span class="string">&quot;label！= keep&quot;</span></span><br><span class="line"><span class="comment"># 删除未使用的网络</span></span><br><span class="line">docker network prune </span><br><span class="line"><span class="comment"># docker system prune命令是修剪镜像，容器，和网络的快捷方式。在Docker 17.06.0及更早版本中，卷也被修剪。在Docker 17.06.1及更高版本中，必须为docker system prune指定修剪卷的--volumes标志。</span></span><br><span class="line">docker system prune </span><br><span class="line">docker system prune --volumes </span><br><span class="line"><span class="comment"># 动态方式显示容器的资源占用状态</span></span><br><span class="line">docker stats mysql_master</span><br><span class="line"><span class="comment"># 显示正在运行的流程的一个容器</span></span><br><span class="line">docker top mysql_master</span><br></pre></td></tr></table></figure><p><strong>启动和停止容器</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器<span class="built_in">id</span>    <span class="comment"># 启动容器</span></span><br><span class="line">docker restart 容器<span class="built_in">id</span>   <span class="comment"># 重启容器</span></span><br><span class="line">docker stop 容器<span class="built_in">id</span>      <span class="comment"># 停止容器</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器<span class="built_in">id</span>      <span class="comment"># 强制停止容器</span></span><br></pre></td></tr></table></figure><h2 id="常用容器命令"><a href="#常用容器命令" class="headerlink" title="常用容器命令"></a>常用容器命令</h2><p><strong>后台启动容器</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 -d 启动 容器</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker run -d centos</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker ps</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现容器停止了</span></span><br><span class="line"><span class="comment"># 常见的坑，docker 容器使用后台运行，必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker logs -f -t --tail  容器id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 centos 并执行脚本，输出 hello</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker run -d centos /bin/sh -c &quot;while true;do echo hello;sleep 1;done&quot;</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">bf37d9801126        centos              <span class="string">&quot;/bin/sh -c &#x27;while t…&quot;</span>   4 seconds ago       Up 3 seconds                            romantic_black</span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment"># docker logs -tf --tail 10 bf37d9801126</span></span><br><span class="line">    </span><br><span class="line">    -tf       <span class="comment"># 格式化显示日志</span></span><br><span class="line">    -<span class="built_in">tail</span> number <span class="comment"># 要显示的日志条数</span></span><br></pre></td></tr></table></figure><p><strong>查看容器中的进程信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  docker top 容器<span class="built_in">id</span></span> </span><br><span class="line">[root@VM_0_17_centos ~]# docker top bf37d9801126</span><br><span class="line">UID       PID        PPID       C       STIME     TTY     TIME                CMD</span><br><span class="line">root                15004               14988               0                   15:05 </span><br><span class="line">root                15560               15004               0                   15:12 </span><br></pre></td></tr></table></figure><p><strong>查看镜像元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> docker inspect 容器<span class="built_in">id</span></span></span><br><span class="line">[root@VM_0_17_centos ~]# docker inspect bf37d9801126</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;bf37d98011264166d7bb98e898ac2138dfa0cb434ed157993d90bc9b3034a095&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-05-24T07:05:09.83784808Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo hello;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 15004,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2020-05-24T07:05:10.094375224Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:470671670cac686c7cf0081e0b37da2e9f4f768ddc5f6a26102ccd1c6954c1ee&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/bf37d98011264166d7bb98e898ac2138dfa0cb434ed157993d90bc9b3034a095/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/bf37d98011264166d7bb98e898ac2138dfa0cb434ed157993d90bc9b3034a095/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/bf37d98011264166d7bb98e898ac2138dfa0cb434ed157993d90bc9b3034a095/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/bf37d98011264166d7bb98e898ac2138dfa0cb434ed157993d90bc9b3034a095/bf37d98011264166d7bb98e898ac2138dfa0cb434ed157993d90bc9b3034a095-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/romantic_black&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;Capabilities&quot;: null,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/9f8a0299e6b4fdeac119e02479638e3015d9a1edecde4160f9ac2224eee8ab56-init/diff:/var/lib/docker/overlay2/d1b1e22b64405c968849b52891e893249d5431167575d6d74cd1a088200a0652/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/9f8a0299e6b4fdeac119e02479638e3015d9a1edecde4160f9ac2224eee8ab56/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/9f8a0299e6b4fdeac119e02479638e3015d9a1edecde4160f9ac2224eee8ab56/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/9f8a0299e6b4fdeac119e02479638e3015d9a1edecde4160f9ac2224eee8ab56/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;bf37d9801126&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo hello;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20200114&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;,</span><br><span class="line">                &quot;org.opencontainers.image.created&quot;: &quot;2020-01-14 00:00:00-08:00&quot;,</span><br><span class="line">                &quot;org.opencontainers.image.licenses&quot;: &quot;GPL-2.0-only&quot;,</span><br><span class="line">                &quot;org.opencontainers.image.title&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.opencontainers.image.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;b65d72ed8224fe6dccca196436f6e42a5a33addef6bd61a22698770730fbb0ef&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/b65d72ed8224&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;911a54ac3e9c8a291df54c250172583aff072286ec8692840a40ba5e56989f2f&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;4c044246dac93c404348df686e0a51139ff34590933cff1c506012d849a69aa9&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;911a54ac3e9c8a291df54c250172583aff072286ec8692840a40ba5e56989f2f&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通常容器都是后台运行，有时候需要进入容器修改一些配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span>  bashShell</span></span><br><span class="line"></span><br><span class="line">[root@VM_0_17_centos ~]# docker exec -it bf37d9801126 /bin/bash</span><br><span class="line">[root@bf37d9801126 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@bf37d9801126 /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 07:05 ?        00:00:00 /bin/sh -c while true;do</span><br><span class="line">root      1133     0  0 07:23 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      1176     1  0 07:24 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-</span><br><span class="line">root      1177  1133  0 07:24 pts/0    00:00:00 ps -ef</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">方式二</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker attach 容器<span class="built_in">id</span></span></span><br><span class="line">[root@VM_0_17_centos ~]# docker attach bf37d9801126</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">exec</span>  进入容器后，打开新的终端,常用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker attach 进入容器正在执行的终端，不会启动新的进程</span></span><br></pre></td></tr></table></figure><p><strong>容器常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">docker ps # 显示状态为运行（Up）的容器</span><br><span class="line">docker ps -a # 显示所有容器,包括运行中（Up）的和退出的(Exited)</span><br><span class="line">docker inspect # 深入容器内部获取容器所有信息</span><br><span class="line">docker logs # 查看容器的日志(stdout/stderr)</span><br><span class="line">docker events # 得到docker服务器的实时的事件</span><br><span class="line">docker port # 显示容器的端口映射</span><br><span class="line">docker top # 显示容器的进程信息</span><br><span class="line">docker diff # 显示容器文件系统的前后变化</span><br><span class="line"></span><br><span class="line">docker cp # 从容器里向外拷贝文件或目录</span><br><span class="line">docker export # 将容器整个文件系统导出为一个tar包，不带layers、tag等信息</span><br><span class="line"></span><br><span class="line">docker create # 创建一个容器但是不启动它</span><br><span class="line">docker run # 创建并启动一个容器</span><br><span class="line">docker stop # 停止容器运行，发送信号SIGTERM</span><br><span class="line">docker start # 启动一个停止状态的容器</span><br><span class="line">docker restart # 重启一个容器</span><br><span class="line">docker rm # 删除一个容器</span><br><span class="line">docker kill # 发送信号给容器，默认SIGKILL</span><br><span class="line">docker attach # 连接(进入)到一个正在运行的容器</span><br><span class="line">docker wait # 阻塞到一个容器，直到容器停止运行</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取容器ip</span></span><br><span class="line">docker inspect id | grep IPAddress | cut -d &#x27;&quot;&#x27; -f 4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取容器端口映射</span></span><br><span class="line">docker inspect -f &#x27;&#123;&#123;range $p, $conf := .NetworkSettings.Ports&#125;&#125; &#123;&#123;$p&#125;&#125; -&gt; &#123;&#123;(index $conf 0).HostPort&#125;&#125; &#123;&#123;end&#125;&#125;&#x27; id</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取环境变量</span></span><br><span class="line">docker exec container_id env</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除一周前创建的容器</span></span><br><span class="line">docker ps -a | grep &#x27;weeks ago&#x27; | awk &#x27;&#123;print $1&#125;&#x27; | xargs docker rm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除已经停止的容器</span></span><br><span class="line">docker rm `docker ps -a -q`</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载数据卷</span></span><br><span class="line">docker run -it --name bbox1 -v /docker/volumes/v1:/data busybox</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">共享数据卷</span></span><br><span class="line">docker run -it --name bbox2 --volumes-from bbox1 busybox</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自定义网络</span></span><br><span class="line">[root@node-65 ~]# docker network create -d bridge --subnet=172.16.0.0/16 --ip-range=172.16.0.0/16 --gateway=172.16.0.254 mybr0</span><br><span class="line">6f3b263dfd24f2184209a7884a44caf151c3ed934eed7200ed0d491ae1c8f214</span><br><span class="line"></span><br><span class="line">--subnet：指明子网</span><br><span class="line">--driver：指明设备</span><br><span class="line">--ip-range：容器加入时获取的地址范围</span><br><span class="line">--gateway：指明网关</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询docker网络</span></span><br><span class="line">[root@node-65 ~]# docker network ls</span><br><span class="line">[root@node-65 ~]#  docker run --name h2 --rm -it --net mybr0 -v /appdata/html:/data/html docker.io/hehe/bbox:v0.1.1-httpd </span><br><span class="line">/ # ifconfig</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给运行的容器添加网桥</span></span><br><span class="line">[root@node-65 ~]# docker network connect bridge h2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给运行的容器撤销网桥</span></span><br><span class="line">[root@node-65 ~]# docker network disconnect bridge h2</span><br></pre></td></tr></table></figure><p><strong>容器内拷贝文件到主机</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">即使容器停止了，也可以进行拷贝</span></span><br><span class="line">docker cp 容器id:容器内的路径 主机路径</span><br><span class="line"></span><br><span class="line">[root@VM_0_17_centos ~]# docker run -it centos /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器内部</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker attach e9e24f03514d</span><br><span class="line">[root@e9e24f03514d /]# </span><br><span class="line">[root@e9e24f03514d /]# cd /home</span><br><span class="line">[root@e9e24f03514d home]# ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在容器内 /home 目录下新建  test.java 文件</span></span><br><span class="line">[root@e9e24f03514d home]# touch test.java</span><br><span class="line">[root@e9e24f03514d home]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@e9e24f03514d home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@VM_0_17_centos ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@VM_0_17_centos ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">e9e24f03514d        centos              &quot;/bin/bash&quot;         3 minutes ago       Exited (0) 25 seconds ago                       boring_chaum</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件拷贝到主机</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker cp e9e24f03514d:/home/test.java /home</span><br><span class="line">[root@VM_0_17_centos ~]# cd /home</span><br><span class="line">[root@VM_0_17_centos home]# ls</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>docker部署nginx</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、搜索镜像 nginx</span> </span><br><span class="line">[root@VM_0_17_centos home]# docker search nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、拉取镜像 nginx</span></span><br><span class="line">[root@VM_0_17_centos home]# docker pull nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、 启动 nginx</span></span><br><span class="line">[root@VM_0_17_centos home]# docker run -d --name nginx02 -p 8087:80 nginx</span><br><span class="line">aa9fa8f084840a36826e2665d8fb5cca85d8a0d9a7d923e6cff7bdae26719361</span><br><span class="line">[root@VM_0_17_centos home]# </span><br><span class="line">[root@VM_0_17_centos home]# </span><br><span class="line">[root@VM_0_17_centos home]# </span><br><span class="line">[root@VM_0_17_centos home]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">aa9fa8f08484        nginx               &quot;nginx -g &#x27;daemon of…&quot;   5 seconds ago       Up 4 seconds        0.0.0.0:8087-&gt;80/tcp   nginx02</span><br><span class="line">[root@VM_0_17_centos home]# curl http://localhost:8087</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">[root@VM_0_17_centos home]# docker exec -it aa9fa8f08484 /bin/bash</span><br><span class="line">root@aa9fa8f08484:/# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@aa9fa8f08484:/# cd /etc/nginx/</span><br><span class="line">root@aa9fa8f08484:/etc/nginx# ls</span><br><span class="line">conf.dfastcgi_paramskoi-utf  koi-win  mime.types  modules  nginx.conf  </span><br><span class="line">root@aa9fa8f08484:/etc/nginx# exit</span><br><span class="line">exit</span><br><span class="line">[root@VM_0_17_centos home]# </span><br><span class="line">[root@VM_0_17_centos home]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">aa9fa8f08484        nginx               &quot;nginx -g &#x27;daemon of…&quot;   8 minutes ago       Up 8 minutes        0.0.0.0:8087-&gt;80/tcp   nginx02</span><br><span class="line">[root@VM_0_17_centos home]# docker stop aa9fa8f08484</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每次都需要进入容器内修改配置文件，是否麻烦，可以在主机配置一个映射目录，达到在容器修改配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v 数据卷</span></span><br></pre></td></tr></table></figure><blockquote><p>nginx 部署 tomcat</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">rm</span> 主要用于测试，用完就删除容器</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 Tomcat 镜像</span></span><br><span class="line">[root@VM_0_17_centos home]# docker pull tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 Tomcat</span></span><br><span class="line">[root@VM_0_17_centos home]# docker run -d -p 8081:8080 --name tomcat01 tomcat</span><br><span class="line">b7bc75a9a9d39825d48e4c20d081d32bab1ff7159d0d64739effbf8b9b52b650</span><br><span class="line">[root@VM_0_17_centos home]# docker ps</span><br><span class="line">[root@VM_0_17_centos home]# curl localhost:8081</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">[root@VM_0_17_centos home]# docker exec -it tomcat01 /bin/bash</span><br><span class="line">root@b7bc75a9a9d3:/usr/local/tomcat# ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现问题  1、 命令少了  2、 没有 webapps</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阿里云镜像的原因. 默认是最小镜像,所有不必要的资源都剔除  保证最小可运行环境</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@b7bc75a9a9d3:/usr/local/tomcat# cp -r webapps.dist/* ./webapps</span><br><span class="line">root@b7bc75a9a9d3:/usr/local/tomcat# cd webapps</span><br><span class="line">root@b7bc75a9a9d3:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br></pre></td></tr></table></figure><p>部署项目每次都需要进入容器的webapps目录,比较麻烦。我们可以在容器外提供一个映射路径，每次在外部放置项目，就自动同步到容器内部。</p><blockquote><p>部署 es+kibana</p><p><a href="https://hub.docker.com/_/elasticsearch">https://hub.docker.com/_/elasticsearch</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">es 暴露的端口比较多</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">es 十分耗内存</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">es 数据一般需要挂载到安全目录，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--net somenetwork  网络配置</span></span><br><span class="line">docker run -d --name elasticsearch  -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker 使用状态</span></span><br><span class="line">docker stats</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置  -e</span></span><br><span class="line">docker run -d --name elasticsearch5 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:6.8.9</span><br></pre></td></tr></table></figure><p>使用 kibana 连接 es 网络问题</p><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><ul><li><p>portainer： docker图形化管理工具，提供一个后台管理界面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">docker run -d -p 8088:9000 \</span><br><span class="line">  --restart=always -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  --privileged=true portainer/portainer</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器访问</span></span><br><span class="line">http://ip:8088/</span><br></pre></td></tr></table></figure></li><li><p>Rancher (持续部署）</p></li></ul><h1 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h1><hr><p>如何获取</p><ul><li>远程仓库下载</li><li>朋友拷贝</li><li>自己制作 DockerFile</li></ul><h2 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交容器成为一个新的副本</span></span><br><span class="line">docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、启动默认的tomcat</span></span><br><span class="line">[root@VM_0_17_centos home]# docker run -it  -p 8081:8080 tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、发下默认的 tomcat没有webapps应用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、自己 拷贝 webapps.dist下的文件到webapps目录下</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker exec -it ee7666fe5321 /bin/bash</span><br><span class="line">root@ee7666fe5321:/usr/local/tomcat# cp -r ./webapps.dist/* webapps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、将操作过的容器提交成新的镜像，我们以后就使用修改过的镜像</span></span><br><span class="line">[root@VM_0_17_centos ~]# docker commit -m=&quot;add webapps&quot; -a=&quot;ylf&quot; ee7666fe5321 tomcat01:1.0 </span><br><span class="line">sha256:e9b5d19c58378b9edd5c052935dfda93f7176d08483cc2463fbede2c897cbe38</span><br><span class="line">[root@VM_0_17_centos ~]# docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">tomcat01              1.0                 e9b5d19c5837        14 seconds ago      652MB</span><br><span class="line">tomcat                9.0                 1b6b1fe7261e        7 days ago          647MB</span><br><span class="line">tomcat                latest              1b6b1fe7261e        7 days ago          647MB</span><br><span class="line">nginx                 latest              9beeba249f3e        8 days ago          127MB</span><br><span class="line">elasticsearch         6.8.9               f057ebddf832        2 weeks ago         973MB</span><br><span class="line">elasticsearch         7.6.2               f29a1ee41030        8 weeks ago         791MB</span><br><span class="line">portainer/portainer   latest              2869fc110bf7        2 months ago        78.6MB</span><br><span class="line">centos                latest              470671670cac        4 months ago        237MB</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果需要保存当前容器的状态，可以通过commit提交，获得一个新的镜像，相当于容器的快照</span></span><br></pre></td></tr></table></figure><h2 id="常用仓库和镜像"><a href="#常用仓库和镜像" class="headerlink" title="常用仓库和镜像"></a>常用仓库和镜像</h2><h3 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h3><p><a href="https://dev.aliyun.com/search.html">阿里云</a></p><p><a href="https://c.163yun.com/hub#/m/home/">网易云</a></p><p><a href="https://hub.tenxcloud.com/">时速云</a></p><p><a href="https://hub.daocloud.io/">DaoCloud</a></p><h3 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h3><p><a href="https://hub.docker.com/">Docker Hub</a></p><p><a href="https://quay.io/">Quay</a></p><h3 id="国内加速站点"><a href="#国内加速站点" class="headerlink" title="国内加速站点"></a>国内加速站点</h3><p><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></p><p><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></p><p><a href="https://3laho3y3.mirror.aliyuncs.com/">https://3laho3y3.mirror.aliyuncs.com</a></p><p><a href="http://f1361db2.m.daocloud.io/">http://f1361db2.m.daocloud.io</a></p><p><a href="https://mirror.ccs.tencentyun.com/">https://mirror.ccs.tencentyun.com</a></p><h3 id="Harbor"><a href="#Harbor" class="headerlink" title="Harbor"></a>Harbor</h3><p><a href="https://juejin.cn/post/7039167192419532830">https://juejin.cn/post/7039167192419532830</a></p><h3 id="使用命令来配置加速站点"><a href="#使用命令来配置加速站点" class="headerlink" title="使用命令来配置加速站点"></a>使用命令来配置加速站点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;&lt;your accelerate address&gt;&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用脚本来配置加速站点"><a href="#使用脚本来配置加速站点" class="headerlink" title="使用脚本来配置加速站点"></a>使用脚本来配置加速站点</h3><p>该脚本可以将 –registry-mirror 加入到你的 Docker 配置文件 /etc/docker/daemon.json 中。适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7、Fedora、Arch Linux、openSUSE Leap 42.1，其他版本可能有细微不同。更多详情请访问文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://raw.githubusercontent.com/wss434631143/xiaoshujiang/master/articles/Docker/shell/set_mirror.sh | sh -s &lt;your accelerate address&gt;</span><br></pre></td></tr></table></figure><h3 id="通过修改启动脚本配置加速站点"><a href="#通过修改启动脚本配置加速站点" class="headerlink" title="通过修改启动脚本配置加速站点"></a>通过修改启动脚本配置加速站点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接修改 /usr/lib/systemd/system/docker.service 启动脚本</span></span><br><span class="line">vim /usr/lib/systemd/system/docker.service </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在dockerd后面加参数</span></span><br><span class="line">ExecStart=/usr/bin/dockerd --registry-mirror=&lt;your accelerate address&gt;</span><br></pre></td></tr></table></figure><p><strong>以上操作后重启一下 Docker</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="常用容器部署"><a href="#常用容器部署" class="headerlink" title="常用容器部署"></a>常用容器部署</h2><h3 id="为知笔记"><a href="#为知笔记" class="headerlink" title="为知笔记"></a>为知笔记</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内存不够的把 SEARCH=<span class="literal">true</span> 改成 <span class="literal">false</span></span></span><br><span class="line">docker run --name wiz -it -d -v  ~/wizdata:/wiz/storage -p 80:80 -e SEARCH=true wiznote/wizserver</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> http://127.0.0.1:80</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 默认管理员账号：admin@wiz.cn，密码：123456</span></span><br></pre></td></tr></table></figure><h3 id="网盘"><a href="#网盘" class="headerlink" title="网盘"></a>网盘</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># nextcloud  默认存储: sqlite</span></span></span><br><span class="line">docker run --name mysql -d -p 3306:3306 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-e MYSQL_DATABASE=nextcloud \</span><br><span class="line">-e MYSQL_USER=tom \</span><br><span class="line">-e MYSQL_PASSWORD=123 mysql:5.7</span><br><span class="line">docker run --name nextcloud -d -p 80:80 nextcloud</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#  owncloud 默认存储：sqlite</span></span></span><br><span class="line">docker run --name owncloud-mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br><span class="line">docker run --name owncloud -p 80:80 --link owncloud-mysql:db -d owncloud</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># docker-pan</span></span></span><br><span class="line">docker run --name=pan  -dti -p 8081:80 -p 6800:6800 jaegerdocker/pan</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http://yourdomain.com:8081  用户名:superuser 密码:superuser</span></span><br></pre></td></tr></table></figure><h3 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $(sudo docker ps -aq);</span><br><span class="line">docker volume rm $(sudo docker volume ls -q);</span><br><span class="line"></span><br><span class="line">rm -rf /etc/ceph \</span><br><span class="line">       /etc/cni \</span><br><span class="line">       /etc/kubernetes \</span><br><span class="line">       /opt/cni \</span><br><span class="line">       /opt/rke \</span><br><span class="line">       /run/secrets/kubernetes.io \</span><br><span class="line">       /run/calico \</span><br><span class="line">       /run/flannel \</span><br><span class="line">       /var/lib/calico \</span><br><span class="line">       /var/lib/etcd \</span><br><span class="line">       /var/lib/cni \</span><br><span class="line">       /var/lib/kubelet \</span><br><span class="line">       /var/lib/rancher/rke/log \</span><br><span class="line">       /var/log/containers \</span><br><span class="line">       /var/log/pods \</span><br><span class="line">       /var/run/calico</span><br><span class="line"></span><br><span class="line">for mount in $(mount | grep tmpfs | grep &#x27;/var/lib/kubelet&#x27; | awk &#x27;&#123; print $3 &#125;&#x27;) /var/lib/kubelet /var/lib/rancher; do umount $mount; done</span><br><span class="line"></span><br><span class="line">rm -f /var/lib/containerd/io.containerd.metadata.v1.bolt/meta.db</span><br><span class="line">sudo systemctl restart containerd</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line">IPTABLES=&quot;/sbin/iptables&quot;</span><br><span class="line">cat /proc/net/ip_tables_names | while read table; do</span><br><span class="line"><span class="meta prompt_">  $</span><span class="language-bash">IPTABLES -t <span class="variable">$table</span> -L -n | <span class="keyword">while</span> <span class="built_in">read</span> c chain rest; <span class="keyword">do</span></span></span><br><span class="line">      if test &quot;X$c&quot; = &quot;XChain&quot; ; then</span><br><span class="line">        $IPTABLES -t $table -F $chain</span><br><span class="line">      fi</span><br><span class="line">  done</span><br><span class="line"><span class="meta prompt_">  $</span><span class="language-bash">IPTABLES -t <span class="variable">$table</span> -X</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">--name=healthcheck \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">--health-cmd=&quot;curl --silent --fail localhost:8080/getstate || exit 1&quot; \</span><br><span class="line">--health-interval=15s \</span><br><span class="line">--health-retries=10 \</span><br><span class="line">--health-timeout=5s \</span><br><span class="line">bolingcavalry/dockerhealthcheck:0.0.1-SNAPSHOT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">rm</span>选项不能与-d同时使用  对于foreground容器，由于其只是在开发调试过程中短期运行，其用户数据并无保留的必要，因而可以在容器启动时设置--<span class="built_in">rm</span>选项，这样在容器退出时就能够自动清理容器内部的文件系统</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> health-cmd 指定命令在容器内执行，用于检查容器健康状态</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> health-interval 每次健康检查的间隔时间，默认30秒</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> health-retries 假设该值为3，表示若连续三次检测的返回结果都是不健康，就判定该容器不健康，默认值为3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> health-timeout 超时时间，默认30秒</span></span><br></pre></td></tr></table></figure><h3 id="编译jdk"><a href="#编译jdk" class="headerlink" title="编译jdk"></a>编译jdk</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--rm \</span><br><span class="line">-it \</span><br><span class="line">-v /usr/local/work/openjdksrc:/output \</span><br><span class="line">bolingcavalry/openjdksrc11:0.0.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改源码  jdk11/src/java.base/share/classes/java/lang/VersionProps.java.template</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line">docker run --rm \</span><br><span class="line">-it \</span><br><span class="line">-v /usr/local/work/openjdksrc:/src \</span><br><span class="line">bolingcavalry/buildopenjdk11:0.0.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jdk11/build/linux-x86_64-normal-server-release/build.log 查看日志</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">cd jdk11/build/linux-x86_64-normal-server-release/jdk/bin</span><br><span class="line">./java -version</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h1&gt;</summary>
    
    
    
    <category term="docker" scheme="http://yanglf.online/categories/docker/"/>
    
    
    <category term="docker" scheme="http://yanglf.online/tags/docker/"/>
    
  </entry>
  
</feed>
